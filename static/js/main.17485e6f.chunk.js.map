{"version":3,"sources":["components/forms/experimentalForm/firstField.jsx","firebase/firestoreProductionFunctions.js","firebase/firebase.js","secrets/firebaseConfig.js","contexts/authContext.jsx","contexts/formsContext.jsx","components/AuthorAutocomplete.jsx","components/TopicAutocomplete.jsx","components/TitleAutocomplete.jsx","components/forms/cardForm.jsx","components/forms/userBioForm.jsx","components/forms/confirmDelete.jsx","components/forms/authorBioForm.jsx","components/forms/cardDeleteAcknowlegement.jsx","components/forms/topicForm.jsx","components/forms/Forms.jsx","components/main/GenericCard.jsx","components/main/right.jsx","components/main/leftEx.jsx","assets/displayPicPlaceholder.png","assets/author-background.jpg","Pages/author.jsx","Pages/landing.jsx","components/Navbar.jsx","readerView/readerView.js","Pages/main.jsx","Pages/queue.jsx","Pages/explore.jsx","Pages/topic.jsx","components/protectedRoute.jsx","Pages/unauthorized.jsx","App.js","index.js"],"names":["createFilterOptions","Author","name","bio","avatar","website","twitter","background","uid","Tag","User","userName","Card","title","url","authorsArr","timestamp","tagsArr","inQueue","notes","addTagsToFirebase","formValues","optionsValues","userUid","a","map","tag","trim","tagsOptionsArr","newTagsArr","forEach","tagObj","undefined","find","tagOption","push","console","log","newTagObjArr","Promise","all","newTag","tagObject","uuidv4","addDoc","collection","db","length","getExistingTags","existingTags","userInput","match","option","filter","exTag","addAuthorsToFirebase","authorArr","author","authorOptionsArr","newAuthorArr","authorObj","authorOption","newAuthorObjArr","newAuthor","authorObject","getExistingAuthors","existingAuthors","exAuthor","deleteCard","cardUid","xquery","query","where","getDocs","targetDocRef","docs","ref","deleteDoc","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","getFirestore","storage","getStorage","signInWithFirebase","provider","GoogleAuthProvider","signInWithPopup","result","credential","credentialFromResult","accessToken","user","displayName","email","getDoc","doc","docSnap","data","exists","userObj","setDoc","userData","message","signout","signOut","authContext","createContext","AuthContext","props","useState","loading","setLoading","setUser","history","useHistory","useEffect","photoURL","unsub","onAuthStateChanged","userDetails","userDetailsRef","Provider","value","children","formsContext","FormsContext","formProps","setFormProps","authorProfile","authorUid","formType","showConfirmDelete","addCard","editCard","editCardUid","mode","closeForm","userBioForm","editUserUid","displayTopicForm","topicUid","AuthorAutocomplete","setFormValues","authorsOptionsArr","setOptionsValues","Autocomplete","multiple","id","defaultValue","renderTags","getTagProps","index","Chip","variant","label","onChange","event","reason","details","authorsArrValue","authorName","options","freeSolo","renderInput","params","TextField","placeholder","TopicAutocomplete","topicOptionsArr","inputValue","setInputValue","tagsArrValue","tagName","formDataContext","shouldBeInQueue","formValuesSubset","Object","keys","key","FirstStep","changeActiveTab","colorState","activeTab","handleInputChange","handleClick","errorObj","Typography","sx","ml","Box","display","Button","onClick","color","singleLineColor","multiLineColor","component","flexDirection","type","size","e","error","helperText","multiline","rows","urlsString","urls","marginTop","SecondStep","editMode","width","gap","currentTarget","justifyContent","startIcon","Acknowlegement","height","backgroundColor","alignItems","borderRadius","backgroundImage","backgroundClip","textFillColor","fontSize","fontWeight","minWidth","CardForm","useContext","activeTabSetter","currentPart","setCurrentPart","editCardData","dataPrepared","tagPoolSnapshot","tagsRecasted","tagOptionSnapshot","authorPoolSnapshot","authorsRecasted","authorOptionSnapshot","checkIfCardExists","cardQuery","querySnapshot","empty","renderAcknowlegement","preventDefault","dataset","formpart","urlArr","split","cardPromiseArr","then","doesCardExist","newlyCreatedCard","serverTimestamp","createdCardDocRef","catch","cardDocSnap","foundCardData","cardQuerySnapshot","existingTagsArr","newlyCreatedTagsArr","includedTags","existingAuthorsArr","newlyCreatedAuthorsArr","includedAuthors","newCard","cardRef","editCardDocumentSnapshot","editCardRef","updatedCard","updateDoc","target","Paper","p","overflow","marginLeft","UserBioForm","handleDrawerClose","uploadAvatarRef","useRef","uploadbackgroundRef","userDoc","userDocSubset","handleChange","current","files","padding","mb","className","gridTemplateColumns","autocomplete","autoComplete","gridColumnStart","gridRowStart","accept","style","click","assetRefs","fileRef","uploadBytes","avatarSorageRef","getDownloadURL","avatarDownloadURL","backgroundStorageRef","backgroundDownloadURL","updatedUserObj","handleSubmit","ConfirmDelete","React","open","setOpen","handleClose","Dialog","onClose","DialogContent","DialogContentText","DialogActions","autoFocus","AuthorBioForm","uploadCoverRef","acknowlegementVisibility","changeAcknowlegementVisibility","authorData","avatarStorageRef","updatedAuthorObj","authorQuery","authorDocRef","AuthorAcknowlegement","CardDeleteAcknowlegement","action","IconButton","Snackbar","autoHideDuration","TopicForm","topicData","pb","Stack","spacing","updatedTopicObj","topicQuery","topicDocRef","TopicAcknowlegement","Forms","isOpen","Drawer","anchor","GenericCard","cardType","cardData","styles","px","py","wrap","position","top","bottom","my","boxShadow","mt","pl","contentCard","Grid","container","direction","cardTitleContainer","item","xs","columnSpacing","icon","cardTitle","expandArrow","previewContent","metaCotainer","classname","leftHalf","savedToContainer","accountCircleIcon","savedToLabel","flexWrap","textDecoration","cursor","flex","maxWidth","Right","cardDataArr","parentPage","minHeight","card","LeftEx","topics","setTopics","tempArr","topicsDocSnapshot","Divider","Link","href","underline","mr","overflowY","pt","topic","cards","setCards","authorBioDetails","setAuthorBioDetails","useParams","unsubscribe","onSnapshot","documentSnapshot","cardsArr","cardObj","includeCard","getCardsOfAuthor","CssBaseline","Container","border","src","objectFit","objectPosition","left","displayPicPlaceholder","flexGrow","alignSelf","processedCards","filteredAuthors","processedCard","currentCardRef","Landing","SvgIcon","viewBox","fill","xmlns","d","textAlign","Navbar","loginState","changeLoginState","queueCardCount","setQueueCardCount","logoutBtnVisibility","changeLogoutBtnVisibility","snapshot","AppBar","elevation","textColor","Toolbar","disableGutters","to","ClickAwayListener","onClickAway","right","Fade","in","Main","setUserData","userDocData","orderBy","md","resetFormProps","Queue","Explore","editAuthorProfile","gridTemplateRows","AuthorCard","gridColumns","sm","Avatar","noWrap","Topic","currentTopic","setCurrentTopic","getCardsOfTopic","filteredTags","ProtectedRoute","Component","rest","render","routeProps","Unauthorized","App","exact","path","ReactDOM","document","getElementById"],"mappings":"ocAIeA,cAiEf,I,8FCVO,SAASC,EAAT,GAAsG,IAAlFC,EAAiF,EAAjFA,KAAiF,IAA1EC,WAA0E,MAAtE,GAAsE,MAAjEC,cAAiE,MAA1D,GAA0D,MAAtDC,eAAsD,MAA9C,GAA8C,MAAzCC,eAAyC,MAAjC,GAAiC,MAA5BC,kBAA4B,MAAf,GAAe,MAAVC,IAC9F,MAAO,CACHN,KAAOA,EACPC,IAAMA,EACNC,OAASA,EACTC,QAAUA,EACVC,QAAUA,EACVC,WAAaA,EACbC,SARoG,MAAJ,GAAI,GAcrG,SAASC,EAAT,GAA2D,IAAD,IAA5CP,YAA4C,MAAvC,GAAuC,MAAlCM,WAAkC,MAA9B,GAA8B,MAAzBL,WAAyB,MAArB,GAAqB,MAAhBI,WAC7C,MAAM,CACDL,KAAOA,EACPM,IAAMA,EACNL,IAAMA,EACNI,gBALwD,MAAL,GAAK,GAY1D,SAASG,GAAT,GAA8E,IAAD,IAA7DC,gBAA6D,MAApD,GAAoD,MAAhDH,WAAgD,MAA3C,GAA2C,MAAtCL,WAAsC,MAAjC,GAAiC,MAA5BC,cAA4B,MAArB,GAAqB,MAAhBG,WAChE,MAAM,CACFI,SAAWA,EACXH,IAAMA,EACNL,IAAMA,EACNC,OAASA,EACTG,gBAN4E,MAAL,GAAK,GAW7E,SAASK,GAAT,GAA8H,IAAD,IAA7GC,aAA6G,MAArG,GAAqG,MAAhGC,WAAgG,MAA1F,GAA0F,MAArFN,WAAqF,MAAhF,GAAgF,MAA3EO,kBAA2E,MAA9D,GAA8D,MAAxDC,iBAAwD,MAA9C,GAA8C,MAAzCC,eAAyC,MAAhC,GAAgC,MAA1BC,eAA0B,aAAVC,MACtH,MAAM,CACFN,MAAQA,EACRC,IAAMA,EACNC,WAAaA,EACbC,UAAYA,EACZC,QAAUA,EACVC,QAAUA,EACVC,WAR4H,MAAJ,GAAI,EAS5HX,IAAMA,GAeP,SAAeY,GAAtB,uC,8CAAO,WAAiCC,EAAaC,EAAgBC,GAA9D,qBAAAC,EAAA,yDAECP,EAAUI,EAAWJ,QAAQQ,KAAK,SAACC,GAAD,mBAAC,eAAcA,GAAf,IAAqBxB,KAAOwB,EAAIxB,KAAKyB,YAIvEC,EAAiBN,EAAcM,eAE/BC,EAAa,GAGG,MAAjBP,EAXA,gBAYCO,EAAaZ,EAZd,0BAeKA,IAAY,GAfjB,wBAgBCY,EAAc,GAhBf,kBAiBQ,IAjBR,QAqBCZ,EAAQa,SAAS,SAACC,QAC8DC,IAAxEJ,EAAeK,MAAM,SAACC,GAAD,OAAeA,EAAUhC,OAAS6B,EAAO7B,SAE9D2B,EAAWM,KAAKJ,MAGxBK,QAAQC,IAAI,iCACZD,QAAQC,IAAIR,GA5Bb,yBAgCCS,EAAe,GAhChB,UAkCGC,QAAQC,IAAKX,EAAWJ,KAAK,SAACgB,GAChC,IAAIC,EAAYjC,EAAI,CAAEP,KAAOuC,EAAOvC,KAAOM,IAAMmC,gBAIjD,OAHAP,QAAQC,IAAI,gBACZD,QAAQC,IAAIK,GACZJ,EAAaH,KAAKO,GACXE,YAAQC,YAAYC,GAAK,QAASvB,EAAU,WAAamB,OAvCjE,eA2CCN,QAAQC,IAAR,UAAeC,EAAaS,OAA5B,8BACAX,QAAQC,IAAI,4BACZD,QAAQC,IAAIC,GA7Cb,kBAgDMA,GAhDN,mCAmDCF,QAAQC,IAAR,MAnDD,4D,sBAyDA,SAASW,GAAiB3B,EAAaC,GAE1C,IAAI2B,EAAe5B,EAAWJ,QAAQQ,KAAK,SAACyB,GAGxC,IAHsD,EAGlDC,OAAQnB,EAH0C,cAIpCV,EAAcM,gBAJsB,IAItD,IAAI,EAAJ,qBAA+C,CAAC,IAAxCwB,EAAuC,QAC3C,GAAGF,EAAUhD,OAASkD,EAAOlD,KAAK,CAC9BiD,EAAQC,EACR,QAP8C,8BActD,OAAOD,KAKX,OADAF,EAAeA,EAAaI,QAAQ,SAAEC,GAAF,YAAqBtB,GAATsB,KA0C7C,SAAeC,GAAtB,uC,8CAAO,WAAoClC,EAAaC,EAAgBC,GAAjE,qBAAAC,EAAA,yDAECgC,EAAYnC,EAAWN,WAAWU,KAAK,SAACgC,GAAD,mBAAC,eAAiBA,GAAlB,IAA2BvD,KAAOuD,EAAOvD,KAAKyB,YAIrF+B,EAAmBpC,EAAcoC,iBAEjCC,EAAe,GAGC,MAAjBrC,EAXA,gBAYCqC,EAAeH,EAZhB,0BAeKA,IAAc,GAfnB,wBAgBCG,EAAe,GAhBhB,kBAiBQA,GAjBR,QAqBCH,EAAU1B,SAAS,SAAC8B,QACuE5B,IAAnF0B,EAAiBzB,MAAM,SAAC4B,GAAD,OAAkBA,EAAa3D,OAAS0D,EAAU1D,SAEzEyD,EAAaxB,KAAKyB,MAG1BxB,QAAQC,IAAI,oCACZD,QAAQC,IAAIsB,GA5Bb,yBAgCCG,EAAkB,GAhCnB,UAkCGvB,QAAQC,IAAKmB,EAAalC,KAAK,SAACsC,GAClC,IAAIC,EAAe/D,EAAO,CAAEC,KAAO6D,EAAU7D,KAAOM,IAAMmC,gBAI1D,OAHAP,QAAQC,IAAI,oBACZD,QAAQC,IAAI2B,GACZF,EAAgB3B,KAAK6B,GACdpB,YAAQC,YAAYC,GAAK,QAAUvB,EAAU,cAAgByC,OAvCrE,eA2CC5B,QAAQC,IAAR,UAAeyB,EAAgBf,OAA/B,iCACAX,QAAQC,IAAI,+BACZD,QAAQC,IAAIyB,GA7Cb,kBAgDMA,GAhDN,mCAmDC1B,QAAQC,IAAR,MAnDD,4D,sBAyDA,SAAS4B,GAAoB5C,EAAaC,GAE7C,IAAI4C,EAAkB7C,EAAWN,WAAWU,KAAK,SAACyB,GAG9C,IAH4D,EAGxDC,OAAQnB,EAHgD,cAI1CV,EAAcoC,kBAJ4B,IAI5D,IAAI,EAAJ,qBAAiD,CAAC,IAA1CN,EAAyC,QAC7C,GAAGF,EAAUhD,OAASkD,EAAOlD,KAAK,CAC9BiD,EAAQC,EACR,QAPoD,8BAc5D,OAAOD,KAKX,OADAe,EAAkBA,EAAgBb,QAAQ,SAAEc,GAAF,YAA2BnC,GAAZmC,KAyFtD,SAAeC,GAAtB,qC,8CAAO,WAA0B7C,EAAU8C,GAApC,iBAAA7C,EAAA,sEAEK8C,EAASC,YAAO1B,YAAYC,GAAK,QAAUvB,EAAU,SAAWiD,YAAM,MAAQ,KAAOH,IAF1F,SAG2BI,YAASH,GAHpC,cAGKI,EAHL,OAG6CC,KAAK,GAAGC,IAHrD,SAKOC,YAAUH,GALjB,OAMCtC,QAAQC,IAAR,UAAegC,EAAf,+BAND,kDASCjC,QAAQC,IAAR,gCAAqCgC,IATtC,2D,sBC3YKS,YCVkB,CAC5BC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CDIT,IACaC,GAAOC,cACPxC,GAAKyC,cACLC,GAAUC,cAEVC,GAAkB,uCAAG,4CAAAlE,EAAA,sEAExBmE,EAAW,IAAIC,IAFS,SAGXC,YAAiBR,GAAOM,GAHb,cAG1BG,EAH0B,OAKxBC,EAAaH,IAAmBI,qBAAsBF,GAC9CC,EAAWE,YANK,EAOUH,EAAOI,KAAvCC,EAPsB,EAOtBA,YAAeC,EAPO,EAOPA,MAAQ5F,EAPD,EAOCA,IAE/B4B,QAAQC,IAAR,UAAe8D,EAAf,YAA8BC,EAA9B,YAAuC5F,IATT,UAWV6F,YAAQC,YAAKxD,GAAM,QAAUtC,IAXnB,WAW1B+F,EAX0B,OAY9BnE,QAAQC,IAAIkE,EAAQC,SACI,IAArBD,EAAQE,SAbmB,wBAc5BrE,QAAQC,IAAI,4DAERqE,EAAUhG,GAAK,CAAEyF,cAAcC,QAAQ5F,QAhBf,UAiBtBmG,YAASL,YAAKxD,GAAK,QAAYtC,GAAS,CAAEoG,SAAWF,IAjB/B,QAkB5BtE,QAAQC,IAAR,mBAAwB8D,EAAxB,sBAlB4B,0DAsB9B/D,QAAQC,IAAI,KAAMwE,SAtBY,0DAAH,qDA2BlBC,GAAO,uCAAG,4BAAAtF,EAAA,+EAEFuF,YAAQ1B,IAFN,OAEfa,EAFe,OAGnB9D,QAAQC,IAAI6D,GAHO,gDAMnB9D,QAAQC,IAAI,KAAMwE,SANC,yDAAH,qD,SEpCPG,GAAcC,0BAsEZC,GApEK,SAACC,GAEjB,MAA+BC,oBAAS,GAAxC,mBAAMC,EAAN,KAAgBC,EAAhB,KACA,EAAyBF,qBAAzB,mBAAMlB,EAAN,KAAaqB,EAAb,KAEMC,EAAUC,eAmDhB,OA9CAC,qBAAW,WACP,GAAW,MAARxB,EAAa,CACZ9D,QAAQC,IAAI,0DACZ,IAAM8D,EAAyCD,EAAzCC,YAAcC,EAA2BF,EAA3BE,MAAQ5F,EAAmB0F,EAAnB1F,IAAMmH,EAAazB,EAAbyB,SAClCvF,QAAQC,IAAI,CAAE8D,cAAcC,QAAQ5F,MAAMmH,gBAE9C,CAAEzB,IAINwB,qBAAW,WAEP,IAAIE,EAAQC,YAAoBxC,GAAF,uCAAS,WAAOyC,GAAP,yBAAAtG,EAAA,0DAChCsG,EADgC,wBAEzB3B,EAAyC2B,EAAzC3B,YAAcC,EAA2B0B,EAA3B1B,MAAQ5F,EAAmBsH,EAAnBtH,IAAMmH,EAAaG,EAAbH,SAClCvF,QAAQC,IAAR,UAAe8D,EAAf,mBACA/D,QAAQC,IAAIyF,GAEZP,EAAQ,CAAEpB,cAAcC,QAAQ5F,MAAMmH,aArB9CH,EAAQrF,KAAK,SAyBD4F,EAAiBzB,YAAIxD,GAAK,QAAUtC,GAVT,SAWrB6F,YAAO0B,GAXc,sBAWGtB,UAAa,IAXhB,6BAYvBC,EAAUhG,GAAK,CAAGyF,cAAc3F,MAAM4F,UAZf,UAarBO,YAAOoB,EAAiB,CAAED,YAAcpB,IAbnB,QAc3BtE,QAAQC,IAAI,wDAde,gCAiBX,OAAhByF,IACJ1F,QAAQC,IAAI,wBACZkF,EAAQ,OAnBuB,QAsBnCD,GAAW,GAtBwB,4CAAT,uDA2B9B,OAAO,WACHM,OAGJ,IAII,cAACZ,GAAYgB,SAAb,CAAsBC,MAAU/B,EAAhC,UAIOmB,GAAWF,EAAMe,YClEvBC,GAAelB,0BA4DbmB,GA1DM,SAACjB,GAIlB,MAAmCC,qBAAnC,mBAAMiB,EAAN,KAAkBC,EAAlB,KAEAZ,qBAAW,WACTtF,QAAQC,IAAI,kEACZD,QAAQC,IAAIgG,KACV,CAACA,IA0CL,OACI,cAACF,GAAaH,SAAd,CAAuBC,MAAQ,CAAEM,cAxCjB,SAACC,GACjBF,EAAa,2BAAMD,GAAP,IAAmBI,SAAW,gBAAkBD,UAAYA,MAuCvBE,kBAd3B,SAACrE,GACvBiE,EAAa,2BAAKD,GAAN,IAAkBI,SAAW,gBAAkBpE,QAAUA,MAaAsE,QApCzD,WACZL,EAAa,2BAAKD,GAAN,IAAkBI,SAAW,eAmCqCG,SA5BjE,SAACC,GACdzG,QAAQC,IAAR,gGAAqGwG,EAArG,MACAP,EAAa,2BAAMD,GAAP,IAAmBI,SAAW,eAAiBK,KAAO,OAASD,YAAcA,MA0BAE,UAvB3E,WACZT,KAsBmGU,YAlBrF,SAACC,GACjBX,EAAa,2BAAMD,GAAP,IAAmBI,SAAW,cAAgBQ,YAAcA,MAiB2CZ,YAAYC,eAAeY,iBAVzH,SAACC,GACtBb,EAAa,2BAAKD,GAAN,IAAkBI,SAAW,YAAcU,SAAWA,OASlE,SACMhC,EAAMe,YCtDPkB,GAAqB,SAAC,GAAuE,IAArE/H,EAAoE,EAApEA,WAAagI,EAAuD,EAAvDA,cAAgB/H,EAAuC,EAAvCA,cAE5DgI,GAFmG,EAAvBC,iBAExDjI,EAAcoC,kBAQpC,OAPFtB,QAAQC,IAAIiH,GASV,aADA,CACCE,EAAA,EAAD,CACAC,UAAQ,EACRC,GAAG,cAGHC,aAAwC,MAAzBtI,EAAWN,WAAqBM,EAAWN,WAAWU,KAAK,SAACgC,GAAD,OAAaA,EAAOvD,QAAU,KACxG0J,WAAY,SAAC3B,EAAO4B,GAAR,OACV5B,EAAMxG,KAAI,SAAC2B,EAAQ0G,GAAT,OACR,cAACC,EAAA,EAAD,aAAMC,QAAQ,WAAWC,MAAO7G,GAAYyG,EAAY,CAAEC,gBAG9DI,SAAa,SAAEC,EAAQlC,EAAQmC,EAASC,GAGtCjI,QAAQC,IAAI,mFACZD,QAAQC,IAAI4F,GACZ7F,QAAQC,IAAI,6BACZ,IAAIiI,EAAmBrC,EAAMxG,KAAK,SAAC8I,GAAD,MAAiB,CAAErK,KAAOqK,MAE5DlB,EAAc,2BAAKhI,GAAN,IAAmBN,WAAauJ,MAI/CE,QAAUlJ,EAAcoC,iBAAiBjC,KAAK,SAACmC,GAAD,OAAgBA,EAAU1D,QAIxEuK,UAAQ,EACRC,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BACMD,GADN,IAEEX,QAAQ,SACRC,MAAM,UACNY,YAAY,mBCvCPC,IAFE9K,cAEkB,SAAC,GAAoG,IAAlGqB,EAAiG,EAAjGA,WAAagI,EAAoF,EAApFA,cAAgB/H,EAAoE,EAApEA,cAC3DyJ,GAD+H,EAApDxB,iBAAoD,EAAjCyB,WAAiC,EAApBC,cACzF3J,EAAcM,gBAQlC,OAEA,aADA,CACC4H,EAAA,EAAD,CACAC,UAAQ,EACRC,GAAG,cAGHC,aAAqC,MAAtBtI,EAAWJ,QAAkBI,EAAWJ,QAAQQ,KAAK,SAACC,GAAD,OAAUA,EAAIxB,QAAU,KAC5F0J,WAAY,SAAC3B,EAAO4B,GAAR,OACV5B,EAAMxG,KAAI,SAAC2B,EAAQ0G,GAAT,OACR,cAACC,EAAA,EAAD,aAAMC,QAAQ,WAAWC,MAAO7G,GAAYyG,EAAY,CAAEC,gBAG9DI,SAAa,SAAEC,EAAQlC,EAAQmC,EAASC,GAGtCjI,QAAQC,IAAI,mFACZD,QAAQC,IAAI4F,GACZ7F,QAAQC,IAAI,6BACZ,IAAI6I,EAAgBjD,EAAMxG,KAAK,SAAC0J,GAAD,MAAc,CAAEjL,KAAOiL,MAEtD9B,EAAc,2BAAKhI,GAAN,IAAmBJ,QAAUiK,MAI5CV,QAAUO,EAAgBtJ,KAAK,SAACM,GAAD,OAAaA,EAAO7B,QAInDuK,UAAQ,EACRC,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BACMD,GADN,IAEEX,QAAQ,SACRC,MAAM,SACNY,YAAY,oBCjDL7K,c,WC0BXoL,GAAkBnE,0BAGf,SAASoE,GAAgBhK,GAI5B,IACIiK,EAAmB,CAAEzK,MADeQ,EAAlCR,MAC2BI,QADOI,EAA1BJ,QAC6BF,WADHM,EAAhBN,YAExBqB,QAAQC,IAAI,gCACZD,QAAQC,IAAIiJ,GACZ,IAAIpK,GAAU,EAcd,OAbAqK,OAAOC,KAAKF,GAAkBxJ,SAAS,SAAC2J,GACjCH,EAAiBG,IAAQ,IAAOH,EAAiBG,IAAQ,IAAgC,IAAzBH,EAAiBG,KAChFvK,GAAU,OAKH,IAAZA,EACCkB,QAAQC,IAAI,iCAEZD,QAAQC,IAAI,yBAGTnB,EAGX,IAoaIwK,GAAY,SAAC,GAAgK,IAA9JC,EAA6J,EAA7JA,gBAAkBC,EAA2I,EAA3IA,WAAaC,EAA8H,EAA9HA,UAAYC,EAAkH,EAAlHA,kBAAoBC,EAA8F,EAA9FA,YAAc1K,EAAgF,EAAhFA,WAAgE2K,GAAgB,EAAnE3C,cAAmE,EAAnD/H,cAAmD,EAAnCiI,iBAAmC,EAAhByC,UAE5J,OACI,qCACI,cAACC,EAAA,EAAD,CAAYjC,QAAQ,KAAKkC,GAAK,CAAEC,GAAK,GAArC,4BACA,eAACC,EAAA,EAAD,CAAKF,GAAI,CAAEG,QAAU,QAArB,UAEI,cAACC,EAAA,EAAD,CAAQC,QAAUZ,EAAkBO,GAAI,CAAEM,MAAQZ,EAAWa,iBAA7D,gCACA,cAACH,EAAA,EAAD,CAAQC,QAAUZ,EAAkBO,GAAI,CAAEM,MAASZ,EAAWc,gBAA9D,mCAGJ,eAACN,EAAA,EAAD,CAAKO,UAAU,OAAOT,GAAI,CAAEG,QAAU,OAASO,cAAgB,UAA/D,UAGuB,WAAdf,EACA,cAACjB,EAAA,EAAD,CACGlB,GAAG,iBACHmD,KAAK,OACL5C,MAAM,mBACND,QAAQ,WACR8C,KAAK,QACL7E,MAAQ5G,EAAWP,IACnBoL,GAAI,CAAEG,QAAQ,SACdnC,SAAa,SAAC6C,GAAQjB,EAAkB,MAAQiB,IAChDC,MAAShB,EAASgB,MAClBC,WAAejB,EAASiB,aAE1B,cAACrC,EAAA,EAAD,CACElB,GAAG,iBACHwD,WAAS,EACTC,KAAM,EACNlD,MAAM,kDACND,QAAQ,WACR8C,KAAK,QACL7E,MAAQ5G,EAAW+L,WACnBlB,GAAI,CAAEG,QAAQ,SACdnC,SAAa,SAAC6C,GAAQjB,EAAkB,aAAeiB,GAAK3K,QAAQC,IAAIhB,EAAWgM,OACnFL,MAAShB,EAASgB,MAClBC,WAAejB,EAASiB,aAIhC,cAACX,EAAA,EAAD,CAAQtC,QAAQ,YAAYwC,MAAM,UAAWK,KAAK,SAAS,gBAAc,QAAQN,QAAUR,EAAcG,GAAI,CAAEoB,UAAY,OAA3H,8BAMZC,GAAa,SAAC,GAAiJ,IAA/IxB,EAA8I,EAA9IA,YAAcD,EAAgI,EAAhIA,kBAAoB0B,EAA4G,EAA5GA,SAAWnM,EAAiG,EAAjGA,WAAagI,EAAoF,EAApFA,cAAgB/H,EAAoE,EAApEA,cAAgBiI,EAAoD,EAApDA,iBAAmByB,EAAiC,EAAjCA,WAAaC,EAAoB,EAApBA,cAC1I,OACA,mCACI,eAACmB,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAQ,OAASpB,QAAU,OAASO,cAAgB,SAAUc,IAAI,QAA7E,UACe,SAAbF,EAAsB,cAACvB,EAAA,EAAD,CAAYjC,QAAQ,KAApB,sCAAiE,cAACiC,EAAA,EAAD,CAAYjC,QAAQ,KAApB,wCASzF,cAACY,EAAA,EAAD,CAAWX,MAAM,QAAQhC,MAAQ5G,EAAWR,MAAOqJ,SAAY,SAAC6C,GAAQ1D,EAAc,2BAAKhI,GAAN,IAAmBR,MAAQkM,EAAEY,cAAc1F,YAChI,cAAC,GAAD,CACA5G,WAAeA,EACfgI,cAAkBA,EAClB/H,cAAkBA,EAClBiI,iBAAqBA,EACrByB,WAAeA,EACfC,cAAkBA,IAElB,cAAC,GAAD,CACA5J,WAAcA,EACdgI,cAAkBA,EAClB/H,cAAkBA,EAClBiI,iBAAqBA,EACrByB,WAAeA,EACfC,cAAkBA,IAElB,cAACL,EAAA,EAAD,CAAWlB,GAAG,8BAA8BwD,WAAS,EAAEC,KAAK,IAAIlD,MAAM,QAAQD,QAAQ,WAAWa,YAAY,GAAG5C,MAAO5G,EAAWF,MAAO+I,SAAW,SAAC6C,GAAOjB,EAAkB,QAAUiB,MAEtK,UAAbS,EACA,cAAClB,EAAA,EAAD,CAAQtC,QAAQ,YAAYwC,MAAM,UAAWK,KAAK,SAAS,gBAAc,SAASN,QAAWR,EAA7F,uBAEA,eAACK,EAAA,EAAD,CAAKF,GAAI,CAAEG,QAAU,OAASuB,eAAiB,gBAA/C,UACG,cAACtB,EAAA,EAAD,CAAQtC,QAAQ,YAAYuC,QAAYR,EAAxC,kBAGA,cAACO,EAAA,EAAD,CAAQtC,QAAQ,YAAY6D,UAAW,cAAC,IAAD,IAAvC,6BASZC,GAAiB,WACjB,OACQ,cAAC1B,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAQ,OAASM,OAAS,OAASC,gBAAkB,YAAe3B,QAAU,OAASuB,eAAiB,SAAWK,WAAa,UAA3I,SACI,cAAC7B,EAAA,EAAD,CACAF,GAAI,CACAG,QAAU,OACVuB,eAAiB,SACjBK,WAAa,SACbC,aAAe,MACfC,gBAAiB,8CACjBC,eAAiB,OACjBC,cAAgB,cAChBL,gBAAkB,QAIlBP,MAAQ,OAbZ,SAgBI,cAACxB,EAAA,EAAD,CAAYC,GAAI,CAAEoC,SAAW,OAASC,WAAa,MAAQ/B,MAAQ,UAAYgC,SAAW,eAA1F,0BASLC,GAhiBE,WAAO,IAAD,EAEPlN,EAAYmN,qBAAW1H,IAA7BxG,IACN,EAAgCkO,qBAAWvG,IAArCE,EAAN,EAAMA,UAAYU,EAAlB,EAAkBA,UAClB,GAAgDV,EAA1CI,SAA0CJ,EAA/BS,aAAjB,MAAwB,MAAxB,EAAgCD,EAAgBR,EAAhBQ,YAkBhC,EAAqCzB,mBAAS,UAA9C,mBAAMyE,EAAN,KAAkB8C,EAAlB,KACA,EAAuCvH,mBAAU,CAAEqF,gBAAkB,OAASC,eAAiB,YAA/F,mBAAQd,EAAR,KACA,GADA,KACsCxE,sBAAtC,mBAAMwH,EAAN,KAAoBC,EAApB,KACA,EAAsCzH,qBAAtC,mBACA,GADA,UACgDA,sBAAhD,mBAKA,GALA,UAKuCA,mBAvBlB,CAAGtG,IAAM,GACNsM,WAAa,GACbvM,MAAQ,GACRI,QAAU,GACVF,WAAa,MAmBrC,mBAAQM,EAAR,KAAqBgI,EAArB,KAEA,EAA6CjC,mBAAS,MAAtD,mBAAQ9F,EAAR,KAAwBiI,EAAxB,KAEA,EAAmCnC,mBAAS,CAAE4F,OAAQ,EAAQC,WAAa,OAA3E,mBAAQjB,EAAR,UAEAtE,qBAAW,WACPtF,QAAQC,IAAIwJ,KACZ,CAAEA,IAENnE,qBAAU,WACNtF,QAAQC,IAAIhB,EAAWN,cACvB,CAACM,IAILqG,qBAAW,WAGC,SAAToB,GACC1G,QAAQC,IAAI,iEACZwM,EAAe,UAGf,sBAAC,4CAAArN,EAAA,sEAC6BiD,YAAUF,YAAO1B,YAAYC,GAAK,QAAUvB,EAAU,SAAWiD,YAAO,MAAQ,KAAOqE,KADpH,OACOiG,EADP,OACwInK,KAAK,GAAG6B,OAC7IpE,QAAQC,IAAR,eAAoBwG,EAApB,uCAGM/H,EAA8DgO,EAA9DhO,IAAMD,EAAwDiO,EAAxDjO,MAAQE,EAAgD+N,EAAhD/N,WAAYE,EAAoC6N,EAApC7N,QAAUC,EAA0B4N,EAA1B5N,QAAUC,EAAgB2N,EAAhB3N,MAAQX,EAAQsO,EAARtO,IACxDuO,EAAe,CAAEjO,MAAMD,QAAQE,aAAYE,UAAUC,UAAUC,QAAQX,OAC3E4B,QAAQC,IAAI0M,GACZ1F,EAAc0F,GARjB,0CAAD,IAaAF,EAAe,WAEf,IAGJnH,oBAAS,sBAAE,kCAAAlG,EAAA,sEAEqBiD,YAASF,YAAO1B,YAAYC,GAAK,QAAUvB,EAAU,aAF1E,cAEHyN,EAFG,OAGHC,EAAeD,EAAgBrK,KAAKlD,KAAK,SAACyN,GAC1C,MAAsBA,EAAkB1I,OACxC,MAAO,CAAEtG,KADT,EAAMA,KACUM,IADhB,EAAcA,QAJX,SASwBiE,YAASF,YAAO1B,YAAYC,GAAK,QAAUvB,EAAU,gBAT7E,OASH4N,EATG,OAUHC,EAAkBD,EAAmBxK,KAAKlD,KAAK,SAAC4N,GAChD,MAAsBA,EAAqB7I,OAC3C,MAAO,CAAEtG,KADT,EAAMA,KACUM,IADhB,EAAcA,QAIlB4B,QAAQC,IAAI,kGACZkH,EAAiB,CAAC3H,eAAiBqN,EAAevL,iBAAmB0L,IAhB9D,4CAiBP,IAKJ,IAAIE,EAAiB,uCAAG,WAAOxO,GAAP,iBAAAU,EAAA,6DAChB+N,EAAYhL,YAAO1B,YAAYC,GAAK,QAAUvB,EAAU,SAAWiD,YAAM,MAAQ,KAAO1D,EAAIa,SAD5E,SAEM8C,YAAS8K,GAFf,UAEhBC,EAFgB,OAGpBpN,QAAQC,IAAImN,EAAc7K,KAAK,KAEJ,IAAxB6K,EAAcC,MALG,wBAMhBrN,QAAQC,IAAI,kCANI,kBAOT,MAPS,WAWiB,IAA9BmN,EAAc7K,KAAK5B,OAXN,wBAYZX,QAAQC,IAAI,wBACZD,QAAQC,IAAImN,EAAc7K,KAAK,GAAG6B,QAbtB,kBAeJgJ,EAAc7K,KAAK,IAff,QAiBR6K,EAAc7K,KAAK5B,OAAS,GAChCX,QAAQC,IAAI,sDAlBA,4CAAH,sDAiCjBqN,EAAuB,WACvBb,EAAe,mBAeb9C,EAAW,uCAAG,WAAOgB,GAAP,uCAAAvL,EAAA,yDAChBY,QAAQC,IAAI,wBACZ0K,EAAE4C,iBACFvN,QAAQC,IAAI0K,EAAEY,cAAciC,QAAQC,UAChC/O,EAAMO,EAAWP,IAEmB,UAArCiM,EAAEY,cAAciC,QAAQC,SANX,oBASZzN,QAAQC,IAAI,+BAGgBL,GAAzBX,EAAW+L,YAAoD,IAAzB/L,EAAW+L,WAZxC,iBAaRhL,QAAQC,IAAI,+CAERyN,EAASzO,EAAW+L,WAAW2C,MAAM,OAGzC3N,QAAQC,IAAI,qBACZD,QAAQC,IAAIyN,GAERE,EAAiBzN,QAAQC,IAAKsN,EAAOrO,KAAK,SAACX,GAC3C,OAAOwO,EAAkBxO,EAAIa,QAC5BsO,MAAK,SAACC,GAEH,GAAqB,OAAlBA,EAAuB,CACtB,IAAIC,EAAmBvP,GAAK,CAAEE,MAAMN,IAAMmC,cAAW3B,UAAYoP,cAAoBlP,SAAU,IAC/F0B,YAAQC,YAAWC,GAAK,QAAUvB,EAAU,SAAY4O,GACvDF,MAAK,SAACI,OAEJC,OAAM,SAACtD,GACN5K,QAAQC,IAAR,eAAoBvB,EAApB,mDACAsB,QAAQC,IAAI2K,WAKhB5K,QAAQC,IAAR,UAAevB,EAAf,sDAOZkP,EAAeC,MAAM,WAIjBP,OAhDI,2BAyDRtN,QAAQC,IAAI,gDAIFL,GAAPlB,GAA4B,IAAPA,EA7DhB,kCA8DoBwO,EAAmBjO,EAAWP,IAAIa,QA9DtD,QA8DA4O,EA9DA,OA+DJnO,QAAQC,IAAI,oCACZD,QAAQC,IAAI,wBACZD,QAAQC,IAAIkO,GAGO,OAAhBA,EAWCnO,QAAQC,IAAI,+OAGZ,EAEoEkO,EAAY/J,OAA1E1F,EAFN,EAEMA,IAAMD,EAFZ,EAEYA,MAAQE,EAFpB,EAEoBA,WAAYE,EAFhC,EAEgCA,QAAUC,EAF1C,EAE0CA,QAAUC,EAFpD,EAEoDA,MAAQX,EAF5D,EAE4DA,IAC5D4B,QAAQC,IAAI,iCACZD,QAAQC,IAAIvB,GAEZuI,EADImH,EAAgB,CAAE1P,MAAMD,QAAQE,aAAaE,UAAUC,UAAUC,QAAQX,QAE7E4B,QAAQC,IAAImO,IA5G5B3B,EAAe,UAmBC,wBAiGJzM,QAAQC,IAAI,kCAjGR,gCAsG8B,WAArC0K,EAAEY,cAAciC,QAAQC,UAS7B,sBAAI,0DAAArO,EAAA,6DACEV,EAEkCO,EAFlCP,IAAMD,EAE4BQ,EAF5BR,MAE4BQ,EAApCH,QAAUC,EAA0BE,EAA1BF,MAA0BE,EAAlBb,IAHlB,SAK8BiE,YAAUF,YAAO1B,YAAWC,GAAK,QAAUvB,EAAU,SAAWiD,YAAM,MAAQ,KAAOnD,EAAWP,OAL9H,cAKI2P,EALJ,OAaIC,EAAkB1N,GAAgB3B,EAAaC,GAbnD,SAegCF,GAAmBC,EAAaC,EAAgBC,GAfhF,cAeIoP,EAfJ,OAgBIC,EAhBJ,sBAgBwBF,GAhBxB,YAgB6CC,IAGzCE,EAAqB5M,GAAmB5C,EAAaC,GAnBzD,UAqBmCiC,GAAqBlC,EAAaC,EAAgBC,GArBrF,WAqBIuP,EArBJ,OAsBIC,EAtBJ,sBAsB2BF,GAtB3B,YAsBmDC,IACnD1O,QAAQC,IAAI,mBACZD,QAAQC,IAAI0O,IAGmB,IAA5BN,EAAkBhB,MA3BrB,wBAkCQuB,EAAUpQ,GAAK,CAAEE,MAAMD,QAAQE,WAAagQ,EAAiB9P,QAAU2P,EAAc1P,QAAUmK,GAAgBhK,GAAcF,QAAQH,UAAYoP,cAAoB5P,IAAMmC,gBAC/KP,QAAQC,IAAI,+DACZD,QAAQC,IAAI2O,GApChB,oBA0C4BpO,YAAQC,YAAWC,GAAK,QAAUvB,EAAU,SAAayP,GA1CrF,eA0CYC,EA1CZ,OA2CQ7O,QAAQC,IAAI,wFA3CpB,KA4CQD,QA5CR,UA4C4BiE,YAAO4K,GA5CnC,oBA4C6CzK,OA5C7C,KA4CgBnE,IA5ChB,oHAqD0CoC,YAAUF,YAAO1B,YAAWC,GAAK,QAAUvB,EAAU,SAAWiD,YAAM,MAAQ,KAAOqE,KArD/H,eAqDQqI,EArDR,OAqDiJvM,KAAK,GAC9IwM,EAAcD,EAAyBtM,IACvCkK,EAAeoC,EAAyB1K,OAC5CpE,QAAQC,IAAI,6FACZD,QAAQC,IAAI8O,GACZ/O,QAAQC,IAAIyM,GAGRsC,EAAc,CACdtQ,MACAD,QACAE,WAAagQ,EACb9P,QAAU2P,EACV1P,QAAUmK,GAAgBhK,GAC1BF,SAGJiB,QAAQC,IAAI,oDACZD,QAAQC,IAAR,2BAAiBhB,GAAgB+P,IAvErC,UA2EUC,YAAWF,EAAF,YAAC,eAAoB9P,GAAgB+P,IA3ExD,QA4EIhP,QAAQC,IAAR,eAAoBwG,EAApB,0BA5EJ,0DAAJ,GA8EKoH,MAAM,WACPP,OAEDY,OAAM,SAACtD,GACN5K,QAAQC,IAAI2K,GACZ5K,QAAQC,IAAI,oCAlMJ,4CAAH,sDAwMbyJ,EAAoB,SAACL,EAAMsB,GAEvB1D,EAAc,2BAAKhI,GAAN,kBAAoBoK,EAAOsB,EAAEuE,OAAOrJ,UAwBzD,OACI,cAACmD,GAAgBpD,SAAjB,CAA0BC,MAAO,GAAjC,SACA,eAACsJ,EAAA,EAAD,CAAOrF,GAAI,CAAEsF,EAAI,EAAI/D,MAAQ,QAAUM,OAAS,QAAU0D,SAAW,UAArE,UACI,cAACrF,EAAA,EAAD,UACI,cAAC,IAAD,CAAWF,GAAI,CAAGG,QAAU,QAASqF,WAAa,QAAanF,QAAU,WAAQxD,SAK5D,UAAhB6F,GAED,cAAC,GAAD,CACI9C,kBAAsBA,EACtBC,YAAgBA,EAChBJ,gBA1QE,WACWgD,EAAb,WAAd9C,EAA2C,WAA8B,UAE3EzJ,QAAQC,IAAIwJ,IAwQID,WAAeA,EACfC,UAAcA,EACdxK,WAAcA,EACdgI,cAAkBA,EAClB/H,cAAkBA,EAClBiI,iBAAqBA,EACrByC,SAAaA,IAKK,WAAhB4C,QAEgB5M,GAAjBV,GAED,cAAC,IAAD,GACIwK,kBAAsBA,EACtBC,YAAgBA,EAChByB,SAAW,SAHf,yBAI0B,aAAT1E,EAAuB,OAAS,SAJjD,2BAKkBzH,GALlB,8BAMsBgI,GANtB,8BAOsB/H,GAPtB,iCAQyBiI,GARzB,yBASiByC,GATjB,IAYY,mBAAhB4C,GAAoC,cAAC,GAAD,U,oBCpOzC+C,GA/NK,SAAC,GAAwB,EAAvBC,kBAAwB,IAEpC7I,EAAc2F,qBAAWvG,IAAzBY,UACN,EAAsC2F,qBAAW1H,IAArCzF,EAAZ,EAAMf,IAEAqR,GAFN,EAAsB1L,YAEE2L,iBAAO,OACzBC,EAAsBD,iBAAO,MACnC,EAAoC1K,mBAAS,CAAEzG,SAAW,GAAKR,IAAK,GAAKC,OAAO,GAAKG,WAAY,KAAjG,mBAAMc,EAAN,KAAmBgI,EAAnB,KASA3B,qBAAW,WAEP,sBAAC,sCAAAlG,EAAA,sEAC0B6E,YAAQC,YAAIxD,GAAK,QAAUvB,IADrD,OACOyQ,EADP,OACkExL,OAC/DpE,QAAQC,IAAI2P,GACNrR,EAAyCqR,EAAzCrR,SAAWR,EAA8B6R,EAA9B7R,IAAMC,EAAwB4R,EAAxB5R,OAASG,EAAeyR,EAAfzR,WAE5B0R,EAAgB,CAAEtR,WAAWR,MAAMC,SAASG,cAChD8I,EAAc,2BAAKhI,GAAgB4Q,IANtC,0CAAD,KAQD,IAGHvK,qBAAW,WACPtF,QAAQC,IAAI,kEACZD,QAAQC,IAAIhB,KACZ,CAAEA,IAGN,IAAI6Q,EAAe,SAACnF,GACY,eAAzBA,EAAEY,cAAczN,MACfkC,QAAQC,IAAI0K,EAAEY,cAAczN,MAE5BmJ,EAAc,2BAAMhI,GAAP,kBAAsB0L,EAAEY,cAAczN,KAAQ6R,EAAoBI,QAAQC,MAAM,OAC/D,WAAzBrF,EAAEY,cAAczN,MACrBkC,QAAQC,IAAI0K,EAAEY,cAAczN,MAC5BmJ,EAAc,2BAAMhI,GAAP,kBAAsB0L,EAAEY,cAAczN,KAAQ2R,EAAgBM,QAAQC,MAAM,OAEzF/I,EAAc,2BAAMhI,GAAP,kBAAsB0L,EAAEY,cAAczN,KAAQ6M,EAAEY,cAAc1F,UA8FnF,OACI,eAACmE,EAAA,EAAD,CAAKF,GAAI,CAAEmG,QAAU,iBAArB,UACI,eAACjG,EAAA,EAAD,CAAKF,GAAI,CAAE6B,OAAS,QAApB,cAA8B,cAAC,KAAD,CAAWxB,QAAUxD,EAAYmD,GAAI,CAAEG,QAAU,QAAUqF,WAAa,UAAtG,OACA,cAACzF,EAAA,EAAD,CAAYjC,QAAQ,KAAKkC,GAAK,CAAEC,GAAK,EAAImG,GAAK,GAA9C,iCACA,eAAClG,EAAA,EAAD,CAAKmG,UAAU,UAAU5F,UAAU,OAAOT,GAAI,CAAEG,QAAU,OAASqB,IAAM,OAAS8E,oBAAsB,OAAxG,UAGI,cAAC5H,EAAA,EAAD,CACAlB,GAAG,sBACHO,MAAM,WACND,QAAQ,WACRa,YAAY,GACZ3K,KAAK,WACL+H,MAAO5G,EAAWV,SAClB8R,aAAa,MACbvI,SAAU,SAAC6C,GAAQmF,EAAanF,MAKhC,cAACnC,EAAA,EAAD,CACAlB,GAAG,oBACHO,MAAM,MACND,QAAQ,WACRa,YAAY,GACZ3K,KAAK,MACL+H,MAAQ5G,EAAWlB,IACnBuS,aAAa,MACbxI,SAAU,SAAC6C,GAAQmF,EAAanF,MAGhC,eAACX,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAQ,OAASM,OAAS,OAAS4E,gBAAkB,IAAMC,aAAe,KAArF,UACI,uBACAhO,IAAKiN,EACLhF,KAAK,OACLgG,OAAO,UACPC,MAAO,CAAEzG,QAAS,QAClBnC,SAAU,SAAC6C,GAAQmF,EAAanF,IAChC7M,KAAM,WAEN,cAACoM,EAAA,EAAD,CACAC,QAAS,kBAAMsF,EAAgBM,SAAWN,EAAgBM,QAAQY,SAClE/I,QAAQ,YACR9J,KAAK,SAHL,8BAWJ,eAACkM,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAQ,OAASM,OAAS,OAAS4E,gBAAkB,IAAMC,aAAe,KAArF,UACI,uBACAhO,IAAKmN,EACLlF,KAAK,OACLgG,OAAO,UACPC,MAAO,CAAEzG,QAAS,QAClBnC,SAAU,SAAC6C,GAAQmF,EAAanF,IAChC7M,KAAO,eAEP,cAACoM,EAAA,EAAD,CACAC,QAAS,kBAAMwF,EAAoBI,SAAWJ,EAAoBI,QAAQY,SAC1E/I,QAAQ,YACR9J,KAAO,aAHP,wCAWJ,cAACoM,EAAA,EAAD,CACAtC,QAAQ,YACR6C,KAAK,SACLX,GAAI,CAAE0G,aAAe,KACrBrG,QAAU,SAACQ,IAnKJ,SAACA,GAIhBA,EAAE4C,iBAEF,sBAAE,kDAAAnO,EAAA,yDAEMwR,EAAY,CAAE5S,OAAS,GAAKG,WAAa,SASrByB,GAArBX,EAAWjB,QAA4C,IAArBiB,EAAWjB,QAA4C,iBAArBiB,EAAWjB,OAXpF,iCAgBc6S,EAAUrO,YAAKY,GAAF,UAAejE,EAAf,0BAhB3B,SAiBwC2R,YAAaD,EAAU5R,EAAWjB,QAjB1E,cAiBc+S,EAjBd,OAiBmFvO,IACzExC,QAAQC,IAAI,+CAlBtB,UAmBwC+Q,YAAeD,GAnBvD,QAmBcE,EAnBd,OAoBUjR,QAAQC,IAAI,qCACZD,QAAQC,IAAIgR,GAEZL,EAAU5S,OAASiT,EACnBjR,QAAQC,IAAI,2BAxBtB,kDA2BUD,QAAQC,IAAR,MACAD,QAAQC,IAAI,0DA5BtB,gBA+B8BL,GAAzBX,EAAWd,YAAoD,IAAzBc,EAAWd,YAAoD,iBAAzBc,EAAWd,WA/B5F,kCAkCc0S,EAAUrO,YAAKY,GAAF,UAAejE,EAAf,8BAlC3B,UAmC6C2R,YAAaD,EAAU5R,EAAWd,YAnC/E,eAmCc+S,EAnCd,OAmC4F1O,IAClFxC,QAAQC,IAAIiR,GACZlR,QAAQC,IAAI,mDArCtB,UAsC4C+Q,YAAeE,GAtC3D,QAsCcC,EAtCd,OAuCUnR,QAAQC,IAAI,qCACZD,QAAQC,IAAIkR,GAGZP,EAAUzS,WAAagT,EACvBnR,QAAQC,IAAI,+BA5CtB,mDAgDUD,QAAQC,IAAR,MACAD,QAAQC,IAAI,8DAjDtB,eAqDU1B,EAAwCU,EAAxCV,SAAWR,EAA6BkB,EAA7BlB,IAAME,EAAuBgB,EAAvBhB,QAAUC,EAAae,EAAbf,QAI/BkT,EAAiB9S,GAAK,CACtBC,WACAR,MACAE,UACAC,UACAF,OAAiC,KAArB4S,EAAU5S,OAAgBiB,EAAWjB,OAAS4S,EAAU5S,OACpEG,WAAyC,KAAzByS,EAAUzS,WAAoBc,EAAWd,WAAayS,EAAUzS,aA/DtF,oBAqE0BoG,YAAQL,YAAIxD,GAAK,QAAUvB,GAAYiS,GArEjE,eAsEMpR,QAAQC,IAAI,0DACZD,QAAQC,IAAImR,GAvElB,mDA0EMpR,QAAQC,IAAI,0DACZD,QAAQC,IAAR,MA3EN,yEAAF,GA6J4BoR,CAAa1G,IAJjC,yB,wCCzND,SAAS2G,KAEtB,MAAgChF,qBAAWvG,IAArCY,EAAN,EAAMA,UAAYV,EAAlB,EAAkBA,UACN9G,EAAYmN,qBAAW1H,IAA7BxG,IACF6D,EAAUgE,EAAUhE,QACxBjC,QAAQC,IAAR,qDAA0Dd,EAA1D,2BAAoF8C,IAEpF,MAAwBsP,YAAe,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KAMMC,EAAc,WAClBD,GAAQ,GAER9K,KAOF,OACE,8BACE,eAACgL,GAAA,EAAD,CACEH,KAAMA,EACNI,QAASF,EACT,kBAAgB,qBAChB,mBAAiB,2BAJnB,UAME,cAACG,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,CAAmBxK,GAAG,2BAAtB,4BAIF,eAACyK,GAAA,EAAD,WACE,cAAC7H,EAAA,EAAD,CACEC,QAAU,WAAQuH,KADpB,sBAIA,cAACxH,EAAA,EAAD,CACAC,QAAW,WACT,sBAAE,sBAAA/K,EAAA,sEACM4C,GAAW7C,EAAW8C,GAD5B,OAEAyP,IAFA,0CAAF,IAKFM,WAAS,EAPT,2BChCV,IAkNeC,GAlNO,SAAC,GAAwB,EAAvBzC,kBACpBxP,QAAQC,IAAI,uCACZ,MAAgDqM,qBAAWvG,IAAtDY,EAAL,EAAKA,UAA0BP,EAA/B,EAAiBH,UAAcG,UACnBjH,EAAamN,qBAAW1H,IAA9BxG,IACN4B,QAAQC,IAAR,yBAA8Bd,EAA9B,yCAAsEiH,IACtE,IAAMqJ,EAAkBC,iBAAO,MACzBwC,EAAiBxC,iBAAO,MAC9B,EAAoC1K,mBAAS,CAAElH,KAAO,GAAKC,IAAM,GAAKC,OAAS,GAAKG,WAAa,GAAKD,QAAU,GAAKD,QAAU,KAA/H,mBAAMgB,EAAN,KAAmBgI,EAAnB,KACA,EAAmEjC,oBAAS,GAA5E,mBAAMmN,EAAN,KAAiCC,EAAjC,KAwBA9M,qBAAW,WAEP,sBAAE,0CAAAlG,EAAA,sEAC0BiD,YAASF,YAAM1B,YAAYC,GAAK,QAAUvB,EAAU,cAAiBiD,YAAO,MAAQ,KAAOgE,KADrH,OACMiM,EADN,OACqI9P,KAAK,GAAG6B,OACrItG,EAA+DuU,EAA/DvU,KAAOC,EAAwDsU,EAAxDtU,IAAMC,EAAkDqU,EAAlDrU,OAASC,EAAyCoU,EAAzCpU,QAAUC,EAA+BmU,EAA/BnU,QAAUC,EAAqBkU,EAArBlU,WAAaC,EAAQiU,EAARjU,IAC7D4B,QAAQC,IAAI,6CACZD,QAAQC,IAAIoS,GACZpL,EAAc,CAAEnJ,OAAOC,MAAMC,SAASC,UAAUC,UAAUC,aAAaC,QALzE,0CAAF,KAUA,IAEJkH,qBAAW,WACPtF,QAAQC,IAAI,oEACZD,QAAQC,IAAIhB,KACZ,CAAEA,IAKN,IAAI6Q,EAAe,SAACnF,GACY,eAAzBA,EAAEY,cAAczN,MACfkC,QAAQC,IAAI0K,EAAEY,cAAczN,MAC5BmJ,EAAc,2BAAMhI,GAAP,kBAAsB0L,EAAEY,cAAczN,KAAQoU,EAAenC,QAAQC,MAAM,OAC1D,WAAzBrF,EAAEY,cAAczN,MACrBkC,QAAQC,IAAI0K,EAAEY,cAAczN,MAC5BmJ,EAAc,2BAAMhI,GAAP,kBAAsB0L,EAAEY,cAAczN,KAAQ2R,EAAgBM,QAAQC,MAAM,QAEzFhQ,QAAQC,IAAI0K,EAAEY,cAAczN,MAC5BmJ,EAAc,2BAAMhI,GAAP,kBAAsB0L,EAAEY,cAAczN,KAAQ6M,EAAEY,cAAc1F,WAkFnF,OACI,eAACmE,EAAA,EAAD,CAAKF,GAAI,CAAEmG,QAAU,iBAArB,UACI,eAACjG,EAAA,EAAD,CAAKF,GAAI,CAAE6B,OAAS,QAApB,cAA8B,cAAC,KAAD,CAAWxB,QAAUxD,EAAYmD,GAAI,CAAEG,QAAU,QAAUqF,WAAa,UAAtG,QAGiC,IAA7B6C,EAEA,mCACI,eAACnI,EAAA,EAAD,CAAKmG,UAAU,UAAU5F,UAAU,OAAOT,GAAI,CAAEG,QAAU,OAASqB,IAAM,OAAS8E,oBAAsB,UAAY/E,MAAQ,SAA5H,UAEI,cAAC7C,EAAA,EAAD,CAAWlB,GAAG,iBAAiBO,MAAM,OAAOD,QAAQ,WAAWa,YAAY,OAAO3K,KAAK,OAAOgK,SAAUgI,EAAcjK,MAAU5G,EAAWnB,OAC3I,cAAC0K,EAAA,EAAD,CAAWlB,GAAG,iBAAiBO,MAAM,MAAMD,QAAQ,WAAWa,YAAY,GAAG3K,KAAK,MAAMgK,SAAUgI,EAAcjK,MAAU5G,EAAWlB,MACrI,cAACyK,EAAA,EAAD,CAAWlB,GAAG,oBAAoBO,MAAM,UAAUD,QAAQ,WAAWa,YAAY,GAAG3K,KAAK,UAAUgK,SAAUgI,EAAcjK,MAAU5G,EAAWhB,UAChJ,cAACuK,EAAA,EAAD,CAAWlB,GAAG,oBAAoBO,MAAM,UAAUD,QAAQ,WAAWa,YAAY,GAAG3K,KAAK,UAAUgK,SAAUgI,EAAcjK,MAAU5G,EAAWf,UAEhJ,eAAC8L,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAQ,OAASM,OAAS,OAAS4E,gBAAkB,IAAMC,aAAe,KAArF,UACI,uBACAhO,IAAKiN,EACLhF,KAAK,OACLgG,OAAO,UACPC,MAAO,CAAEzG,QAAS,QAClBnC,SAAUgI,EACVhS,KAAK,WAEL,cAACoM,EAAA,EAAD,CACAC,QAAS,kBAAMsF,EAAgBM,SAAWN,EAAgBM,QAAQY,SAClE/I,QAAQ,YACR9J,KAAK,SAHL,8BASJ,eAACkM,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAQ,OAASM,OAAS,OAAS4E,gBAAkB,IAAMC,aAAe,KAArF,UACI,uBACAhO,IAAK0P,EACLzH,KAAK,OACLgG,OAAO,UACPC,MAAO,CAAEzG,QAAS,QAClBnC,SAAUgI,EACVhS,KAAK,eAEL,cAACoM,EAAA,EAAD,CACAC,QAAS,kBAAM+H,EAAenC,SAAWmC,EAAenC,QAAQY,SAChE/I,QAAQ,YACR9J,KAAO,aAHP,wCAUJ,cAACoM,EAAA,EAAD,CAAQtC,QAAQ,YAAY6C,KAAK,SAASX,GAAI,CAAE0G,aAAe,KAAMrG,QAAU,SAACQ,IAhIjF,SAACA,GAIhBA,EAAE4C,iBAEF,sBAAE,wDAAAnO,EAAA,yDACMwR,EAAY,CAAE5S,OAAS,GAAKG,WAAa,SAEpByB,GAArBX,EAAWjB,QAA4C,IAArBiB,EAAWjB,QAA4C,iBAArBiB,EAAWjB,OAHrF,iCAOc6S,EAAUrO,YAAKY,GAAF,UAAejE,EAAf,4BAA0CiH,EAA1C,YAP3B,SAQwC0K,YAAaD,EAAU5R,EAAWjB,QAR1E,cAQcsU,EARd,OAQmF9P,IACzExC,QAAQC,IAAIqS,GACZtS,QAAQC,IAAI,+CAVtB,UAWwC+Q,YAAesB,GAXvD,QAWcrB,EAXd,OAYUL,EAAU5S,OAASiT,EAZ7B,kDAeUjR,QAAQC,IAAR,MACAD,QAAQC,IAAI,uDAhBtB,gBAoB8BL,GAAzBX,EAAWd,YAAoD,IAAzBc,EAAWd,YAAoD,iBAAzBc,EAAWd,WApB5F,kCAuBc0S,EAAUrO,YAAKY,GAAF,UAAejE,EAAf,4BAA0CiH,EAA1C,gBAvB3B,UAwB6C0K,YAAaD,EAAU5R,EAAWd,YAxB/E,eAwBc+S,EAxBd,OAwB4F1O,IAClFxC,QAAQC,IAAIiR,GACZlR,QAAQC,IAAI,mDACZD,QAAQC,IAAI,0FA3BtB,UA4B4C+Q,YAAgBE,GA5B5D,QA4BcC,EA5Bd,OA6BUP,EAAUzS,WAAagT,EA7BjC,mDAgCUnR,QAAQC,IAAR,MACAD,QAAQC,IAAI,2DAjCtB,eAqCUnC,EAA0CmB,EAA1CnB,KAAOC,EAAmCkB,EAAnClB,IAAME,EAA6BgB,EAA7BhB,QAAUC,EAAmBe,EAAnBf,QAAUE,EAASa,EAATb,IAGrCmU,EAAmB1U,EAAO,CAC1BO,MACAN,OACAC,MACAI,WAAwC,KAAzByS,EAAUzS,WAAoBc,EAAWd,WAAayS,EAAUzS,WAC/EH,OAAgC,KAArB4S,EAAU5S,OAAgBiB,EAAWjB,OAAS4S,EAAU5S,OACnEE,UACAD,YACJ+B,QAAQC,IAAI,yCACZD,QAAQC,IAAIsS,GAjDd,UAqDUC,EAAcrQ,YAAM1B,YAAYC,GAAK,QAAUvB,EAAU,cAAgBiD,YAAO,MAAQ,KAAOgE,IArDzG,UAsDgC/D,YAAQmQ,GAtDxC,eAsDUC,EAtDV,OAsDsDlQ,KAAK,GAAGC,IAtD9D,UAuDYyM,YAAUwD,EAAeF,GAvDrC,QAwDMvS,QAAQC,IAAI,yDAxHpBmS,GAA+B,GAgE7B,mDA6DMpS,QAAQC,IAAR,MACAD,QAAQC,IAAI,uEA9DlB,yEAAF,GA0HwGoR,CAAa1G,IAArG,yBAMR,cAAC,GAAD,QAUZ+H,GAAuB,WACnB,OACI,cAAC1I,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAQ,OAASM,OAAS,OAASC,gBAAkB,YAAe3B,QAAU,OAASuB,eAAiB,SAAWK,WAAa,UAA3I,SACI,cAAC7B,EAAA,EAAD,CACAF,GAAI,CACAG,QAAU,OACVuB,eAAiB,SACjBK,WAAa,SACbC,aAAe,MACfC,gBAAiB,8CACjBC,eAAiB,OACjBC,cAAgB,cAChBL,gBAAkB,QAKlBP,MAAQ,QACRM,OAAS,SAfb,SAkBI,cAAC9B,EAAA,EAAD,CAAYC,GAAI,CAAEoC,SAAW,OAASC,WAAa,MAAQ/B,MAAQ,UAAYgC,SAAW,eAA1F,iC,UCvMLuG,GAjDkB,WAI/B,MAAwB3N,oBAAS,GAAjC,mBAAMwM,EAAN,KAMME,GANN,KAMoB,SAAC3J,EAAOC,MAQtB4K,EACJ,eAAC,WAAD,WACE,cAAC1I,EAAA,EAAD,CAAQE,MAAM,YAAYM,KAAK,QAAQP,QAASuH,EAAhD,kBAGA,cAACmB,EAAA,EAAD,CACEnI,KAAK,QACL,aAAW,QACXN,MAAM,UACND,QAASuH,EAJX,SAME,cAAC,KAAD,CAAWxF,SAAS,eAK1B,OACE,gCACE,cAAChC,EAAA,EAAD,CAAQC,QA9BQ,aA8BhB,kCACA,cAAC2I,GAAA,EAAD,CACEtB,KAAQA,EAERuB,iBAAkB,IAClBnB,QAASF,EACTjN,QAAQ,eACRmO,OAAQA,QC0IDI,GAvKG,SAAC,GAAwB,EAAvBxD,kBAChBxP,QAAQC,IAAI,gCACZ,MAA8CqM,qBAAWvG,IAApDY,EAAL,EAAKA,UAAyBI,EAA9B,EAAiBd,UAAac,SAClB5H,EAAamN,qBAAW1H,IAA9BxG,IACN4B,QAAQC,IAAR,yBAA8Bd,EAA9B,wCAAqE4H,IACrE,IAAMmL,EAAiBxC,iBAAO,MAC9B,EAAoC1K,mBAAS,CAAElH,KAAO,GAAKC,IAAM,GAAKI,WAAa,KAAnF,mBAAMc,EAAN,KAAmBgI,EAAnB,KACA,EAAmEjC,oBAAS,GAA5E,mBAAMmN,EAAN,KAAiCC,EAAjC,KAqBA9M,qBAAW,WAEP,sBAAE,oCAAAlG,EAAA,sEACyBiD,YAASF,YAAM1B,YAAYC,GAAK,QAAUvB,EAAU,WAAciD,YAAO,MAAQ,KAAO2E,KADjH,OACMkM,EADN,OACgI1Q,KAAK,GAAG6B,OAChItG,EAAkCmV,EAAlCnV,KAAOC,EAA2BkV,EAA3BlV,IAAMI,EAAqB8U,EAArB9U,WAAaC,EAAQ6U,EAAR7U,IAChC4B,QAAQC,IAAI,4CACZD,QAAQC,IAAIgT,GACZhM,EAAc,CAAEnJ,OAAOC,MAAMI,aAAaC,QAL5C,0CAAF,KAUA,IAEJkH,qBAAW,WACPtF,QAAQC,IAAI,oEACZD,QAAQC,IAAIhB,KACZ,CAAEA,IAEN,IAAI6Q,EAAe,SAACnF,GACY,eAAzBA,EAAEY,cAAczN,MACfkC,QAAQC,IAAI0K,EAAEY,cAAczN,MAC5BmJ,EAAc,2BAAMhI,GAAP,kBAAsB0L,EAAEY,cAAczN,KAAQoU,EAAenC,QAAQC,MAAM,QAExFhQ,QAAQC,IAAI0K,EAAEY,cAAczN,MAC5BmJ,EAAc,2BAAMhI,GAAP,kBAAsB0L,EAAEY,cAAczN,KAAQ6M,EAAEY,cAAc1F,WA+DnF,OACI,eAACmE,EAAA,EAAD,CAAKF,GAAI,CAAEmG,QAAU,iBAArB,UACI,eAACjG,EAAA,EAAD,CAAKF,GAAI,CAAE6B,OAAS,QAApB,cAA8B,cAAC,KAAD,CAAWxB,QAAUxD,EAAYmD,GAAI,CAAEG,QAAU,QAAUqF,WAAa,UAAtG,QAGiC,IAA7B6C,EAEA,qCACI,cAACtI,EAAA,EAAD,CAAYjC,QAAQ,KAAKkC,GAAK,CAAEC,GAAK,EAAImJ,GAAK,EAAI/G,WAAa,OAA/D,6BACA,cAACnC,EAAA,EAAD,CAAKmG,UAAU,UAAU5F,UAAU,OAAOT,GAAI,CAE1CsC,SAAW,SAFf,SAKI,eAAC+G,EAAA,EAAD,CAAOC,QAAS,IAAhB,UAEI,cAAC5K,EAAA,EAAD,CAAWlB,GAAG,iBAAiBO,MAAM,aAAaD,QAAQ,WAAWa,YAAY,OAAO3K,KAAK,OAAOgK,SAAUgI,EAAcjK,MAAU5G,EAAWnB,OACjJ,cAAC0K,EAAA,EAAD,CAAWlB,GAAG,iBAAiBO,MAAM,cAAcD,QAAQ,WAAWa,YAAY,GAAG3K,KAAK,MAAMgK,SAAUgI,EAAcjK,MAAU5G,EAAWlB,MAE7I,eAACiM,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAQ,OAASM,OAAS,OAAS4E,gBAAkB,IAAMC,aAAe,KAArF,UACI,uBACAhO,IAAK0P,EACLzH,KAAK,OACLgG,OAAO,UACPC,MAAO,CAAEzG,QAAS,QAClBnC,SAAUgI,EACVhS,KAAK,eAEL,cAACoM,EAAA,EAAD,CACAC,QAAS,kBAAM+H,EAAenC,SAAWmC,EAAenC,QAAQY,SAChE/I,QAAQ,YACR9J,KAAO,aAHP,wCAUJ,cAACoM,EAAA,EAAD,CAAQtC,QAAQ,YAAY6C,KAAK,SAAYN,QAAU,SAACQ,IA/F7D,SAACA,GAIhBA,EAAE4C,iBAEF,sBAAE,8CAAAnO,EAAA,yDACMwR,EAAY,CAAEzS,WAAa,SAEHyB,GAAzBX,EAAWd,YAAoD,IAAzBc,EAAWd,YAAqD,iBAAzBc,EAAWd,WAH7F,iCAOc0S,EAAUrO,YAAKY,GAAF,UAAejE,EAAf,4BAA0C4H,EAA1C,iBAP3B,SAQ6C+J,YAAaD,EAAU5R,EAAWd,YAR/E,cAQc+S,EARd,OAQ4F1O,IAClFxC,QAAQC,IAAIiR,GACZlR,QAAQC,IAAI,mDACZD,QAAQC,IAAI,0FAXtB,UAY4C+Q,YAAgBE,GAZ5D,QAYcC,EAZd,OAaUP,EAAUzS,WAAagT,EAbjC,kDAgBUnR,QAAQC,IAAR,MACAD,QAAQC,IAAI,2DAjBtB,eAqBUnC,EAAmCmB,EAAnCnB,KAAOC,EAA4BkB,EAA5BlB,IAAMK,EAAsBa,EAAtBb,IAAsBa,EAAhBd,WAGvBkV,EAAkBhV,EAAI,CACtBD,MACAN,OACAC,MACAI,WAAeyS,EAAUzS,WAAcyS,EAAUzS,WAAac,EAAWd,aAE7E6B,QAAQC,IAAI,wCACZD,QAAQC,IAAIoT,GA/Bd,UAmCUC,EAAanR,YAAM1B,YAAYC,GAAK,QAAUvB,EAAU,WAAaiD,YAAO,MAAQ,KAAO2E,IAnCrG,UAoC+B1E,YAAQiR,GApCvC,eAoCUC,EApCV,OAoCoDhR,KAAK,GAAGC,IApC5D,UAqCYyM,YAAUsE,EAAcF,GArCpC,QAsCMrT,QAAQC,IAAI,yDA7FpBmS,GAA+B,GAuD7B,mDA0CMpS,QAAQC,IAAR,MACAD,QAAQC,IAAI,uEA3ClB,iEAAF,GAyFoFoR,CAAa1G,IAA7E,4BAKZ,cAAC,GAAD,QAWZ6I,GAAsB,WACtB,OACI,cAACxJ,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAQ,OAASM,OAAS,OAASC,gBAAkB,YAAe3B,QAAU,OAASuB,eAAiB,SAAWK,WAAa,UAA3I,SACI,cAAC7B,EAAA,EAAD,CACAF,GAAI,CACAG,QAAU,OACVuB,eAAiB,SACjBK,WAAa,SACbC,aAAe,MACfC,gBAAiB,8CACjBC,eAAiB,OACjBC,cAAgB,cAChBL,gBAAkB,QAKlBP,MAAQ,QACRM,OAAS,SAfb,SAkBI,cAAC9B,EAAA,EAAD,CAAYC,GAAI,CAAEoC,SAAW,OAASC,WAAa,MAAQ/B,MAAQ,UAAYgC,SAAW,eAA1F,gCCrIDqH,GAnDD,WAEZ,MAA8CnH,qBAAWvG,IAAnDE,EAAN,EAAMA,UACN,GADA,EAAkBU,UAAlB,EAA8BF,YACJzB,oBAAS,IAAnC,mBAAO0O,EAAP,KAAejC,EAAf,KAYA,OATAnM,qBAAW,gBACiB1F,IAAvBqG,EAAUI,SACXoL,GAAQ,GAGRA,GAAQ,KAER,CAAExL,IAGN,mCACE,eAAC+D,EAAA,EAAD,CAAKF,GAAK,CAAEuB,MAAQ,QAAUM,OAAS,QAAU1B,QAAU,OAASO,cAAgB,UAApF,UAEI,cAACmJ,EAAA,EAAD,CACEC,OAAO,QACPpC,KAAOkC,EACP5J,GAAI,CAAEuB,MAAQ,QAASM,OAAS,SAHlC,SAME,eAACwD,EAAA,EAAD,CAAOrF,GAAI,CAAE6B,OAAS,SAAtB,UAK2B,aAAvB1F,EAAUI,UAA2B,cAAC,GAAD,IACb,iBAAxBJ,EAAUI,UAAgC,cAAC,GAAD,IAGlB,gBAAxBJ,EAAUI,UAA+B,cAAC,GAAD,IACjB,kBAAxBJ,EAAUI,UAAiC,cAAC,GAAD,IACnB,cAAxBJ,EAAUI,UAA6B,cAAC,GAAD,SAMpB,kBAAvBJ,EAAUI,UAAgC,cAACiL,GAAD,IAE5C,cAAC,GAAD,UCgHOuC,GA9JK,SAAC,GAAyC,IAAD,IAAtCC,gBAAsC,MAA3B,UAA2B,EAAfC,EAAe,EAAfA,SAC1C/T,QAAQC,IAAI,uBACZD,QAAQC,IAAI8T,GACZ,MAA0EzH,qBAAWvG,IAAzDO,GAA5B,EAAML,UAAN,EAAkBM,QAAlB,EAA4BD,mBAAoBE,EAAhD,EAAgDA,SAE5CpB,GAFJ,EAA2DuB,UACnC2F,qBAAW1H,IAA7BxG,IACQiH,gBACVpD,EAAU8R,EAAS3V,IAGjB4V,EAAS,CAGX,YAAgB,CACZ3I,MAAO,OACPM,OAAQ,OACRsI,GAAK,EACLC,GAAK,EACLhE,GAAK,KAET,mBAAuB,CACnB1E,eAAiB,gBACjB2I,KAAO,UAEX,UAAc,CACVjI,SAAW,WACXmD,SAAW,SACX+E,SAAW,WACXC,IAAM,OACV,YAAgB,CACZD,SAAW,WACXE,OAAS,OAEb,eAAmB,CACfpI,SAAW,SACXP,OAAS,OACTN,MAAQ,OACRS,aAAe,MACfyI,GAAI,EAAInF,EAAI,GACZ8D,GAAK,OACLsB,UAAY,EACZ5I,gBAAkB,SAEtB,aAAiB,CACbN,IAAI,IACJrB,QAAQ,OACRO,cAAc,MACda,MAAM,OACNG,eAAe,gBACfiJ,GAAK,GAET,SAAa,CACTxK,QAAQ,OACRO,cAAc,MACdc,IAAM,GAET,iBAAqB,CACjBc,SAAW,eAEhB,kBAAsB,CAClBgI,SAAW,WACXC,IAAM,MACNnI,SAAW,QAEf,aAAiB,CACbjC,QAAU,SACVyK,GAAK,GACLxI,SAAW,SACXiI,KAAK,WAKb,OACI,mCACI,eAAC,IAAD,CAAMvM,QAAQ,WAAWuI,UAAY,cAAcrG,GAAKkK,EAAOW,YAA/D,UAEI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAC1E,UAAU,qBAAqB2E,UAAU,MAAOhL,GAAKkK,EAAOe,mBAA5E,UACI,eAACH,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAAC1E,UAAU,mBAAoB8E,GAAI,GAAKH,UAAU,MAAMX,KAAK,SAASe,cAAe,EAAzG,UACI,eAACN,EAAA,EAAD,CAAMI,MAAI,EAAV,UAAW,cAACrN,EAAA,EAAD,CAAM+C,KAAK,QAASyK,KAAM,cAAC,IAAD,IAAsBtN,MAAM,SAAjE,OACA,eAAC+M,EAAA,EAAD,CAAMI,MAAI,EAAV,cAAY,eAACnL,EAAA,EAAD,CAAYsG,UAAU,YAAYgE,KAAK,SAASrK,GAAKkK,EAAOoB,UAA5D,cAA2ErB,EAASjW,KAApF,aAEhB,cAAC8W,EAAA,EAAD,CAAMI,MAAI,EAAC7E,UAAU,cAAe8E,GAAI,EAAGnL,GAAIkK,EAAOqB,YAAtD,SACK,cAACxC,EAAA,EAAD,CACA1C,UAAU,wBACVrG,GAAI,CAAG,UAAY,CAAEM,MAAQ,SAF7B,SAKG,cAAC,IAAD,WAKZ,cAACJ,EAAA,EAAD,CAAKmG,UAAY,mBAAjB,SACI,cAACtG,EAAA,EAAD,CAAYsG,UAAU,iBAAkBrG,GAAIkK,EAAOsB,eAAnD,SACMvB,EAAStV,UAInB,eAACuL,EAAA,EAAD,CAAKmG,UAAU,gBAAgBrG,GAAKkK,EAAOuB,aAA3C,UACI,eAACvL,EAAA,EAAD,CAAKwL,UAAU,WAAYlK,IAAK,EAAGxB,GAAKkK,EAAOyB,SAA/C,UACI,eAACzL,EAAA,EAAD,CAAKmG,UAAU,mBAAmBrG,GAAIkK,EAAO0B,iBAA7C,UACI,cAAE,IAAF,CAA4BvF,UAAU,oBAAoBrG,GAAIkK,EAAO2B,oBACrE,cAAE9L,EAAA,EAAF,CAAasG,UAAU,eAAerG,GAAKkK,EAAO4B,aAAlD,4BAGJ,cAAC5L,EAAA,EAAD,CAAKC,QAAQ,OAAOO,cAAc,MAAMqL,SAAS,OAAOvK,IAAK,EAA7D,SAEQyI,EAASlV,QAAQQ,KAAK,SAACM,GACnB,IAAIoH,EAAWpH,EAAOvB,IACtB,OAAS,cAACuJ,EAAA,EAAD,CAAM+C,KAAK,QAAQ7C,MAAOlI,EAAO7B,KAAMqS,UAAU,UAAUrG,GAAI,CAAC0K,UAAY,EAAI,UAAY,CAACsB,eAAiB,YAAcC,OAAS,YAAe5L,QAAU,WAAQ/E,EAAQrF,KAAR,iBAAuBgH,KAA7L,uBAMzB,cAACiD,EAAA,EAAD,CAAKwL,UAAU,sBAAsBvL,QAAQ,OAAOqB,IAAK,EAAG0K,KAAK,kBAAjE,SAKmB,YAAblC,EACG,eAAC9J,EAAA,EAAD,CAAKC,QAAQ,OAAOqB,IAAK,EAAG0K,KAAK,kBAAjC,UACG,cAAC,IAAD,CACAlM,GAAI,CAAEoC,SAAS,OAAQkI,SAAW,WAAaC,IAAM,MAAQ,UAAW,CAAG0B,OAAS,UAAY3L,MAAQ,SACxGD,QAAY,WAAQ3D,EAASuN,EAAS3V,QAEtC,cAAC,IAAD,CACA0L,GAAI,CAAEoC,SAAS,OAASkI,SAAW,WAAaC,IAAM,MAAQ,UAAW,CAAG0B,OAAS,UAAY3L,MAAQ,SACzGD,QAAY,WACRnK,QAAQC,IAAI,+CACZqG,EAAkBrE,SAI1B,eAAC+H,EAAA,EAAD,CAAKC,QAAQ,OAAOqB,IAAK,EAAG0K,KAAK,kBAAjC,UACI,cAAC9L,EAAA,EAAD,CACAtC,QAAQ,WAAYkC,GAAK,CAAEC,GAAK,EAAIkG,QAAU,EAAI7F,MAAQ,QAAU6L,SAAW,QAAUtK,OAAS,QAClGxB,QAAY,WAAQ3D,EAASuN,EAAS3V,MAFtC,qBAOA,cAAC,IAAD,CACA0L,GAAI,CAAEoC,SAAS,OAASkI,SAAW,WAAaC,IAAM,MAAQ,UAAW,CAAG0B,OAAS,UAAY3L,MAAQ,SACzGD,QAAY,WAAQ7D,EAAkBrE,oBC3EvDiU,GAtED,SAAC,GAAwE,IAAtEpC,EAAqE,EAArEA,SAAsCqC,GAA+B,EAA1DlQ,UAA0D,EAA9CC,aAA8C,EAA/BiQ,aAAcC,EAAiB,EAAjBA,WASjE,OANApW,QAAQC,IAAI,mBAEZqF,qBAAW,WACPtF,QAAQC,IAAIkW,KACZ,CAACA,IAGL,mCACA,eAAChH,EAAA,EAAD,CAAOvH,QAAQ,WAAWkC,GAAI,CAAE0K,UAAY,EAAI6B,UAAY,OAAShL,MAAQ,OAAQ+D,EAAI,GAAzF,UACI,cAAC+D,EAAA,EAAD,CAAO2B,UAAU,MAAM1B,QAAS,EAAGtJ,GAAI,CAACoJ,GAAK,KAA7C,SACI,eAACrJ,EAAA,EAAD,qBACasM,EAAYxV,OADzB,SAKJ,eAACqJ,EAAA,EAAD,WAIImM,EAAY9W,KAAK,SAACiX,GACd,OAAO,cAAC,GAAD,CAAa1O,QAAQ,WAAWkC,GAAI,CAAEuB,MAAO,OAAQM,OAAQ,SAAWoI,SAAWuC,EAAOxC,SAAWA,OAQxF,IAAvBqC,EAAYxV,QAEZ,mCACD,cAACqJ,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAQ,OAASgL,UAAY,QAAUzK,gBAAkB,YAAe3B,QAAU,OAASuB,eAAiB,SAAWK,WAAa,UAA/I,SACI,cAAC7B,EAAA,EAAD,CACAF,GAAI,CACAG,QAAU,OACVuB,eAAiB,SACjBK,WAAa,SACbC,aAAe,MACfC,gBAAiB,8CACjBC,eAAiB,OACjBC,cAAgB,cAChBL,gBAAkB,QAIlBP,MAAQ,OAbZ,SAgBI,eAACxB,EAAA,EAAD,CAAYC,GAAI,CAAEoC,SAAW,SAAWC,WAAa,MAAQ/B,MAAQ,UAAYgC,SAAW,eAA5F,UACqB,SAAfgK,GAAyB,0BACV,UAAfA,GAA0B,qBACX,WAAfA,GAA2B,uBACZ,UAAfA,GAA0B,yC,yCCZrCG,GArDE,SAACxR,GAEV,MAA6BC,mBAAS,IAAtC,mBAAMwR,EAAN,KAAeC,EAAf,KACWtX,EAAYmN,qBAAW1H,IAA7BxG,IACDgH,EAAUC,eAiBd,OAfAC,qBAAU,WACN,sBAAC,8BAAAlG,EAAA,sEACwBiD,YAASF,YAAM1B,YAAYC,GAAK,QAAUvB,EAAU,aAD5E,OACOqX,EADP,OAC6FjU,KACtFmU,EAAUF,EAAOnX,KAAK,SAACsX,GACvB,OAAOA,EAAkBvS,UAE7BoS,EAASE,EACT1W,QAAQC,IAAI,oEACZD,QAAQC,IAAIuW,GACZC,EAAUD,GARb,0CAAD,KAWA,IAIA,eAACxM,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAO,OAAS4I,GAAK,GAAhC,UAEI,cAACpK,EAAA,EAAD,CAAYC,GAAI,CAAEoK,GAAK,EAAIQ,GAAK,EAAIvI,WAAa,EAAID,SAAW,QAAhE,oBAIA,cAAC0K,GAAA,EAAD,IAEA,eAAC5M,EAAA,EAAD,CAAKF,GAAI,CAAEG,QAAU,OAASO,cAAgB,MAAQ0J,GAAK,IAA3D,UACI,cAAC,KAAD,CAAwBpK,GAAI,CAAEsK,SAAW,WAAaC,IAAM,SAC5D,cAACwC,GAAA,EAAD,CAAMC,KAAK,IAAIC,UAAU,OAAOjN,GAAI,CAAEkN,GAAK,QAA3C,oBAGJ,cAACJ,GAAA,EAAD,IAEA,cAACzD,EAAA,EAAD,CAAOrJ,GAAI,CAACmN,UAAY,SAAWvC,GAAK,GAAMwC,GAAK,EAAIhD,GAAK,GAA5D,SAEMsC,EAAOnX,KAAK,SAAC8X,GAAY,OACvB,eAACnN,EAAA,EAAD,CAAKF,GAAI,CAAEG,QAAU,OAASO,cAAgB,OAAQL,QAAU,WAAO/E,EAAQrF,KAAR,iBAAuBoX,EAAM/Y,OAApG,UACI,cAAC,KAAD,CAAwB0L,GAAI,CAAEsK,SAAW,WAAaC,IAAM,SAC5D,eAACxK,EAAA,EAAD,CAAYiN,KAAK,IAAIC,UAAU,OAAOjN,GAAI,CAAEkN,GAAK,OAAS5M,MAAQ,OAAS,UAAW,CAAG2L,OAAS,UAAY3L,MAAQ,SAAtH,cAAmI+M,EAAMrZ,KAAzI,mB,gFCzDb,ICAA,IDAA,IAA0B,mDEmS1BD,GAnQD,SAACkH,GAAW,IAAD,EAIzB,EAA8GuH,qBAAWvG,IAAnHI,EAAN,EAAMA,cAA4BI,GAAlC,EAAsBvE,WAAtB,EAAkCuE,SAA8CN,GAAhF,EAA2CO,SAA3C,EAAsDG,UAAtD,EAAkEC,YAAlE,EAAgFX,WAAYC,EAA5F,EAA4FA,aAK5F,EAA0BlB,mBAAS,IAAnC,mBAAMoS,EAAN,KAAcC,EAAd,KACA,EAAiDrS,mBAAS,CAAElH,KAAO,GAAKC,IAAM,GAAKC,OAAS,GAAKC,QAAU,GAAKC,QAAU,GAAKC,WAAa,KAA5I,mBAAMmZ,EAAN,KAAyBC,EAAzB,KACYpY,EAAYmN,qBAAW1H,IAA7BxG,IACAgI,EAAcoR,eAAdpR,UAqIF,OApIJpG,QAAQC,IAAR,2CAAgDmG,IAGhDd,oBAAS,sBAAE,0CAAAlG,EAAA,sEAEiBiD,YAASF,YAAM1B,YAAYC,GAAK,QAAUvB,EAAU,cAAiBiD,YAAO,MAAQ,KAAOgE,KAF5G,OAEHiM,EAFG,OAE4H9P,KAAK,GAAG6B,OACrItG,EAA+DuU,EAA/DvU,KAAOC,EAAwDsU,EAAxDtU,IAAMC,EAAkDqU,EAAlDrU,OAASC,EAAyCoU,EAAzCpU,QAAUC,EAA+BmU,EAA/BnU,QAAUC,EAAqBkU,EAArBlU,WAAaC,EAAQiU,EAARjU,IAC7DmZ,EAAoB,CAAEzZ,OAAOC,MAAMC,SAASC,UAAUC,UAAUC,aAAYC,QAJrE,2CAKP,IAEFkH,qBAAW,WACTtF,QAAQC,IAAI,mDACZD,QAAQC,IAAImX,GACZpX,QAAQC,IAAI,iDACZD,QAAQC,IAAId,GACZa,QAAQC,IAAI,cACZD,QAAQC,IAAImG,GAMZ,IAAIqR,EAAcC,YAAYvV,YAAO1B,YAAWC,GAAK,QAAUvB,EAAU,WAAc,SAAEiO,GAE7E,IAAIgK,EAAQhK,EAAc7K,KAAKlD,KAAK,SAAEsY,GAElC,OAAOA,EAAiBvT,UAG5BpE,QAAQC,IAAI,qGACZD,QAAQC,IAAI,0BACZD,QAAQC,IAAImX,GAuBZA,EArBA,SAA2BQ,EAAWxR,GAkBlC,OAhBApG,QAAQC,IAAI,6DACZD,QAAQC,IAAI2X,GACGA,EAAS3W,QAAQ,SAAE4W,GAE9B,IAF2C,EAEvCC,GAAc,EAFyB,cAIrBD,EAAQlZ,YAJa,IAI3C,IAAI,EAAJ,qBAA0C,CACtC,GADsC,QACzBP,MAAQgI,EAAU,CAC3B0R,GAAc,EACd,QAPmC,8BAW3C,OAAOA,KAMPC,CAAiBX,EAAQhR,GACjCpG,QAAQC,IAAI,oCACZD,QAAQC,IAAImX,GAGZC,EAASD,MAGrB,OAAS,WACLpX,QAAQC,IAAI,6DACZwX,OAEJ,CAACrR,IAGLd,qBAAW,WACPtF,QAAQC,IAAImX,KACZ,CAAEA,IA8DE,qCACI,cAAC,GAAD,IACA,cAACY,EAAA,EAAD,IACA,eAAChO,EAAA,EAAD,CAAKF,IAAE,GAAK3L,WAAY,WAAjB,2BACiB,wDADjB,2BAEiB,gDAFjB,GAAP,UAGA,cAAC8Z,EAAA,EAAD,CAAWhC,SAAS,KAAKnM,GAAI,CAAEoO,OAAS,sBAAwBtM,gBAAkB,WAAlF,SACI,cAAC5B,EAAA,EAAD,UACI,eAACA,EAAA,EAAD,WAEI,eAACA,EAAA,EAAD,CAAKF,GAAI,CAAEoJ,GAAK,QAAhB,UACQ,cAAClJ,EAAA,EAAD,CAAKmG,UAAU,uBAAuBrG,GAAI,CAAE6B,OAAQ,QAAUN,MAAQ,OAASO,gBAAkB,QAASyD,SAAW,UAArH,SAEQ,qBACI8I,IAAOb,EAAiBnZ,WACxBuS,MAAO,CACH2F,UAAY,OACZhL,MAAO,OACP+M,UAAY,QACZC,eAAiB,UAErB1M,OAAO,YAInB,eAAC3B,EAAA,EAAD,CAAOF,GAAI,CAAEG,QAAQ,OAAQO,cAAc,MAASmB,OAAO,SAA3D,UACQ,cAAC3B,EAAA,EAAD,CAAKmG,UAAU,sBAAsBrG,GAAI,CAAC6B,OAAS,OAAQqK,KAAO,YAAaC,SAAW,SAA1F,SACI,cAACjM,EAAA,EAAD,CACIF,GAAI,CACJ6B,OAAS,QACTN,MAAQ,QACRO,gBAAkB,WAClBE,aAAe,MACfsI,SAAW,WACXkE,KAAO,MACPhE,OAAS,MACTE,UAAY,IACZ0D,OAAS,kBAET7I,SAAW,UAZf,SAcI,qBAEI8I,IAAMb,EAAiBtZ,OAASsZ,EAAiBtZ,OAASua,GAE1D7H,MAAO,CAAE/E,OAAS,OAASN,MAAO,OAAQ+M,UAAY,eAMlE,cAACpO,EAAA,EAAD,CAAKmG,UAAU,kBAAkBrG,GAAI,CAAC6B,OAAS,OAAS6M,SAAW,IAAMvO,QAAU,QAAnF,SACI,eAACD,EAAA,EAAD,CAAKF,GAAI,CAAE2O,UAAY,MAAQvI,GAAI,QAAnC,UACI,cAAClG,EAAA,EAAD,CAAKF,GAAI,CAAEqC,WAAa,OAAxB,SACI,eAACgH,EAAA,EAAD,CAAO2B,UAAU,MAAMpK,KAAK,SAA5B,UACI,eAACb,EAAA,EAAD,CAAYC,GAAI,CAAEoC,SAAW,SAAWC,WAAa,OAArD,cAAgEmL,EAAiBxZ,KAAjF,QACA,cAAC,KAAD,CACAgM,GAAM,CAACoC,SAAW,SAAWnC,GAAK,UAAYqK,SAAW,WAAaC,IAAM,MAAQ,UAAY,CAAE0B,OAAS,UAAY3L,MAAQ,SAC/HD,QAAY,WAAQhE,EAAcC,WAM1C,eAAC+M,EAAA,EAAD,CAAO2B,UAAU,MAAjB,UACI,cAAC,KAAD,IACA,eAACjL,EAAA,EAAD,eAAeuN,EAAMzW,OAArB,qBAIZ,cAACqJ,EAAA,EAAD,CAAKmG,UAAU,iBAAiBrG,GAAI,CAAC6B,OAAS,OAAS6M,SAAW,IAAMvO,QAAU,QAAlF,SACI,eAACkJ,EAAA,EAAD,CAAO2B,UAAU,MAAM1B,QAAS,EAAGtJ,GAAI,CAAE2O,UAAY,MAAQvI,GAAK,QAAlE,UAEI,cAAChG,EAAA,EAAD,CACAtC,QAAQ,YACR6D,UAAW,cAAC,KAAD,IACXtB,QAAY5D,EAHZ,sBAQA,cAAC2D,EAAA,EAAD,CACAtC,QAAQ,WACRwC,MAAM,QACNqB,UAAW,cAAC,KAAD,IACXtB,QAhJhD,WACI,sBAAC,gCAAA/K,EAAA,sEAGW8C,EAASC,YAAO1B,YAAYC,GAAK,QAAUvB,EAAU,cAAgBiD,YAAM,MAAQ,KAAOgE,IAHrG,SAIiC/D,YAASH,GAJ1C,cAIWI,EAJX,OAIoDC,KAAK,GAAGC,IAJ5D,SAKaC,YAAUH,GALvB,OAMOtC,QAAQC,IAAR,UAAemG,EAAf,iDAMIsS,EAAiBtB,EAAM/X,KAAI,SAACwY,GAExB,IAAIc,EAAkBd,EAAQlZ,WAAWsC,QAAO,SAACO,GAC7C,OAAOA,EAAUpD,KAAOkZ,EAAiBlZ,OAMjD,OAHAyZ,EAAQlZ,WAAaga,EACY,IAA9Bd,EAAQlZ,WAAWgC,SAAekX,EAAQ/Y,SAAU,GAEhD+Y,KAGX7X,QAAQC,IAAIyY,GAKZvY,QAAQC,IACJsY,EAAerZ,KAAK,SAACuZ,GAGjB,OAFA5Y,QAAQC,IAAR,2BAAgC2Y,EAAcxa,MAC9C4B,QAAQC,IAAI2Y,GACLvW,YAASF,YAAQ1B,YAAYC,GAAF,gBAAgBvB,EAAhB,WAAoCiD,YAAO,MAAQ,KAAOwW,EAAcxa,OACzGyP,MAAM,SAACT,GAEJ,IAAIyL,EAAiBzL,EAAc7K,KAAK,GAAGC,IAG3CyM,YAAW4J,EAAiB,CAAEla,WAAaia,EAAcja,WAAaG,QAAU8Z,EAAc9Z,iBAGvG+O,MAAK,WACJ7N,QAAQC,IAAI,0CACZiO,OAAO,SAACtD,GACP5K,QAAQC,IAAI2K,MA7CxB,kDAmDO5K,QAAQC,IAAR,MACAD,QAAQC,IAAR,uDAA4DmG,IApDnE,yDAAD,IA2I4C,sCAcxB,cAACwO,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAACI,GAAI,GAAIC,cAAc,IAAI/E,UAAU,aAAarG,GAAI,CAACsK,SAAW,SAAUC,IAAM,GAAtG,SACQ,cAAC,GAAD,CAAOpO,UAAWA,EAAWC,aAAcA,EAAc4N,SAAU,UAAWqC,YAAeiB,EAAQhB,WAAW,oBAQnInQ,GAAc,cAAC,GAAD,W,+BC5EZ6S,GA/LC,WAEHxM,qBAAW1H,IAEJS,eAgChB,OACE,mCACA,cAAC2E,EAAA,EAAD,CAAKF,GAAI,CAAG8B,gBAAkB,WAA9B,SACA,eAACqM,EAAA,EAAD,CAAWhC,SAAS,KAApB,UAGI,eAACjM,EAAA,EAAD,CAAKF,GAAI,CAAEG,QAAU,OAASO,cAAgB,MAAQqB,WAAa,UAAnE,UAEI,cAACkN,GAAA,EAAD,CAASjP,GAAI,CAAEG,QAAU,QAAzB,SACE,sBAAKoB,MAAM,KAAKM,OAAO,KAAKqN,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAAlE,UACA,sBAAMC,EAAE,m0BAAm0BF,KAAK,YACh1B,sBAAM,YAAU,UAAU,YAAU,UAAUE,EAAE,83IAA83IF,KAAK,iBAIr7I,cAACpP,EAAA,EAAD,CAAYC,GAAI,CAAE4K,GAAK,GAAMxI,SAAW,UAAxC,qBAEA,cAAChC,EAAA,EAAD,CACAiG,UAAU,oBACVhG,QAAY,WAAQ7G,MACpBwG,GAAI,CAAEC,GAAK,OACLK,MAAQ,QACR,SAAW,CACTwB,gBAAkB,UAN1B,4BAeJ,eAAC5B,EAAA,EAAD,CAAKF,GAAI,CAAE2K,GAAK,IAAhB,UACE,cAAC5K,EAAA,EAAD,CAAYC,GAAI,CAAEoC,SAAW,SAAWkN,UAAY,SAAWhP,MAAQ,UAAY+B,WAAa,MAAQ+H,GAAK,GAA7G,iDACA,cAACrK,EAAA,EAAD,CAAYC,GAAI,CAAEoC,SAAW,SAAWkN,UAAY,SAAWhP,MAAQ,UAAY8M,GAAK,KAAxF,+BACA,eAACrN,EAAA,EAAD,CAAYC,GAAI,CAAEoC,SAAW,SAAWkN,UAAY,SAAWhP,MAAQ,WAAvE,8DAAoI,uBAApI,kDAEA,cAACJ,EAAA,EAAD,CAAKF,GAAI,CAAEG,QAAS,OAASuB,eAAiB,UAA9C,SACE,cAACtB,EAAA,EAAD,CACAtC,QAAU,YACVuC,QAAY,WAAQ7G,MACpBwG,GAAI,CACA2K,GAAK,OACL9I,OAAS,OACTN,MAAQ,QACRa,SAAW,OACXN,gBAAkB,QAClB,SAAW,CACTA,gBAAkB,YAVxB,8BAoBN,eAAC5B,EAAA,EAAD,CAAKF,GAAI,CAAEG,QAAU,OAASO,cAAgB,SAAYgB,eAAiB,SAAWI,gBAAkB,UAAY6I,GAAK,IAAzH,UAGE,cAAC5K,EAAA,EAAD,CAAYC,GAAI,CAAEsP,UAAY,SAAWlN,SAAW,SAAW9B,MAAQ,UAAYqK,GAAK,UAAxF,6BAGA,eAACzK,EAAA,EAAD,CAAKF,GAAI,CAAGG,QAAU,OAASmG,oBAAsB,UAAYqE,GAAK,SAAWP,GAAK,OAAS1I,eAAiB,UAAhH,UACE,cAACxB,EAAA,EAAD,CAAMF,GAAI,CAAEG,QAAU,OAASuB,eAAiB,UAAhD,SACI,qBAAK2M,IAAI,GAAG9M,MAAM,QAAQM,OAAO,QAAQ+E,MAAO,CAAEwH,OAAS,uBAG/D,eAAClO,EAAA,EAAD,CAAKF,GAAI,CAAEmM,SAAW,OAAtB,UACE,cAACpM,EAAA,EAAD,CAAYC,GAAI,CAACoC,SAAW,MAAQ9B,MAAQ,WAA5C,qCACA,cAACP,EAAA,EAAD,CAAYC,GAAI,CAAEM,MAAQ,WAA1B,iGAKJ,eAACJ,EAAA,EAAD,CAAKF,GAAI,CAAGG,QAAU,OAASmG,oBAAsB,UAAYqE,GAAK,SAAWP,GAAK,OAAU1I,eAAiB,UAAjH,UACE,cAACxB,EAAA,EAAD,CAAKF,GAAI,CAAEG,QAAS,OAASuB,eAAiB,UAA9C,SACE,eAACxB,EAAA,EAAD,CAAKF,GAAI,CAAEmM,SAAW,OAAtB,UACE,cAACpM,EAAA,EAAD,CAAYC,GAAI,CAACoC,SAAW,MAAQ9B,MAAQ,WAA5C,iCACA,cAACP,EAAA,EAAD,CAAYC,GAAI,CAAEM,MAAQ,WAA1B,mHAIJ,cAACJ,EAAA,EAAD,CAAKF,GAAI,CAAEG,QAAU,OAASuB,eAAiB,UAA/C,SACE,qBAAK2M,IAAI,GAAG9M,MAAM,QAAQM,OAAO,QAAQ+E,MAAO,CAAEwH,OAAS,0BAK/D,eAAClO,EAAA,EAAD,CAAKF,GAAI,CAAGG,QAAU,OAASmG,oBAAsB,UAAYqE,GAAK,SAAWP,GAAK,OAAS1I,eAAiB,UAAhH,UACE,cAACxB,EAAA,EAAD,CAAMF,GAAI,CAAEG,QAAU,OAASuB,eAAiB,UAAhD,SACI,qBAAK2M,IAAI,GAAG9M,MAAM,QAAQM,OAAO,QAAQ+E,MAAO,CAAEwH,OAAS,uBAG/D,eAAClO,EAAA,EAAD,CAAKF,GAAI,CAAEmM,SAAW,OAAtB,UACE,cAACpM,EAAA,EAAD,CAAYC,GAAI,CAACoC,SAAW,MAAQ9B,MAAQ,WAA5C,kCACA,cAACP,EAAA,EAAD,CAAYC,GAAI,CAAEM,MAAQ,WAA1B,0GAoBJ,eAACJ,EAAA,EAAD,CAAKF,GAAI,CAAE2K,GAAK,IAAhB,UACE,cAAC5K,EAAA,EAAD,CAAYC,GAAI,CAAEsP,UAAY,SAAWlN,SAAW,SAAW9B,MAAQ,UAAY+B,WAAa,OAAhG,iDACA,cAACnC,EAAA,EAAD,CAAKF,GAAI,CAAEG,QAAU,OAASuB,eAAiB,SAAWiJ,GAAK,GAA/D,SACE,cAACvK,EAAA,EAAD,CACAC,QAAU,WAAQ7G,MAClBsE,QAAQ,YACRkC,GAAI,CACF6B,OAAS,OACTN,MAAQ,QACRa,SAAW,OACXN,gBAAkB,QAClB,SAAW,CACTA,gBAAkB,YATtB,iCAoBJ,cAAC5B,EAAA,EAAD,CAAKF,GAAI,CAAE8B,gBAAkB,UAAYD,OAAS,OAAS8I,GAAK,QAAhE,SACI,cAAC5K,EAAA,EAAD,CAAYC,GAAI,CAAEM,MAAQ,SAA1B,yB,oBCxBCiP,GA7IF,SAACtU,GAIZ,MAAyCC,oBAAS,GAAlD,mBAAQsU,EAAR,KAAqBC,EAArB,KACA,EAA+CvU,qBAA/C,mBAAQwU,EAAR,KAAyBC,EAAzB,KACA,EAA2DzU,oBAAS,GAApE,mBAAQ0U,EAAR,KAA8BC,EAA9B,KAMA,IAAYxa,EAAYmN,qBAAW1H,IAA7BxG,IAwBN,OAfAkH,qBAAW,WACT,IAAImS,EAAcC,YAAYvV,YAAO1B,YAAWC,GAAK,QAAUvB,EAAU,SAAYiD,YAAM,UAAY,MAAO,KAAU,SAACwX,GACrHH,EAAkBG,EAASrX,KAAK5B,WAGpC,OAAS,WAAQ8W,OACf,IAUF,cAACzN,EAAA,EAAD,CAAKF,GAAI,CAAE0O,SAAU,GAArB,SACE,cAACqB,EAAA,EAAD,CAAQzF,SAAS,QAAQ0F,UAAW,EAAIhQ,GAAI,CAAE8B,gBAAkB,UAAYmO,UAAY,QAAU9J,QAAU,OAA5G,SAEE,cAAC+J,EAAA,EAAD,CAASlQ,GAAI,CAACG,QAAU,OAASuB,eAAiB,SAAUG,OAAS,OAASsO,eAAiB,OAAS7F,SAAU,YAAlH,SAEE,eAACjB,EAAA,EAAD,CAAO2B,UAAU,MAAMtJ,eAAe,SAAS4H,QAAS,GAAItJ,GAAI,CAAE6B,OAAS,QAA3E,UAEI,cAAC9B,EAAA,EAAD,CAAYjC,QAAQ,KAAK2C,UAAU,MAAMT,GAAK,CAAE0O,SAAW,KAA3D,SACE,cAAC,IAAD,CAAM0B,GAAG,QAAQxJ,MAAO,CAAEoF,eAAiB,OAAS1L,MAAQ,UAAY,UAAY,CAAEA,MAAQ,YAA9F,yBAKJ,eAAC+I,EAAA,EAAD,CAAO2B,UAAU,MAAMhL,GAAI,CAAEM,MAAQ,WAArC,UACI,cAACP,EAAA,EAAD,CAAYjC,QAAQ,KAAK2C,UAAU,MAAMT,GAAI,CAAE0O,SAAW,KAA1D,SACI,cAAC,IAAD,CAAM0B,GAAG,SAASxJ,MAAO,CAAEoF,eAAiB,OAAS1L,MAAQ,UAAY,UAAY,CAAEA,MAAQ,YAA/F,qBAMFoP,EAAiB,GAAK,cAAC7R,EAAA,EAAD,CAAME,MAAQ2R,EAAiB9O,KAAK,QAAQZ,GAAI,CAAEsK,SAAW,WAAaC,IAAM,MAAQtK,GAAK,SAAWK,MAAQ,MAAQwB,gBAAkB,gBAItK,cAAC/B,EAAA,EAAD,CAAYjC,QAAQ,KAAK2C,UAAU,MAAMT,GAAI,CAAE0O,SAAW,KAA1D,SACQ,cAAC,IAAD,CAAM0B,GAAG,WAAWxJ,MAAO,CAAEoF,eAAiB,OAAS1L,MAAQ,UAAY,UAAY,CAAEA,MAAQ,YAAjG,uBAiCR,cAAC+P,GAAA,EAAD,CAAmBC,YAAc,WAAQT,GAA0B,IAAnE,SACA,eAAC9G,EAAA,EAAD,CAAY1I,QAzFtB,WACiCwP,GAAP,IAAxBD,IAwF2D5P,GAAK,CAAEsK,SAAW,WAAaiG,MAAQ,OAAS/F,OAAS,QAA5G,WAEmB,IAAfgF,EAEA,cAAC,KAAD,IAEA,KAGF,mCAEE,cAACgB,GAAA,EAAD,CAAMC,GAAKb,EAAX,SAEE,cAAC1P,EAAA,EAAD,CAAKF,GAAI,CAAEoO,OAAS,oBAAsBpM,aAAe,MAAQsI,SAAU,WAAcC,IAAM,MAAQG,UAAY,EAAI7I,OAAS,OAASN,MAAQ,QAAjJ,SAEI,cAAC8D,EAAA,EAAD,CAAOrF,GAAI,CAAEoK,GAAK,GAAMD,GAAM,EAAIrI,gBAAkB,WAApD,SACE,cAAC1B,EAAA,EAAD,CACAJ,GAAI,CAAEM,MAAQ,UAAY+B,WAAa,OACvChC,QArGC,WACMoP,GAAV,IAAfD,GACF5U,KACA1E,QAAQC,IAAI,4BAgGQ,6C,YC1HxB,ICmLeua,GArKH,SAACzV,GAAW,IAAD,EAEnB,EAAoGuH,qBAAWvG,IAAxGa,EAAP,EAAOA,YAA2CL,GAAlD,EAAqBJ,cAArB,EAAqCnE,WAArC,EAAkDuE,SAAqBN,GAAvE,EAA4DO,SAA5D,EAAuEP,WAAYC,EAAnF,EAAmFA,aACnF,EAAiClB,mBAAS,IAA1C,mBAAMR,EAAN,KAAiBiW,EAAjB,KAGA,EAA2BzV,mBAAS,IAApC,mBAAMoS,EAAN,KAAcC,EAAd,KACA,EAAwC/K,qBAAW1H,IAAvCzF,EAAZ,EAAMf,IAAgB2F,EAAtB,EAAsBA,YA0CtB,OArCEuB,qBAAW,WAGP,sBAAE,kCAAAlG,EAAA,sEAE0B6E,YAAOC,YAAIxD,GAAK,QAAUvB,IAFpD,OAEIub,EAFJ,OAEgEtW,OAC1D7F,EAAkCmc,EAAlCnc,SAAUP,EAAwB0c,EAAxB1c,OAASG,EAAeuc,EAAfvc,WACzB6B,QAAQC,IAAI,0DACZD,QAAQC,IAAI,CAAE1B,WAAYP,SAASG,eACnCsc,EAAY,CAAElc,WAAYP,SAASG,eANnC,0CAAF,GASA6B,QAAQC,IAAR,0BAA+Bd,IAE/B,IAAIsY,EAAcC,YAAYvV,YAAO1B,YAAWC,GAAK,QAAUvB,EAAU,SAAYwb,YAAQ,eAAiB,SAAEvN,GAEpG,IAAIgK,EAAQhK,EAAc7K,KAAKlD,KAAK,SAAEsY,GAElC,OAAOA,EAAiBvT,UAG5BpE,QAAQC,IAAI,4DACZD,QAAQC,IAAImX,GAGZC,EAASD,MAErB,OAAS,WACLpX,QAAQC,IAAI,6DACZwX,OAEJ,IAEJnS,qBAAW,WACTtF,QAAQC,IAAImX,KACX,CAAEA,IAGH,qCACI,cAAC,GAAD,IACA,cAACY,EAAA,EAAD,IACA,eAAChO,EAAA,EAAD,CAAKF,IAAE,GAAK3L,WAAY,WAAjB,2BACiB,wDADjB,2BAEiB,gDAFjB,qCAG4B,SAH5B,0BAIiB,QAJjB,GAAP,UAMA,cAAC8Z,EAAA,EAAD,CAAWhC,SAAS,KAAKnM,GAAI,CAAEoO,OAAS,sBAAwBtM,gBAAkB,WAAlF,SACI,cAAC5B,EAAA,EAAD,UACI,eAACA,EAAA,EAAD,CAAKF,GAAI,CAAEuM,UAAW,QAASpC,GAAK,IAApC,UACI,eAACjK,EAAA,EAAD,CAAKF,GAAI,CAAEoJ,GAAK,QAAhB,UACI,cAAClJ,EAAA,EAAD,CAAKmG,UAAU,uBAAuBrG,GAAI,CAAE6B,OAAQ,QAAUN,MAAQ,OAASO,gBAAkB,QAASyD,SAAW,UAArH,SAES,qBACG8I,IAAO3T,EAASrG,WAChBuS,MAAO,CACH2F,UAAY,OACZhL,MAAO,OACP+M,UAAY,QACZC,eAAiB,UAEpB1M,OAAO,YAIpB,eAAC3B,EAAA,EAAD,CAAOF,GAAI,CAAEG,QAAQ,OAAQO,cAAc,MAASmB,OAAO,SAA3D,UACQ,cAAC3B,EAAA,EAAD,CAAKmG,UAAU,sBAAsBrG,GAAI,CAAC6B,OAAS,OAAQqK,KAAO,YAAaC,SAAW,SAA1F,SACI,cAACjM,EAAA,EAAD,CACIF,GAAI,CACJ6B,OAAS,QACTN,MAAQ,QACRO,gBAAkB,WAClBE,aAAe,MACfsI,SAAW,WACXkE,KAAO,MACPhE,OAAS,MACTE,UAAY,IACZ0D,OAAS,kBAET7I,SAAW,UAZf,SAcI,qBAEI8I,IAAM3T,EAASxG,OAASwG,EAASxG,OAASua,GAE1C7H,MAAO,CAAE/E,OAAS,OAASN,MAAO,OAAQ+M,UAAY,eAMlE,cAACpO,EAAA,EAAD,CAAKmG,UAAU,kBAAkBrG,GAAI,CAAC6B,OAAS,OAAS6M,SAAW,IAAMvO,QAAU,QAAnF,SACI,eAACD,EAAA,EAAD,CAAKF,GAAI,CAAE2O,UAAY,MAAQvI,GAAI,QAAnC,UACI,cAAClG,EAAA,EAAD,CAAKF,GAAI,CAAEqC,WAAa,OAAxB,SACI,eAACgH,EAAA,EAAD,CAAO2B,UAAU,MAAMpK,KAAK,SAA5B,UACI,eAACb,EAAA,EAAD,CAAYC,GAAI,CAAEoC,SAAW,SAAWC,WAAa,OAArD,cAAgE3H,EAASjG,SAAWiG,EAASjG,SAAWwF,EAAxG,QACA,cAAC,KAAD,CACC+F,GAAM,CAACoC,SAAW,SAAWnC,GAAK,UAAYqK,SAAW,WAAaC,IAAM,MAAQ,UAAY,CAAE0B,OAAS,UAAY3L,MAAQ,SAC/HD,QAAY,WAAQvD,YAM7B,eAACuM,EAAA,EAAD,CAAO2B,UAAU,MAAjB,UACI,cAAC,KAAD,IACA,eAACjL,EAAA,EAAD,eAAeuN,EAAMzW,OAArB,qBAIZ,cAACqJ,EAAA,EAAD,CAAKmG,UAAU,iBAAiBrG,GAAI,CAAC6B,OAAS,OAAS6M,SAAW,IAAMvO,QAAU,QAAlF,SACI,cAACkJ,EAAA,EAAD,CAAO2B,UAAU,MAAMhL,GAAI,CAAE2O,UAAY,MAAQvI,GAAK,QAAtD,SACI,cAAChG,EAAA,EAAD,CACAtC,QAAQ,YACR6D,UAAW,cAAC,KAAD,IACXtB,QAAY5D,EAHZ,gCAapB,eAACqO,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAACI,GAAI,GAAIC,cAAc,IAAI/E,UAAU,aAAarG,GAAI,CAACsK,SAAW,SAAUC,IAAM,GAAtG,UACI,cAACO,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAI2F,GAAI,EAAG9Q,GAAI,CAAEoG,GAAK,GAArC,SACI,cAACf,EAAA,EAAD,CAAOvH,QAAQ,WAAWkC,GAAI,CAAE0K,UAAY,EAAI7I,OAAS,OAASN,MAAQ,QAA1E,SACI,cAAC,GAAD,QAIR,cAACuJ,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAI2F,GAAI,EAAvB,SACI,cAAC,GAAD,CAAOzE,YAAgBiB,EAAQhB,WAAW,qBAQ5DnQ,GAAc,cAAC,GAAD,2BAAYA,GAAZ,IAAwBC,aAAgBA,EAAc2U,eAjJzD,WACrB3U,eCoEW4U,GA/ED,SAAC/V,GAAW,IAAD,EAErB,EAA8GuH,qBAAWvG,IAAzCE,GAAhF,EAAME,cAAN,EAAsBnE,WAAtB,EAAkCuE,QAAlC,EAA2CC,SAA3C,EAAsDG,UAAtD,EAAkEC,YAAlE,EAAgFX,WAAYC,EAA5F,EAA4FA,aAK5F,EAA0BlB,mBAAS,IAAnC,mBAAMoS,EAAN,KAAcC,EAAd,KACYlY,EAAYmN,qBAAW1H,IAA7BxG,IAgDN,OA9CAkH,qBAAW,WACTtF,QAAQC,IAAI,mDACZD,QAAQC,IAAImX,GACZpX,QAAQC,IAAI,iDACZD,QAAQC,IAAId,GACZ,IAAIsY,EAAcC,YAAYvV,YAAO1B,YAAWC,GAAK,QAAUvB,EAAU,SAAYiD,YAAM,UAAY,MAAO,KAAU,SAAEgL,GAE9G,IAAIgK,EAAQhK,EAAc7K,KAAKlD,KAAK,SAAEsY,GAElC,OAAOA,EAAiBvT,UAG5BpE,QAAQC,IAAI,uEACZD,QAAQC,IAAImX,GAGZC,EAASD,MAGrB,OAAS,WACLpX,QAAQC,IAAI,6DACZwX,OAEJ,IAwBE,qCACA,cAAC,GAAD,IACA,cAACO,EAAA,EAAD,IACA,eAAChO,EAAA,EAAD,CAAKF,IAAE,GAAS3L,WAAY,WAArB,2BACqB,wDADrB,2BAEqB,gDAFrB,mBAGc,OAHd,qCAIgC,SAJhC,0BAKqB,SALrB,GAAP,UAQI,cAAC8Z,EAAA,EAAD,CAAWhC,SAAS,KAApB,SACI,cAAC,GAAD,CAAOhQ,UAAWA,EAAWC,aAAcA,EAAc4N,SAAU,QAASqC,YAAeiB,EAAQhB,WAAW,YAGhHnQ,GAAc,cAAC,GAAD,2BAAYA,GAAZ,IAAwBC,aAAgBA,EAAc2U,eArEzD,WACjB3U,e,UC8FO6U,GA9GC,WAAO,IAAD,EAElB,EAAyFzO,qBAAWvG,IAKpG,GALA,EAAMiV,kBAAN,EAA0BhZ,WAA1B,EAAuCuE,QAAvC,EAAiDC,SAAjD,EAA4DP,UAA5D,EAAwEC,aAK7ClB,mBAAS,KAApC,mBAAMoS,EAAN,KAAcC,EAAd,KACYlY,EAAYmN,qBAAW1H,IAA7BxG,IA6BN,OA3BEkH,qBAAW,WACPtF,QAAQC,IAAI,mDACZD,QAAQC,IAAImX,GACZpX,QAAQC,IAAI,iDACZD,QAAQC,IAAId,GACZ,IAAIsY,EAAcC,YAAYvV,YAAO1B,YAAWC,GAAK,QAAUvB,EAAU,gBAAmB,SAAEiO,GAElF,IAAIgK,EAAQhK,EAAc7K,KAAKlD,KAAK,SAAEsY,GAGlC,OADA3X,QAAQC,IAAR,wBAA6B0X,EAAiBvT,OAAOhG,MAC9CuZ,EAAiBvT,UAG5BpE,QAAQC,IAAI,+EACZD,QAAQC,IAAImX,GAGZC,EAASD,MAGrB,OAAS,WACLpX,QAAQC,IAAI,6DACZwX,OAEJ,IAIF,qCACI,cAAC,GAAD,IACA,cAACO,EAAA,EAAD,IACA,cAAChO,EAAA,EAAD,CAAKF,IAAE,GAAS3L,WAAY,WAArB,2BACqB,wDADrB,2BAEqB,gDAFrB,mBAGc,QAHd,0BAIqB,QAJrB,GAAP,SAKA,cAAC8Z,EAAA,EAAD,CAAWhC,SAAS,KAApB,SAGA,eAAC9G,EAAA,EAAD,CAAOvH,QAAQ,WAAWkC,GAAI,CAAE0K,UAAY,EAAI6B,UAAY,QAAUhL,MAAQ,OAAQ4I,GAAK,EAAIrI,gBAAkB,WAAjH,UACI,cAAC5B,EAAA,EAAD,CAAKC,QAAQ,OAAO4B,WAAW,SAASL,eAAe,gBAAgB1B,GAAI,CAAEoK,GAAK,GAAlF,SACQ,cAACrK,EAAA,EAAD,CAAYjC,QAAQ,KAApB,0BAMJwP,EAAMzW,OAAS,GAEf,cAACqJ,EAAA,EAAD,CAAKC,QAAQ,OAAOmG,oBAAoB,mBAAmB6K,iBAAiB,4BAA4B3P,IAAK,EAAGxB,GAAI,CAAEoO,OAAS,qBAA/H,SAGQd,EAAM/X,KAAK,SAACgC,GACR,OAAO,cAAC,GAAD,CAAYA,OAAUA,SASxB,IAAjB+V,EAAMzW,QAEN,mCACI,cAACqJ,EAAA,EAAD,CAAKF,GAAI,CAAEuB,MAAQ,OAASgL,UAAY,QAAUzK,gBAAkB,YAAe3B,QAAU,OAASuB,eAAiB,SAAWK,WAAa,UAA/I,SACI,cAAC7B,EAAA,EAAD,CACAF,GAAI,CACAG,QAAU,OACVuB,eAAiB,SACjBK,WAAa,SACbC,aAAe,MACfC,gBAAiB,8CACjBC,eAAiB,OACjBC,cAAgB,cAChBL,gBAAkB,QAIlBP,MAAQ,OAbZ,SAgBI,cAACxB,EAAA,EAAD,CAAYC,GAAI,CAAEoC,SAAW,SAAWC,WAAa,MAAQ/B,MAAQ,UAAYgC,SAAW,eAA5F,6DAqB1B8O,GAAa,SAAC,GAAgB,IAAd7Z,EAAa,EAAbA,OAOd+D,EAAUC,eAiBd,OACI,cAAC2E,EAAA,EAAD,CACAmG,UAAU,cACVgL,YAAa,CAAElG,GAAG,SAAUmG,GAAG,UAC/BjR,QAAU,WACNnK,QAAQC,IAAR,2CAAgDoB,EAAOjD,IAAvD,kCACAgH,EAAQrF,KAAR,kBAAwBsB,EAAOjD,OALnC,SAMA,cAAC4L,EAAA,EAAD,CAAKF,GAAI,CAAGsF,EAAE,SAAU/D,MAAQ,OAASS,aAAe,MAAO0I,UAAW,mCAA1E,SACI,eAACxK,EAAA,EAAD,CAAMF,GAAI,CAAEG,QAAU,OAASqB,IAAM,IAAOd,cAAgB,OAA5D,UACI,cAAC6Q,GAAA,EAAD,CAAQvR,GAAI,CAAE6B,OAAS,GAAKN,MAAQ,GAAKoN,UAAY,SAAUP,OAAQ,mBAAoBC,IAAM9W,EAAOrD,SACxG,cAACgM,EAAA,EAAD,CAAKF,GAAI,CAAE4K,GAAK,QAAhB,SACI,eAAC7K,EAAA,EAAD,CAAYjC,QAAQ,KAAKkC,GAAI,CAAEoC,SAAW,WAAYoP,QAAW,EAAjE,cAA2Eja,EAAOvD,KAAlF,iBCgHLyd,GApPF,SAACxW,GAAW,IAAD,EAMxB,EAAiIuH,qBAAWvG,IAA1GQ,GAAlC,EAAMJ,cAAN,EAAsBnE,WAAtB,EAAkCuE,SAA8CN,GAAhF,EAA2CO,SAA3C,EAAsDG,UAAtD,EAAkEC,YAAlE,EAAgFX,WAAYC,EAA5F,EAA4FA,aAAeY,EAA3G,EAA2GA,iBAK3G,EAA0B9B,mBAAS,IAAnC,mBAAMoS,EAAN,KAAcC,EAAd,KACA,EAAyCrS,mBAAS,CAAElH,KAAO,GAAKC,IAAM,GAAKI,WAAa,KAAxF,mBAAMqd,EAAN,KAAqBC,EAArB,KACYtc,EAAYmN,qBAAW1H,IAA7BxG,IACA2I,EAAayQ,eAAbzQ,SAyIF,OAxIJ/G,QAAQC,IAAR,+CAAoD8G,IAElDzB,qBAAW,WAGT,sBAAC,4BAAAlG,EAAA,sEAC8BiD,YAASF,YAAO1B,YAAYC,GAAK,QAAUvB,EAAU,WAAaiD,YAAM,MAAQ,KAAO2E,KADrH,OACOyU,EADP,OACqIjZ,KAAK,GAAG6B,OAC1IpE,QAAQC,IAAIub,GAEZC,EAAgBD,GAJnB,0CAAD,GAOAxb,QAAQC,IAAI,mDACZD,QAAQC,IAAImX,GACZpX,QAAQC,IAAI,iDACZD,QAAQC,IAAId,GACZa,QAAQC,IAAI,mBACZD,QAAQC,IAAI8G,GAEZ/G,QAAQC,IAAI,uGAMZ,IAAIwX,EAAcC,YAAYvV,YAAO1B,YAAWC,GAAK,QAAUvB,EAAU,WAAc,SAAEiO,GAE7E,IAAIgK,EAAQhK,EAAc7K,KAAKlD,KAAK,SAAEsY,GAElC,OAAOA,EAAiBvT,UAG5BpE,QAAQC,IAAI,oGACZD,QAAQC,IAAI,0BACZD,QAAQC,IAAImX,GAuBZA,EArBA,SAA0BQ,EAAW7Q,GAkBjC,OAhBA/G,QAAQC,IAAI,2DACZD,QAAQC,IAAI2X,GACGA,EAAS3W,QAAQ,SAAE4W,GAE9B,IAF2C,EAEvCC,GAAc,EAFyB,cAItBD,EAAQhZ,SAJc,IAI3C,IAAI,EAAJ,qBAAsC,CAClC,GADkC,QACtBT,MAAQ2I,EAAS,CACzB+Q,GAAc,EACd,QAPmC,8BAW3C,OAAOA,KAMP4D,CAAgBtE,EAAQrQ,GAChC/G,QAAQC,IAAI,yCACZD,QAAQC,IAAImX,GAGZC,EAASD,MAGrB,OAAS,WACLpX,QAAQC,IAAI,6DACZwX,OAEJ,CAAC1Q,IA+DLzB,qBAAW,WACPtF,QAAQC,IAAImX,KACZ,CAAEA,IAGE,qCACI,cAAC,GAAD,IACA,cAACY,EAAA,EAAD,IACA,eAAChO,EAAA,EAAD,CAAKF,IAAE,GAAK3L,WAAY,WAAjB,2BACiB,wDADjB,2BAEiB,gDAFjB,GAAP,UAGA,cAAC8Z,EAAA,EAAD,CAAWhC,SAAS,KAAKnM,GAAI,CAAEoO,OAAS,sBAAwBtM,gBAAkB,WAAlF,SACI,cAAC5B,EAAA,EAAD,UACI,eAACA,EAAA,EAAD,WAEI,eAACA,EAAA,EAAD,CAAKF,GAAI,CAAEoJ,GAAK,QAAhB,UACQ,cAAClJ,EAAA,EAAD,CAAKmG,UAAU,uBAAuBrG,GAAI,CAAE6B,OAAQ,QAAUN,MAAQ,OAASO,gBAAkB,QAASyD,SAAW,UAArH,SAEQ,qBACI8I,IAAOqD,EAAard,WACpBuS,MAAO,CACH2F,UAAY,OACZhL,MAAO,OACP+M,UAAY,QACZC,eAAiB,UAErB1M,OAAO,YAInB,eAAC3B,EAAA,EAAD,CAAOF,GAAI,CAAEG,QAAQ,OAAQO,cAAc,MAASmB,OAAO,SAA3D,UAEQ,cAAC3B,EAAA,EAAD,CAAKmG,UAAU,kBAAkBrG,GAAI,CAAC6B,OAAS,OAAS6M,SAAW,IAAMvO,QAAU,QAAnF,SACI,eAACD,EAAA,EAAD,CAAKF,GAAI,CAAE2O,UAAY,MAAQvI,GAAI,QAAnC,UACI,cAAClG,EAAA,EAAD,CAAKF,GAAI,CAAEqC,WAAa,OAAxB,SACI,eAACgH,EAAA,EAAD,CAAO2B,UAAU,MAAMpK,KAAK,SAA5B,UACI,eAACb,EAAA,EAAD,CAAYC,GAAI,CAAEoC,SAAW,SAAWC,WAAa,OAArD,cAAgEqP,EAAa1d,KAA7E,QACA,cAAC,KAAD,CACAgM,GAAM,CAACoC,SAAW,SAAWnC,GAAK,UAAYqK,SAAW,WAAaC,IAAM,MAAQ,UAAY,CAAE0B,OAAS,UAAY3L,MAAQ,SAC/HD,QAAY,WAAQrD,EAAiBC,WAM7C,eAACoM,EAAA,EAAD,CAAO2B,UAAU,MAAjB,UACI,cAAC,KAAD,IACA,eAACjL,EAAA,EAAD,eAAeuN,EAAMzW,OAArB,qBAIZ,cAACqJ,EAAA,EAAD,CAAKmG,UAAU,iBAAiBrG,GAAI,CAAC6B,OAAS,OAAS6M,SAAW,IAAMvO,QAAU,QAAlF,SACI,eAACkJ,EAAA,EAAD,CAAO2B,UAAU,MAAM1B,QAAS,EAAGtJ,GAAI,CAAE2O,UAAY,MAAQvI,GAAK,QAAlE,UAEI,cAAChG,EAAA,EAAD,CACAtC,QAAQ,YACR6D,UAAW,cAAC,KAAD,IACXtB,QAAY5D,EAHZ,sBAQA,cAAC2D,EAAA,EAAD,CACAtC,QAAQ,WACRwC,MAAM,QACNqB,UAAW,cAAC,KAAD,IACXtB,QA7HhD,WACI,sBAAC,gCAAA/K,EAAA,sEAGW8C,EAASC,YAAO1B,YAAYC,GAAK,QAAUvB,EAAU,WAAaiD,YAAM,MAAQ,KAAO2E,IAHlG,SAIiC1E,YAASH,GAJ1C,cAIWI,EAJX,OAIoDC,KAAK,GAAGC,IAJ5D,SAKaC,YAAUH,GALvB,OAMOtC,QAAQC,IAAR,UAAe8G,EAAf,6CAOI2R,EAAiBtB,EAAM/X,KAAI,SAACwY,GAExB,IAAI8D,EAAe9D,EAAQhZ,QAAQoC,QAAO,SAACtB,GACvC,OAAOA,EAAOvB,KAAOod,EAAapd,OAK1C,OAFAyZ,EAAQhZ,QAAU8c,EACY,IAA3B9D,EAAQhZ,QAAQ8B,SAAekX,EAAQ/Y,SAAU,GAC7C+Y,KAGX7X,QAAQC,IAAIyY,GAKZvY,QAAQC,IACJsY,EAAerZ,KAAK,SAACuZ,GAGjB,OAFA5Y,QAAQC,IAAR,2BAAgC2Y,EAAcxa,MAC9C4B,QAAQC,IAAI2Y,GACLvW,YAASF,YAAQ1B,YAAYC,GAAF,gBAAgBvB,EAAhB,WAAoCiD,YAAO,MAAQ,KAAOwW,EAAcxa,OACzGyP,MAAM,SAACT,GAEJ,IAAIyL,EAAiBzL,EAAc7K,KAAK,GAAGC,IAG3CyM,YAAW4J,EAAiB,CAAEha,QAAU+Z,EAAc/Z,QAAUC,QAAU8Z,EAAc9Z,iBAGjG+O,MAAK,WACJ7N,QAAQC,IAAI,0CACZiO,OAAO,SAACtD,GACP5K,QAAQC,IAAI2K,MA7CxB,kDAmDO5K,QAAQC,IAAR,MACAD,QAAQC,IAAR,sDAA2D8G,IApDlE,yDAAD,IAwH4C,qCAgBxB,cAAC6N,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAACI,GAAI,GAAIC,cAAc,IAAI/E,UAAU,aAAarG,GAAI,CAACsK,SAAW,SAAUC,IAAM,GAAtG,SACQ,cAAC,GAAD,CAAOpO,UAAWA,EAAWC,aAAcA,EAAc4N,SAAU,UAAWqC,YAAeiB,EAAQhB,WAAW,mBASnInQ,GAAc,cAAC,GAAD,W,2BC/OZ2V,GAxBQ,SAAC,GAA0C,IAA5BC,EAA2B,EAAvCtR,UAA4BuR,EAAW,mBAGzD1X,EAAOkI,qBAAW1H,IACtB,OACI,mCAGI,cAAC,KAAD,2BAAWkX,GAAX,IAAiBC,OACb,SAACC,GACG,OAAG5X,EACU,cAACyX,EAAD,2BAAeC,GAAUE,IAG1B,cAAC,KAAD,CAAU9B,GAAG,aCJ9B+B,GAZM,WAEjB,IAAIzX,EAAW8H,qBAAY1H,IAE3B,OACI,+FAEKJ,EAASpG,IAFd,QC0CO8d,GA9BL,SAACnX,GAET,OACI,mCAEE,cAAC,IAAD,UACI,cAAC,GAAD,UACC,cAAC,GAAD,UACG,eAAC,KAAD,WAEI,cAAC,KAAD,CAAOoX,OAAK,EAACC,KAAK,IAAI7R,UAAWuO,KACjC,cAAC,KAAD,CAAOqD,OAAK,EAACC,KAAK,gBAAgB7R,UAAY0R,KAC9C,cAAC,GAAD,CAAgBE,OAAK,EAACC,KAAK,QAAQ7R,UAAWiQ,KAC9C,cAAC,GAAD,CAAgB2B,OAAK,EAACC,KAAK,SAAS7R,UAAWuQ,KAC/C,cAAC,GAAD,CAAgBqB,OAAK,EAACC,KAAK,WAAW7R,UAAWwQ,KAGjD,cAAC,GAAD,CAAgBoB,OAAK,EAACC,KAAK,qBAAqB7R,UAAY1M,KAC5D,cAAC,GAAD,CAAgBse,OAAK,EAACC,KAAK,mBAAmB7R,UAAYgR,iBCpC9Ec,IAASN,OACL,cAAC,GAAD,IACFO,SAASC,eAAe,W","file":"static/js/main.17485e6f.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport default function FirstField() {\r\n  const [value, setValue] = React.useState(null);\r\n\r\n  return (\r\n    <Autocomplete\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        if (typeof newValue === 'string') {\r\n          setValue({\r\n            title: newValue,\r\n          });\r\n        } else if (newValue && newValue.inputValue) {\r\n          // Create a new value from the user input\r\n          setValue({\r\n            title: newValue.inputValue,\r\n          });\r\n        } else {\r\n          setValue(newValue);\r\n        }\r\n      }}\r\n      filterOptions={(options, params) => {\r\n        const filtered = filter(options, params);\r\n\r\n        const { inputValue } = params;\r\n        // Suggest the creation of a new value\r\n        const isExisting = options.some((option) => inputValue === option.title);\r\n        if (inputValue !== '' && !isExisting) {\r\n          filtered.push({\r\n            inputValue,\r\n            title: `Add \"${inputValue}\"`,\r\n          });\r\n        }\r\n\r\n        return filtered;\r\n      }}\r\n      selectOnFocus\r\n      clearOnBlur\r\n      handleHomeEndKeys\r\n      id=\"free-solo-with-text-demo\"\r\n      options={top100Films}\r\n      getOptionLabel={(option) => {\r\n        // Value selected with enter, right from the input\r\n        if (typeof option === 'string') {\r\n          return option;\r\n        }\r\n        // Add \"xxx\" option created dynamically\r\n        if (option.inputValue) {\r\n          return option.inputValue;\r\n        }\r\n        // Regular option\r\n        return option.title;\r\n      }}\r\n      renderOption={(props, option) => <li {...props}>{option.title}</li>}\r\n      sx={{ width: 300 }}\r\n      freeSolo\r\n      renderInput={(params) => (\r\n        <TextField {...params} label=\"Free solo with text demo\" />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  {\r\n    title: 'The Lord of the Rings: The Return of the King',\r\n    year: 2003,\r\n  },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  {\r\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\r\n    year: 2001,\r\n  },\r\n  {\r\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\r\n    year: 1980,\r\n  },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  {\r\n    title: 'The Lord of the Rings: The Two Towers',\r\n    year: 2002,\r\n  },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  {\r\n    title: 'Star Wars: Episode IV - A New Hope',\r\n    year: 1977,\r\n  },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  {\r\n    title: 'Star Wars: Episode VI - Return of the Jedi',\r\n    year: 1983,\r\n  },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  {\r\n    title: 'Eternal Sunshine of the Spotless Mind',\r\n    year: 2004,\r\n  },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n","import { storage , db  } from \"./firebase\";\r\nimport { ref , getBlob , getBytes } from \"firebase/storage\";\r\nimport { collection, addDoc , deleteDoc , doc , setDoc , getDoc , getDocs , query , where , updateDoc , serverTimestamp , onSnapshot } from \"firebase/firestore\"; \r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// LEARNING HOW TO USE FIRESTORE CUSTOM OBJECTS -- START \r\n// imp note : custom obj + withConverter works fine as long as none of your objects properties have another object as its value ie as long as no ----  let obj =  { first : { innerFirst : 1 , innerSecond : 2}}\r\n// use the next (object literal) approach for such objects. ( IVE USED THIS APPROACH IN PRACTICE. CHECK IT OUT) -- this approach eliminates need for dataConverter interfaces\r\n\r\n    // a custom class Bakra\r\n    // export class Bakra{\r\n    //     constructor(name = \"\" , color = \"\" , sound = \"\" ){\r\n    //         this.name = name;\r\n    //         // this.details = { color : color,\r\n    //         //                 sound : sound };\r\n    //         this.color = color;\r\n    //         this.sound = sound;\r\n    //     }\r\n    // }\r\n\r\n    // Firestore data converter for bakra\r\n    // export const bakraConverter = {\r\n\r\n    //         toFirestore : (bakra) => {\r\n    //             return { name : bakra.name,\r\n    //                     // details : { \r\n    //                     //         color : bakra.color ,\r\n    //                     //         sound : bakra.sound \r\n    //                     //         }\r\n    //                     color : bakra.color,\r\n    //                     sound : bakra.sound,\r\n    //                     }\r\n    //                 },\r\n\r\n    //         fromFirestore : (snapshot , options) => {\r\n    //             const data = snapshot.data(options);\r\n    //             return new Bakra(data.name , data.color , data.sound );\r\n    //         }\r\n\r\n    //     }\r\n\r\n    // USING OUR SETUP TO ACTUALLY ADD THE OBJECT TO FIRESTORE ( CALL THE iife TO ACTUALLY ADD THE DATA )\r\n    // (async () => {\r\n    //     let docRef = doc(db , \"randColl2xxerdds\" , \"revisionDoc\"  ).withConverter(bakraConverter);\r\n    //     ( await setDoc( docRef  , new Bakra(\"Marty\" , \"Brown\" , \"Bakra sounds !!\") ) )\r\n    //     console.log(\"Successfully set yo !! \")\r\n    // })();\r\n\r\n// LEARNING HOW TO USE FIRESTORE CUSTOM OBJECTS -- END\r\n\r\n\r\n// Keep in mind the none of the functions below are constructors, they only act as constructors by manually creating an object (literal) and returning it. \r\n\r\n//Author \r\n\r\n// different values at different points of time in the background and avatar props\r\n// when user fills the form, it will contain path the asset ( widows file sytem path)\r\n// when the app queries the data from Firebase, it will be blank ( it is a button)\r\n// its image will be visible in a thumbnail in a form ( yet to be implemented )\r\nexport function Author(  { name , bio=\"\" , avatar=\"\", website=\"\" , twitter=\"\" , background = \"\" , uid = \"\"}){\r\n    return {\r\n        name : name,\r\n        bio : bio,\r\n        avatar : avatar,\r\n        website : website,\r\n        twitter : twitter,\r\n        background : background,\r\n        uid : uid,\r\n    }\r\n}\r\n\r\n// Tag \r\n// shouldnt all the default values be null ??? \r\nexport function Tag({name=\"\" , uid=\"\" , bio=\"\" , background=\"\" }){\r\n    return{\r\n         name : name,\r\n         uid : uid,\r\n         bio : bio,\r\n         background : background,\r\n        }\r\n}\r\n\r\n// User \r\n// shouldnt all the default values be null ???\r\n// no need of displayName in the User object schema. we will get the displayName from the authContext  \r\nexport function User( {userName=\"\", uid =\"\" , bio =\"\" , avatar=\"\" , background=\"\" }){\r\n    return{\r\n        userName : userName,\r\n        uid : uid,\r\n        bio : bio,\r\n        avatar : avatar,\r\n        background : background,\r\n    }\r\n}\r\n\r\n// Card\r\nexport function Card({ title = \"\" , url = \"\" , uid =\"\" , authorsArr = [ ] , timestamp=\"\" , tagsArr= [ ] , inQueue=false , notes=\"\"}){\r\n    return{\r\n        title : title,\r\n        url : url,\r\n        authorsArr : authorsArr,\r\n        timestamp : timestamp,\r\n        tagsArr : tagsArr,\r\n        inQueue : inQueue,\r\n        notes  : notes,\r\n        uid : uid\r\n    }\r\n}\r\n  \r\n// FUNCTIONS ---------------------------------------------------------\r\n\r\n// creates an author ie. adds it to the author pool and returns this authors id. ( not ref ( cause the id helps us during querying ie. filtering))\r\n// create and get when an author does not exist in the author pool. // only get when the author already exists in the pool.\r\n// make sure that you only pass this authors that you are sure dont exist\r\n\r\n// takes in an array of tags, moulds it as necessary and sets it to Firebase. \r\n// contained the diffing algo too ie. an algo that will find only the newly created Tags \r\n// by nature, it is an async function.\r\n// works, checked. the Promises.all() part was the main uncertainty.\r\n// returns arr[newlyCreatedTagObjects .... ] and side effect -- creates the new tags and sets them to firebase\r\nexport async function addTagsToFirebase(formValues , optionsValues , userUid ){\r\n\r\n    let tagsArr = formValues.tagsArr.map( (tag) => ({ ...tag , name : tag.name.trim() }) )   \r\n    // these are the tags included by the user\r\n    // we will trim() the value of the name key of the tag\r\n    // this will not let eg. \"business\" be considered equal to \"business   \"\r\n    let tagsOptionsArr = optionsValues.tagsOptionsArr; // all options from pool\r\n\r\n    let newTagsArr = [ ];    // arr of included tags that do not exist ( they have to be created and set to Firebase tagsPool)\r\n\r\n    // if no existing options.... all tags are new tags. \r\n    if(optionsValues == null){\r\n        newTagsArr = tagsArr; \r\n    }\r\n    // no tags selected by uesr...... dont do anything, just return.\r\n    else if(tagsArr === [ ]){\r\n        newTagsArr =  []; \r\n        return [ ]\r\n    }\r\n    // non edge case .... continue....\r\n    else{\r\n        tagsArr.forEach( (tagObj) => {\r\n            if( tagsOptionsArr.find( (tagOption) => tagOption.name === tagObj.name) === undefined ){\r\n                // if a tag from the tagsArr does not exist in the optionsArr , add it to NewTagsObjArr\r\n                newTagsArr.push(tagObj);  \r\n            }\r\n        })\r\n        console.log(\"New tags -- yet to be created\");\r\n        console.log(newTagsArr);\r\n    }\r\n    \r\n   try{\r\n    let newTagObjArr = [ ]; // init. will eventually  be filled with tagObjects. \r\n    \r\n    await Promise.all( newTagsArr.map( (newTag) => {\r\n        let tagObject = Tag({ name : newTag.name , uid : uuidv4() } );   // returns a formatted tag object \r\n        console.log(\"a Tag Object\")\r\n        console.log(tagObject);\r\n        newTagObjArr.push(tagObject);\r\n        return addDoc( collection( db , \"users\" ,userUid , \"tagPool\") , tagObject ); // setting the object to the \r\n         // addDoc returns a Promise\r\n     }))\r\n     // once the Promise.all() resolves\r\n        console.log(`${newTagObjArr.length} new tags set to firebase`);\r\n        console.log(\"newly created tags below\");\r\n        console.log(newTagObjArr);\r\n\r\n        // once all the tags are set to Firebase, we return the stuff below. \r\n     return( newTagObjArr);  \r\n   }\r\n   catch(error){\r\n        console.log(error);\r\n   }\r\n}\r\n\r\n// will return an array of tags that already existed. ie. ones that need to be included. not created. \r\n\r\nexport function getExistingTags( formValues , optionsValues ){\r\n    // result needed --> existing inputs \r\n    let existingTags = formValues.tagsArr.map( (userInput) => {\r\n        // if a userInput item already exists in the options array, include it, else, returned undefined. \r\n        // we will filter out the undefined later\r\n        let match = undefined;  // assuming that the userInput does not already exist in the options\r\n        for(let option of optionsValues.tagsOptionsArr){\r\n            if(userInput.name === option.name){\r\n                match = option; \r\n                break;\r\n                // as soon as you find a userInput in the options arr, break.\r\n            }\r\n        }\r\n        // if we dont find userInput in the options arr, it doesnt preexist. the match will still be undefined\r\n        // match will be returned\r\n\r\n        return match;\r\n    })\r\n\r\n    // filter out the undefined entries of the existing array\r\n    existingTags = existingTags.filter( ( exTag) => exTag != undefined);\r\n    return existingTags;\r\n}\r\n\r\n\r\nlet tagsArr = [ { name : \"business\" , uid : \"eee333xxx\"} , { name : \"self Help\" , uid : \"rrr333jjj\"} , { name : \"computing\" , uid : \"hhh555fff\"}];\r\nlet tagOptionsArr = [ { name : \"business\" } , { name : \"borat\"} , { name : \"I going to America\"}];\r\n// 1st option for calling the async function -- call the async fn in an async iife\r\n// (async () => {\r\n//     try{\r\n//         await addTagsToFirebase(tagsArr , tagOptionsArr);\r\n//         console.log(\"call successful, async fn in async iife style\")\r\n//     }\r\n//     catch(error){\r\n//         console.log(error)\r\n//     }\r\n// })\r\n\r\n// second option for calling the async function -- promise style\r\n// addTagsToFirebase(tagsArr).then(() => {console.log(\"call successful promise style\") });\r\n\r\n// takes in an array of authors and sets it to firebase.  \r\n// the fn in exactly the same as the addTagsToFirebase fn. \r\n// call it in the exact same way.\r\n// make sure that you only pass thqis authors that you are sure dont exist\r\n\r\n// use this to manually set tags. yo!! . \r\n// ( async () => {\r\n//     try{\r\n//         let tagObject = Tag({name : \"Pisciculture\" , uid : uuidv4() });   // returns a formatted tag object  \r\n//         console.log(\"Tag object created. view below\")\r\n//         console.log(tagObject);\r\n//         let tagSetter = await addDoc( collection( db , \"users\" ,userUid , \"tagPool\") , tagObject );\r\n//         console.log(\"set tag successfully to firebase\");\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// })\r\n\r\n\r\n// this function is wrong. update this to the code style of tags\r\nexport async function addAuthorsToFirebase(formValues , optionsValues , userUid ){\r\n\r\n    let authorArr = formValues.authorsArr.map( (author) => ({ ...author , name : author.name.trim() }) );   // authors entered by the user\r\n    // these are the authors included by the user\r\n    // we will trim() the value of the name key of the tag\r\n    // this will not let eg. \"business\" be considered equal to \"business   \"\r\n    let authorOptionsArr = optionsValues.authorOptionsArr; // all options from pool\r\n    \r\n    let newAuthorArr = [ ];    // arr of included tags that do not exist ( they have to be created and set to Firebase tagsPool)\r\n\r\n    // if no existing options.... all tags are new tags. \r\n    if(optionsValues == null){\r\n        newAuthorArr = authorArr; \r\n    }\r\n    // no tags selected by uesr...... dont do anything, just return blank array .\r\n    else if(authorArr === [ ]){\r\n        newAuthorArr = [ ]\r\n        return newAuthorArr;\r\n    }\r\n    // non edge case .... continue....\r\n    else{\r\n        authorArr.forEach( (authorObj) => {\r\n            if( authorOptionsArr.find( (authorOption) => authorOption.name === authorObj.name) === undefined ){\r\n                // if a tag from the tagsArr does not exist in the optionsArr , add it to NewTagsObjArr\r\n                newAuthorArr.push(authorObj); \r\n            }\r\n        })\r\n        console.log(\"New authors -- yet to be created\");\r\n        console.log(newAuthorArr);\r\n    }\r\n    \r\n   try{\r\n    let newAuthorObjArr = [ ]; // init. will eventually  be filled with tagObjects. \r\n    \r\n    await Promise.all( newAuthorArr.map( (newAuthor) => {   \r\n        let authorObject = Author({ name : newAuthor.name , uid : uuidv4() } );   // returns a formatted tag object \r\n        console.log(\"an author object\")\r\n        console.log(authorObject);\r\n        newAuthorObjArr.push(authorObject);        // as compared to newAuthor\r\n        return addDoc( collection( db , \"users\" , userUid , \"authorPool\") , authorObject ); // setting the object to the \r\n         // addDoc returns a Promise\r\n     }))\r\n     // once the Promise.all() resolves\r\n        console.log(`${newAuthorObjArr.length} new authors set to firebase`);\r\n        console.log(\"newly created authors below\");\r\n        console.log(newAuthorObjArr);\r\n\r\n        // once all the tags are set to Firebase, we return the stuff below. \r\n     return( newAuthorObjArr);  \r\n   }\r\n   catch(error){\r\n        console.log(error);\r\n   }\r\n}\r\n\r\n// will return an array of authors that already existed. ie. ones that need to be included. not created. \r\n\r\nexport function getExistingAuthors( formValues , optionsValues ){\r\n    // result needed --> existing inputs \r\n    let existingAuthors = formValues.authorsArr.map( (userInput) => {\r\n        // if a userInput item already exists in the options array, include it, else, returned undefined. \r\n        // we will filter out the undefined later\r\n        let match = undefined;  // assuming that the userInput does not already exist in the options\r\n        for(let option of optionsValues.authorOptionsArr){\r\n            if(userInput.name === option.name){\r\n                match = option; \r\n                break;\r\n                // as soon as you find a userInput in the options arr, break.\r\n            }\r\n        }\r\n        // if we dont find userInput in the options arr, it doesnt preexist. the match will still be undefined\r\n        // match will be returned\r\n\r\n        return match;\r\n    })\r\n\r\n    // filter out the undefined entries of the existing array\r\n    existingAuthors = existingAuthors.filter( ( exAuthor) => exAuthor != undefined);\r\n    return existingAuthors;\r\n}\r\n\r\nlet authorsArr = [{ name : \"Chetan Bhagat\" , uid : \"333mistakes\"} , { name : \"cslewis\" , uid : \"eelewisx33xxx\"}];\r\n\r\n// manually setting cards\r\n// ( async () => {\r\n//     console.log(\"Trying to set the card manually\");\r\n//     let aa = [ Author({ name : \"Silvan\" , uid : \"12eeddxx\"}) , Author({ name : \"Chintu\" , uid : \"irun\" })];\r\n//     let ta = [ Tag({ name : \"food\" , uid : \"234edde\" }) , Tag({  name : \"trees\" , uid : \"eddit2233\" })];\r\n//     let myCard = Card(\r\n//         { url : \"formValues\" ,\r\n//         title : \"Eans Friends\" , \r\n//         authorsArr : aa,\r\n//         tagsArr : ta,\r\n//         notes : \"a note to Eans Friends yo!!\",\r\n//         inQueue : false}\r\n//         )\r\n//     console.log(myCard)\r\n//     await setDoc (   (db , \"users\" , userUid , \"cards\" , \"arandxxcard\")  , myCard  );\r\n//     console.log(\"a card set manually\")\r\n// })\r\n\r\n// use this to manually set authors. yo!! . \r\n// ( async () => {\r\n//     try{\r\n//         let authorObject = Author({name : \"Herman Melville\" , uid : uuidv4() });   // returns a formatted tag object  \r\n//         let authorSetter = await addDoc( collection( db , \"users\" ,userUid , \"authorPool\") , authorObject );\r\n//         console.log(\"set author successfully to firebase\");\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// })\r\n\r\n// ( async () => {\r\n//     try{\r\n//         await addAuthorsToFirebase(authorsArr);\r\n//         console.log(\"Done creating and setting new authors to firebase\")\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// })()\r\n\r\n// (async () => {\r\n//     try{\r\n//         await addAuthorsToFirebase(authorsArr);\r\n//         console.log(\"call successful, async fn in async iife style\")\r\n//     }\r\n//     catch(error){\r\n//         console.log(error)\r\n//     }\r\n// })();\r\n\r\nexport async function updateTag(userUid){\r\n    await getDocs( query( collection(db , \"users\" , userUid , \"tagsPool\") ,  ) )\r\n}\r\n\r\nexport function updateAuthor(){\r\n    \r\n}\r\n\r\n// removes the tag from the current cards tagList. card may get orphaned (moved into queue) if no tags are left \r\n// tag is retained in the tagPool\r\n//  export function excludeTag(){\r\n//     i dont think this is needed\r\n// }\r\n\r\n// removes the author from the current cards authorList. card may get orphaned (moved into queue) if no tags are left \r\n// author is retained in the tagPool\r\n// export function excludeAuthor(){\r\n//     i dont think this is needed \r\n// }\r\n\r\n// deletes the author from the tag(topic) pool and removes it from all cards authorLists.\r\n// orphans the cards that had it as the sole tag(topic) ie. such cards move into the queue \r\nexport function deleteTag(){\r\n\r\n}\r\n\r\n// deletes the author from the author pool and removes it from all cards authorLists\r\n// and orphans the cards that had that as the sole author ie. such cards move into the queue \r\nexport function deleteAuthor(){\r\n    \r\n}\r\n\r\n// deletes the card. warning shown by ui component ofc.\r\nexport async function deleteCard(userUid , cardUid){\r\n    try{\r\n        let xquery = query( collection( db , \"users\" , userUid , \"cards\") , where(\"uid\" , \"==\" , cardUid) ) \r\n        let targetDocRef = (await getDocs( xquery)).docs[0].ref;\r\n\r\n        await deleteDoc(targetDocRef);\r\n        console.log(`${cardUid} card deleted successfully`)\r\n    }\r\n    catch(error){\r\n        console.log(`could not delete card ${cardUid}`)\r\n    }\r\n}\r\n\r\n// storage ref format userUid/author \r\n// export async function uploadFileToStorage(){\r\n//     const mountainsRef = ref(storage, `${userUid}/`);\r\n// }\r\n\r\n// console.log(db);\r\n// console.log(storage);\r\n\r\n// testing how to pull files down from Firebase storage\r\n// let trialRoute = \"4qUcXB2StuhQ7wWQEY5cMLF4zP42/userBioAssets/background/IMG_20220124_170114_1.jpg\"\r\n// let storagePathRef = ref( storage , trialRoute);\r\n// ( async() => {\r\n//     let blobData = await getBlob( storagePathRef);\r\n//     console.log(blobData)\r\n// })(); \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { Google } from \"@mui/icons-material\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth, GoogleAuthProvider ,signInWithPopup,  onAuthStateChanged, signOut } from \"firebase/auth\"\r\nimport { firebaseConfig }  from \"../secrets/firebaseConfig\";\r\nimport { getFirestore , collection, addDoc , deleteDoc , doc , setDoc , getDoc , getDocs , query , where , updateDoc , serverTimestamp , onSnapshot  } from \"firebase/firestore\"; \r\nimport { getStorage } from \"firebase/storage\";\r\nimport { User } from \"./firestoreProductionFunctions\";\r\n\r\n\r\n  // Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(); // auth object. our portal to the firebase auth service\r\nexport const db = getFirestore();\r\nexport const storage = getStorage();\r\n\r\nexport const signInWithFirebase = async () => {\r\n  try{\r\n    const provider = new GoogleAuthProvider();\r\n    let result = await signInWithPopup( auth , provider );  \r\n\r\n    const credential = GoogleAuthProvider.credentialFromResult( result);\r\n    const token = credential.accessToken;   // google OAuth token. \r\n    const { displayName  , email , uid  } = result.user; // signed in use info\r\n\r\n    console.log(`${displayName} ${email} ${uid}`);\r\n\r\n    let docSnap = await getDoc( doc( db  , \"users\" , uid ) );\r\n    console.log(docSnap.data())\r\n    if(docSnap.exists() === false){\r\n      console.log(\"The user does not exist , we need to add it to firestore\")\r\n      // adding the logged in user to Firestore.\r\n      let userObj = User({ displayName , email , uid});\r\n      await setDoc ( doc( db , \"users\"   , uid )  , { userData : userObj } );\r\n      console.log(`new user ${displayName} set to Firestore`)\r\n    }\r\n  }\r\n  catch(error){\r\n    console.log(error.message);\r\n  }\r\n\r\n}\r\n\r\nexport const signout = async () => {\r\n  try{\r\n    let user = await signOut(auth);\r\n    console.log(user)\r\n  }\r\n  catch(error){\r\n    console.log(error.message);\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n","export const firebaseConfig = {\r\n  apiKey: \"AIzaSyAJHMXckSDjxsHE9VNBrq-yGwmJvrd7Uq4\",\r\n  authDomain: \"atlas-clone-c55e4.firebaseapp.com\",\r\n  projectId: \"atlas-clone-c55e4\",\r\n  storageBucket: \"atlas-clone-c55e4.appspot.com\",\r\n  messagingSenderId: \"847869429007\",\r\n  appId: \"1:847869429007:web:e4662680562689e0e4ea7a\"\r\n};\r\n\r\n","import React , { useState , createContext , useEffect } from 'react'\r\nimport { auth , db } from \"../firebase/firebase\";\r\nimport { onAuthStateChanged } from \"firebase/auth\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport { collection, addDoc , deleteDoc , doc , setDoc , getDoc , getDocs , query , where , updateDoc , serverTimestamp , onSnapshot } from \"firebase/firestore\"; \r\nimport { User } from \"../firebase/firestoreProductionFunctions\"\r\nexport const authContext = createContext();\r\n\r\nconst AuthContext = (props) => {\r\n\r\n    let [ loading , setLoading ] = useState(true);\r\n    let [ user , setUser ] = useState();  \r\n\r\n    const history = useHistory();\r\n    function routeChange(){\r\n        history.push(\"/main\");\r\n      }\r\n    \r\n    useEffect( () => {\r\n        if(user != null){\r\n            console.log(\"inside authContext useEffect , checking the login data\");\r\n            let { displayName , email , uid , photoURL } = user; \r\n            console.log({ displayName , email , uid , photoURL });\r\n        }\r\n    } , [ user ])\r\n\r\n    \r\n    // this useEffect will only run once. ie. after the first render. \r\n    useEffect( () => {\r\n        \r\n        let unsub = onAuthStateChanged( auth , async (userDetails) => {\r\n            if(userDetails){\r\n                let { displayName , email , uid , photoURL } = userDetails; \r\n                console.log(`${displayName} has logged in`);\r\n                console.log(userDetails);\r\n                \r\n                setUser({ displayName , email , uid , photoURL})\r\n                routeChange(); \r\n\r\n                // if userDetils arent  already in firestore, add them. \r\n                let userDetailsRef = doc(db , \"users\" , uid );\r\n                if((await getDoc(userDetailsRef)).exists() === false ){\r\n                    let userObj = User({  displayName , uid , email });\r\n                    await setDoc(userDetailsRef , { userDetails : userObj }  );\r\n                    console.log(\"User set successfully in Firestore. from authContext\")\r\n                }\r\n            }\r\n            else if(userDetails === null){\r\n                console.log(\"setting user to null\")\r\n                setUser(null);   // when the user is not logged in, the userDetails are null\r\n            }\r\n \r\n            setLoading(false);\r\n            \r\n        })\r\n\r\n        // clean-up function -- unsubscribes the onAuthStateChanged listener just before the component unmounts. \r\n        return () => {\r\n            unsub();\r\n        }\r\n\r\n    } , [] )\r\n\r\n\r\n    return (\r\n            <authContext.Provider value = { user } > \r\n\r\n                {/* if not loading, render the children , regardless of whether the user is logged in or not */}\r\n                {/* if the user is not logged in , the ProtectRoute will automatically redirect the user to the landing page ( which has the login option) */}\r\n                { !loading && props.children }\r\n\r\n            </authContext.Provider>  \r\n            \r\n    )\r\n}\r\n\r\nexport default AuthContext;\r\n","import React , { useState , useEffect } from 'react';\r\nimport { createContext } from \"react\";\r\n\r\nexport const formsContext = createContext();\r\n\r\nconst FormsContext = (props) => {\r\n    // This context only deals with the Forms bundle. Individual forms may communicate with their children / subcomponents using their own contexts. ( implemented privately )\r\n    // does 2 things. 1. is a home to the formProps ie. state 2. distributes the menu (helper functions)\r\n\r\n    let [ formProps , setFormProps ] = useState();  \r\n    \r\n    useEffect( () => {\r\n      console.log(\"Inside the forms context. check the current state of formProps\")\r\n      console.log(formProps);\r\n    } , [formProps])\r\n\r\n    // will let you edit a particular author profile.\r\n    let authorProfile = (authorUid) => {\r\n        setFormProps( { ...formProps , formType : \"authorBioForm\" , authorUid : authorUid}  )\r\n      }\r\n      \r\n      let addCard = () => {\r\n        setFormProps({ ...formProps , formType : \"cardForm\"})\r\n      }\r\n      \r\n      // editCard action will edit a certain card. The triggering component ( usually a generic card) needs to \r\n      // tell the cardForm component which card its wants to edit. ie. it needs to communicate the uid of the \r\n      // card that needs to be edited. This is what i mean by editCardUid \r\n      // while calling editCard , you have to compulsarily pass it a the uid of the card that you want to edit.\r\n      let editCard = (editCardUid) => {\r\n        console.log(`Someone has clicked on editCard  !!! seems like someone wants to edit a card with uid ${editCardUid} `)\r\n        setFormProps( { ...formProps , formType : \"cardFormEdit\" , mode : \"edit\" , editCardUid : editCardUid } )\r\n      }\r\n\r\n      let closeForm = () => {   // generic helper that closes the form by stopping it from conditionally rendering. \r\n          setFormProps();\r\n      }\r\n\r\n      // editUserUid refers to the uid of the user that needs to be edited.\r\n      let userBioForm = (editUserUid) => {\r\n        setFormProps( { ...formProps , formType : \"userBioForm\" , editUserUid : editUserUid } )\r\n      }\r\n\r\n      let showConfirmDelete = (cardUid) => {\r\n        setFormProps({ ...formProps , formType : \"confirmDelete\" , cardUid : cardUid})\r\n      }\r\n\r\n      let displayTopicForm = (topicUid) => {\r\n        setFormProps({ ...formProps , formType : \"topicForm\" , topicUid : topicUid});\r\n      }\r\n\r\n      let displayDeleteAcknowlegement = () => {\r\n        setFormProps( {})\r\n      }\r\n     \r\n\r\n    return (\r\n        <formsContext.Provider value={ { authorProfile , showConfirmDelete , addCard, editCard , closeForm , userBioForm , formProps , setFormProps , displayTopicForm } }> \r\n            { props.children }\r\n        </formsContext.Provider>\r\n    )\r\n}\r\n\r\nexport default FormsContext\r\n","import React , { useEffect , useRef } from 'react';\r\nimport { Autocomplete , TextField , Chip } from '@mui/material';\r\nimport { LocalConvenienceStoreOutlined } from '@mui/icons-material';\r\n\r\nexport const AuthorAutocomplete = ({ formValues , setFormValues , optionsValues , setOptionsValues }) => {\r\n   \r\n  let authorsOptionsArr = optionsValues.authorOptionsArr;  \r\n  console.log(authorsOptionsArr);\r\n    // just checking if adding and removing a tag actually works. It does. we cannot reliably do it outside useEffect because of the async nature of setState. \r\n    // useEffect( () => {\r\n    //   console.log(authorsOptionsArr)\r\n    //   console.log(formValues.authorsArr)\r\n    // } , [ formValues.authorsArr])\r\n\r\n    return (\r\n    // uncontrolled mui autocomplete component \r\n    <Autocomplete\r\n    multiple\r\n    id=\"tags-filled\"\r\n\r\n    // in uncontrolled components, we do not have to provide an explicit value prop. ( cause uncontrolled ie. state is held internally)\r\n    defaultValue={ formValues.authorsArr != null ? formValues.authorsArr.map( (author) => (author.name) ) : null }\r\n    renderTags={(value, getTagProps) =>\r\n      value.map((option, index) => (\r\n        <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\r\n      ))\r\n    }\r\n    onChange = { ( event , value , reason , details ) => { \r\n      // schema of value returned by autocomplete, in this case is [ optionName , optionName ] \r\n      // ie. an array of strings. \r\n      console.log(\"checking the schema of the value returned by autocomplete (authorAutocomplete) \")\r\n      console.log(value);\r\n      console.log(\"reformatting values yo !!\");\r\n      let authorsArrValue =  value.map( (authorName) => ({ name : authorName}) ); // reformatting to meet the predecided schema.\r\n      \r\n      setFormValues( {...formValues , authorsArr : authorsArrValue } );\r\n     }}\r\n\r\n    // options props start\r\n    options={ optionsValues.authorOptionsArr.map( (authorObj) => (authorObj.name)) } // { name : \"optionsPqr\" , uid : er234dd }\r\n    // getOptionLabel not needed //getOptionLabel={ (option) => (option) }  // this was the problem. works now. ( it was missing ) \r\n\r\n    // other props start\r\n    freeSolo\r\n    renderInput={(params) => (\r\n      <TextField\r\n        {...params}\r\n        variant=\"filled\"\r\n        label=\"Authors\"\r\n        placeholder=\"Favorites\"\r\n      />\r\n    )}\r\n    />\r\n\r\n)\r\n}\r\n\r\n\r\n\r\nexport default AuthorAutocomplete;\r\n","import { React , useState } from 'react';\r\nimport { Autocomplete , TextField , Chip , Typography } from '@mui/material';\r\nimport { LocalConvenienceStoreOutlined } from '@mui/icons-material';\r\nimport { createFilterOptions } from '@mui/material/Autocomplete';\r\nimport { useEffect } from \"react\";\r\nimport { Card , addTagsToFirebase, getExistingTags , addAuthorsToFirebase , Tag , Author } from \"../firebase/firestoreProductionFunctions\";\r\nimport { shouldBeInQueue } from \"./forms/cardForm.jsx\";\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport const TopicAutocomplete = ({ formValues , setFormValues , optionsValues , setOptionsValues , inputValue , setInputValue }) => {\r\n  let topicOptionsArr = optionsValues.tagsOptionsArr; // a list of available topics. \r\n\r\n  // just checking if adding and removing a tag actually works. It does. we cannot reliably do it outside useEffect because of the async nature of setState.\r\n  // useEffect( () => {\r\n  //   console.log(formValues.tagsArr)\r\n  // } , [ formValues.tagsArr])\r\n\r\n  // currently setup as controlled. turn it into uncontrolled once you figure out uncontrolled end to end. YO !!!!\r\n    return (\r\n    // uncontrolled mui autocomplete component \r\n    <Autocomplete\r\n    multiple\r\n    id=\"tags-filled\"\r\n\r\n    // in uncontrolled components, we do not have to provide an explicit value prop. ( cause uncontrolled ie. state is held internally)\r\n    defaultValue={ formValues.tagsArr != null ? formValues.tagsArr.map( (tag) => (tag.name) ) : null }\r\n    renderTags={(value, getTagProps) =>\r\n      value.map((option, index) => (\r\n        <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\r\n      ))\r\n    }\r\n    onChange = { ( event , value , reason , details ) => {                                                          \r\n      // schema of value returned by autocomplete, in this case is [ optionName , optionName ] \r\n      // ie. an array of strings. \r\n      console.log(\"checking the schema of the value returned by autocomplete (authorAutocomplete) \")\r\n      console.log(value);\r\n      console.log(\"reformatting values yo !!\");\r\n      let tagsArrValue =  value.map( (tagName) => ({ name : tagName}) ); // reformatting to meet the predecided schema.\r\n      \r\n      setFormValues( {...formValues , tagsArr : tagsArrValue } );\r\n     }}\r\n\r\n    // options props start\r\n    options={ topicOptionsArr.map( (tagObj) => (tagObj.name)) } // { name : \"optionsPqr\" , uid : er234dd }\r\n    // getOptionLabel not needed //getOptionLabel={ (option) => (option) }  // this was the problem. works now. ( it was missing ) \r\n\r\n    // other props start\r\n    freeSolo\r\n    renderInput={(params) => (\r\n      <TextField\r\n        {...params}\r\n        variant=\"filled\"\r\n        label=\"Topics\"\r\n        placeholder=\"Favorites\"\r\n      />\r\n    )}\r\n    />\r\n    )\r\n}\r\n\r\nexport default TopicAutocomplete;\r\n","import * as React from 'react';\r\nimport { useEffect } from \"react\";\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport default function TitleAutocomplete({ formValues , setFormValues , optionsValues , setOptionsValues }) {\r\n    let titleOptionsArr = optionsValues.titleOptions; // arr of title options.\r\n\r\n    // just checking if adding and removing a tag actually works. It does. we cannot reliably do it outside useEffect because of the async nature of setState.\r\n    // useEffect( () => {\r\n    //   console.log(formValues.title)\r\n    // } , [formValues.title])\r\n\r\n    // titleOptionsArr.map((option) => option.title )\r\n  \r\n    return (\r\n    <Autocomplete\r\n      value={formValues.title}\r\n      onChange={(event, newValue) => {\r\n        if (typeof newValue === 'string') {\r\n          setFormValues({\r\n            ...formValues , \r\n            title: newValue,\r\n          });\r\n        } else if (newValue && newValue.inputValue) {\r\n          setFormValues({\r\n            ...formValues,\r\n            title: newValue.inputValue,\r\n          });\r\n        } else { \r\n          setFormValues({...formValues , newValue });\r\n        }\r\n            // check if it worksf\r\n            console.log(formValues.authorsArr)\r\n      }}\r\n      filterOptions={(options, params) => {\r\n        const filtered = filter(options, params);\r\n\r\n        const { inputValue } = params;\r\n        // Suggest the creation of a new value\r\n        const isExisting = options.some((option) => inputValue === option.title);\r\n        if (inputValue !== '' && !isExisting) {\r\n          filtered.push({\r\n            inputValue,\r\n            title: `Add \"${inputValue}\"`,\r\n          });\r\n        }\r\n\r\n        return filtered;\r\n      }}\r\n      selectOnFocus\r\n      clearOnBlur\r\n      fullWidth = { true }\r\n      handleHomeEndKeys\r\n      id=\"free-solo-with-text-demo\"\r\n      options={titleOptionsArr.map((option) => option.title )}\r\n      getOptionLabel={(option) => {\r\n        // Value selected with enter, right from the input\r\n        if (typeof option === 'string') {\r\n          return option;\r\n        }\r\n        // Add \"xxx\" option created dynamically\r\n        if (option.inputValue) {\r\n          return option.inputValue;\r\n        }\r\n        // Regular option\r\n        return option.title;\r\n      }}\r\n      renderOption={(props, option) => <li {...props}>{option.title}</li>}\r\n      sx={{ width: 300 }}\r\n      freeSolo\r\n      renderInput={(params) => (\r\n        <TextField {...params} label=\"Title\" />\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import Box from \"@mui/material/Box\"\r\nimport { useState , useContext , createContext } from \"react\";\r\nimport { TextField } from \"@mui/material/\";\r\nimport Button from '@mui/material/Button';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport Paper from \"@mui/material/Paper\"\r\nimport Typography from '@mui/material/Typography';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport { useEffect } from \"react\";\r\n// import { createOrUpdateCard , Card } from \"../../firebase/firestoreProductionFunctions\";\r\nimport { authContext } from \"../../contexts/authContext\";\r\nimport { db } from \"../../firebase/firebase\"\r\nimport { getDocs , getDocsFromServer ,  doc , collection , query , where , addDoc ,  setDoc , updateDoc , getDoc , serverTimestamp } from \"firebase/firestore\"\r\nimport { formsContext } from \"../../contexts/formsContext\";\r\nimport { AuthorAutocomplete } from \"../AuthorAutocomplete\";\r\nimport { TopicAutocomplete } from \"../TopicAutocomplete\";\r\nimport TitleAutocomplete from \"../TitleAutocomplete\";\r\nimport { Card , addTagsToFirebase, getExistingTags , addAuthorsToFirebase , getExistingAuthors  , Tag , Author } from \"../../firebase/firestoreProductionFunctions\";\r\nimport { v4 as uuidv4 } from 'uuid';   \r\nimport  axios  from \"axios\";\r\n\r\n// cardForm is a single form with multiple parts. the parts are called first,second,acknowlegement.\r\n// i have used the controlled components approach. and split the form into 4 parts cardForm , first,second,acknowlegement.\r\n// cardForm is the smart component with the state and the handling logic.\r\n// cardForm (the smart container) is always rendered and first/second/acknowlegement are rendered conditionally depending upon where the user has reached in the form \r\n// think of first/second/acknowlegement as different pages in the form. \r\n\r\n// the cardFrom can be used in 2 modes. ie. the \"add\" mode and the \"edit\" mode\r\n// \"add\" mode --> will run the user through first,second, acknowlegement parts. This mode is supposed to provide ui to add a new card \r\n// \"edit\" mode --> will run the user only through second, acknowlegement parts, with second part in editMode ie. editMode has save , delete buttons + no need to change the \"Add a card\" statement to \"Edit card\" cause it will be skipped altogether when the mode is \"edit\"\r\n\r\nlet formDataContext = createContext();\r\n\r\n// will tell you if a card object is complete or not. ie. should it belong in the Queue or not.\r\nexport function shouldBeInQueue(formValues){\r\n    // Objective --> \r\n    // pass the formValues of a card // the fields used to judge if a card is complete or incomplete. \r\n    // will return boolean ie. true / false. no side effects anywhere.\r\n    let { title , tagsArr , authorsArr  } = formValues;\r\n    let formValuesSubset = { title , tagsArr , authorsArr };\r\n    console.log(\"This is the formValuesSubset\");\r\n    console.log(formValuesSubset);\r\n    let inQueue = false;    // init. ie. assuming that the card is filled. \r\n    Object.keys(formValuesSubset).forEach( (key) => {\r\n        if(formValuesSubset[key] == [ ] || formValuesSubset[key] == { } || formValuesSubset[key] == \"\"){\r\n            inQueue = true; \r\n        } \r\n    })\r\n\r\n    // just for logging -- just for the logs boi. \r\n    if(inQueue === false){\r\n        console.log(\"Card Does not belong in Queue\");\r\n    }else{\r\n        console.log(\"Card belongs in Queue\");\r\n    }\r\n\r\n    return inQueue; // boolean return (false by default , true if a value is missing)\r\n}\r\n\r\nconst CardForm = () => {\r\n\r\n    let { uid : userUid } = useContext(authContext); \r\n    let { formProps , closeForm } = useContext(formsContext);\r\n    let { formType , mode = \"add\" , editCardUid } = formProps;  // destructuring the formProps object that we get from the formsContext ( take a real close look at the schema ( in the formsContext file))\r\n\r\n    // temp. data will actually be pulled from firebase\r\n    // imp. this data does not represent the object that is to uploaded to firestore. this is just a dump. \r\n    let initFormValues = {  url : \"\" , \r\n                            urlsString : \"\",\r\n                            title : \"\" , \r\n                            tagsArr : [  ] , \r\n                            authorsArr : [  ]\r\n                        }\r\n\r\n    // temp. data will actually be pulled from firebase\r\n    // let initOptionsValues = {   \r\n    //                             titleOptions : [ { title : \"titleOption1\" } , {title : \"titleOption2\"} ] , \r\n    //                             tagsOptionsArr : [  { title : \"tagsOption1\" } , {title : \"tagsOption2\"} ] ,\r\n    //                             authorOptionsArr : [  { title : \"authorOption1\" } , {title : \"authorOption2\"} ] \r\n    //                         }\r\n\r\n    let [ activeTab , activeTabSetter] = useState(\"single\");    // decides the active tab ( in the first step)\r\n    const [ colorState , setColorState ] = useState( { singleLineColor : \"blue\" , multiLineColor : \"inherit\"}); // does not work for now. \r\n    let [ currentPart , setCurrentPart] = useState();    // determines which form step is being rendered\r\n    const [ cardExists , setCardExists] = useState();   // initial blank, when user submits url, the handleClick will check and set a boolean value\r\n    const [ cardDocRefState , setCardDocRefState] = useState(); \r\n    // stores the reference of the card. \r\n    // write code such that both new and existing card cases will be handled\r\n    \r\n    // selected values. ie. for all fields of this form. \r\n    const [ formValues , setFormValues ] = useState(initFormValues);         \r\n    // options for all fields of this form\r\n    const [ optionsValues , setOptionsValues ] = useState(null);\r\n    // optionsValues schema --> { titleOptions : [{ name : \"\" , uid : \"\" }],  tagsOptionsArr : [{ name : \"\" , uid : \"\"}] ,  authorOptionsArr  : [{ name : \"\" , uid : \"\"}] }\r\n    const [ errorObj , setErrorObj ] = useState({ error : false , helperText : null });\r\n    // checking if the activeTab state actually corelates with the \r\n    useEffect( () => {\r\n        console.log(activeTab);\r\n    } , [ activeTab ] )\r\n\r\n    useEffect(() => {\r\n        console.log(formValues.authorsArr)\r\n    } , [formValues])\r\n\r\n    // this useEffect will run only once. ie. after The first time the component renders.\r\n    // this useEffect powers the difference between add and edit modes.\r\n    useEffect( () => {\r\n    // read the description above\r\n    // will render the correct formPart ( second ) and set the editCards initial values to the formValues\r\n    if(mode === \"edit\"){\r\n        console.log(\"cardForm opened in editMode, first form part will be skipped \")\r\n        setCurrentPart(\"second\"); // will skip the first part of the form and render the second directly\r\n\r\n        // getting the initial values of the card that needs to be edited.\r\n        (async () => {\r\n            let editCardData = (await getDocs ( query( collection( db , \"users\" , userUid , \"cards\") , where( \"uid\" , \"==\" , editCardUid ) ) ) ).docs[0].data();\r\n            console.log(`card ${editCardUid} to be edited. view its data below`)\r\n\r\n            //  setting the edit card's data to formValues\r\n            let { url , title , authorsArr, tagsArr , inQueue , notes , uid } = editCardData;\r\n            let dataPrepared = { url , title , authorsArr, tagsArr , inQueue , notes , uid };\r\n            console.log(dataPrepared);\r\n            setFormValues(dataPrepared)\r\n        })();\r\n\r\n    }\r\n    else{\r\n        setCurrentPart(\"first\");\r\n    }\r\n    } , []) \r\n\r\n    // get the tags and authors (all the options) from their pools.   // useEffect runs once after the first render.\r\n    useEffect( async () => {\r\n        // get tags from Firebase , recast it into the needed format and set it in the correct state.  \r\n        let tagPoolSnapshot = await getDocs( query( collection( db , \"users\" , userUid , \"tagPool\" )));\r\n        let tagsRecasted = tagPoolSnapshot.docs.map( (tagOptionSnapshot) => {\r\n            let { name  , uid } = tagOptionSnapshot.data();  // destructuring the real maal\r\n            return { name , uid };   \r\n        });\r\n\r\n        // get authors from Firebase, recast it into the needed format and set it in the correct state.\r\n        let authorPoolSnapshot = await getDocs( query( collection( db , \"users\" , userUid , \"authorPool\" )));\r\n        let authorsRecasted = authorPoolSnapshot.docs.map( (authorOptionSnapshot ) => {\r\n            let { name  , uid } = authorOptionSnapshot.data();  // destructuring the real maal\r\n            return { name , uid };   \r\n        });\r\n\r\n        console.log(\"Tags (topics) and authors pulled from Firebase and added to the state, look at the state below\")\r\n        setOptionsValues({tagsOptionsArr : tagsRecasted , authorOptionsArr : authorsRecasted})\r\n    } , [])\r\n\r\n    // returns null if card does not exist. returns cardDocSnapshot is the card exits\r\n    // this is used indirectly only to populate the initial card data in the form. ie. regerdless if the card exists or not\r\n    // this function does not help in any way with the updating or creating a card\r\n    let checkIfCardExists = async (url) => {\r\n        let cardQuery = query( collection( db , \"users\" , userUid , \"cards\") , where(\"url\" , \"==\" , url.trim()));\r\n        let querySnapshot = await getDocs( cardQuery );\r\n        console.log(querySnapshot.docs[0]); // checking the response.\r\n\r\n        if(querySnapshot.empty === true){\r\n            console.log(\"Matching card does not exist. \")\r\n            return null;\r\n        }\r\n        // no side effect. only a return data. \r\n        else{   \r\n            if(querySnapshot.docs.length === 1){\r\n                console.log(\"Matching Card exists\")\r\n                console.log(querySnapshot.docs[0].data());    // printing from inside fn checkIfCardExits\r\n                // returns the data we need\r\n                return( querySnapshot.docs[0] );\r\n            }\r\n            else if(querySnapshot.docs.length > 1){\r\n                console.log(\"Multiple matching cards found. Not sure what to do\");  \r\n            }\r\n        }\r\n    }\r\n\r\n    let changeActiveTab = () => {\r\n        ( activeTab === \"single\" ) ? activeTabSetter(\"multiple\") : activeTabSetter(\"single\");\r\n        // swapTabColors();\r\n        console.log(activeTab);\r\n    }\r\n\r\n    let renderSecondForm = () => {\r\n        setCurrentPart(\"second\")\r\n    }\r\n    \r\n    let renderAcknowlegement = () => {\r\n        setCurrentPart(\"acknowlegement\")\r\n    }\r\n\r\n    // this should work but isnt working for some reason. \r\n    // let swapTabColors = () => {\r\n    //     colorState.singleLineColor === \"inherit\" ? \r\n    //     setColorState({ singleLineColor : \"inherit\" , singleLineColor : \"blue\"}) : \r\n    //     setColorState({ singleLineColor : \"blue\" , multiLineColor : \"inherit\" })\r\n    //     console.log(colorState.singleLineColor + \" \" + colorState.multiLineColor)\r\n    // }\r\n\r\n    // sets the initial values of the 2nd formPart based on the url entered by the user in the 1st formPart\r\n    // in case of multiple url's, the 2nd formPart is skipped altogether , all cards created will be put in the queue.\r\n    \r\n    // handles the final submission yo !!\r\n    const handleClick = async (e) => {      \r\n        console.log(\"Handle click clicked\");\r\n        e.preventDefault();\r\n        console.log(e.currentTarget.dataset.formpart);  // prints the part of the form currently being displayed on the screen\r\n        let url = formValues.url;\r\n\r\n        if(e.currentTarget.dataset.formpart === \"first\"){\r\n            // user submitted the url\r\n\r\n            console.log(\"inside form first part\");\r\n            \r\n            // if user has entered multiple url's separated by space, parse them into individual url's and push them into the urlArr. \r\n            if(formValues.urlsString != undefined && formValues.urlsString != \"\" ){\r\n                console.log(\"inside handle click, multiple url's entered\");\r\n                // parse the urlsString and load the results into the urlArr. \r\n                let urlArr = formValues.urlsString.split(/\\s+/);\r\n                // do not display the second part, directly the acknowlegement\r\n                // you also have to create cards out of these url's \r\n                console.log(\"Printing the urls\");\r\n                console.log(urlArr);\r\n\r\n                let cardPromiseArr = Promise.all (urlArr.map( (url) => {\r\n                    return checkIfCardExists(url.trim())\r\n                    .then((doesCardExist) => {\r\n                        // if card does not exist ( read the return signature of \"checkIfCardExists\")\r\n                        if(doesCardExist === null){\r\n                            let newlyCreatedCard = Card({ url , uid : uuidv4() , timestamp : serverTimestamp() , inQueue : true })\r\n                            addDoc( collection(db , \"users\" , userUid , \"cards\" ) , newlyCreatedCard )\r\n                            .then((createdCardDocRef) => {\r\n                                // since another card has been created, increment the success counter\r\n                            }).catch((error) => {\r\n                                console.log(`card ${url} couldnt be created because of the below error`)\r\n                                console.log(error);\r\n                            })\r\n                        }\r\n                        // card already exists, it need not be created\r\n                        else{\r\n                            console.log(`${url} card already exists, no need to create it`)\r\n                        }\r\n                        \r\n                    })\r\n                }) \r\n                )\r\n                // once the Promise.all() resolves\r\n                cardPromiseArr.then( () => {\r\n                    // add some sort of summary statement to show how many cards have been created and how many failed.\r\n\r\n                    // display the acknowlegement\r\n                    renderAcknowlegement();  \r\n                })\r\n            }\r\n            else{\r\n            // objective -->  \r\n            // inside this \"if\" block. we will only set the initial values of the form fields.\r\n            // case 1-- a card already exists, get the card data from firebase and put it into the correct fields of the formValue state\r\n            // case 2 -- if a card doesnt already exist, dont do anything ( the default value of the formFields state will give the formValue ( ie. all the form Fields) the correct initial values ie. blank)\r\n\r\n                console.log(\"inside handle click, single url entered\");\r\n                // user has entered a single url. \r\n\r\n            // if the url entered is not undefined or \"\"                                \r\n                if(url != undefined  && url != \"\" ){\r\n                    let cardDocSnap = await checkIfCardExists( formValues.url.trim() );\r\n                    console.log(\"Querying firebase for a card url\");\r\n                    console.log(\"results of the query\");\r\n                    console.log(cardDocSnap);   // prinitng from outisde the conditions. ( inside handleClick part 1)\r\n    \r\n                    // card doesnt exist\r\n                    if(cardDocSnap === null){\r\n                        // card doesnt already exist. this function only sets the initial (default) formValues. \r\n                        // dont create a new card here. you dont have to do anything, the default state will take care of this situation\r\n                    \r\n                        // think about it and add this code yo !!\r\n                        // if(validUrl){\r\n\r\n                        // }else{\r\n\r\n                        // }\r\n\r\n                        console.log(\"card did not exist, since this function is only responsible for setting the states initial values ( for the initial values of the form fields) , do not create a card. in fact, dont do anything, the default state value will handle this\");   \r\n                    }\r\n                    // card exists\r\n                    else{\r\n                        // card already exists. get the card data from firebase and set the initial fields of the form. ie. by setting the formValues \r\n                        let { url , title , authorsArr, tagsArr , inQueue , notes , uid } = cardDocSnap.data();  \r\n                        console.log(\"The url returned by the query\")\r\n                        console.log(url);\r\n                        let foundCardData = { url , title , authorsArr , tagsArr , inQueue , notes , uid };\r\n                        setFormValues( foundCardData ); // effectively sets initial values \r\n                        console.log(foundCardData); // check if all the data we currently have has been set. \r\n                    }\r\n                    renderSecondForm(); // second will not render if the \r\n                }\r\n                // if the url entered is blank or undefined. \r\n                else{\r\n                    // objective --> \r\n                    // if url is blank or undefined, a query is not needed at all. \r\n                    console.log(\"Blank or undefined url entered\");\r\n                      \r\n                }\r\n            }\r\n\r\n        }else if(e.currentTarget.dataset.formpart === \"second\"){\r\n            // objective --> \r\n            // powers the submit button of the second part of the form. \r\n            // ( prerequisite ) Get the value of the AuthorAutocomplete and the Tags Autocomplete -- should this be here ?? or let the autocompletes update the state on onChange ??\r\n            // Clicking the submit button will actually create a card / update a card. \r\n            // find whether a card already exists by running a query on the cards collection. \r\n            // the initial values will have already been loaded by the previous block of code. \r\n            // this block of code will actually create / update the card in the database.\r\n            \r\n            (   async () => {\r\n            let { url , title , \r\n                // authorsArr, tagsArr , \r\n                inQueue , notes , uid : cardUid } = formValues;   // pulling the values out. \r\n\r\n                let cardQuerySnapshot = await getDocs ( query( collection(db , \"users\" , userUid , \"cards\") , where(\"url\" , \"==\" , formValues.url) ) )\r\n                \r\n                // get all the included tags and authors. separate the ones that existed from the ones that did not exist before. \r\n                // create the ones that did not exist before and set them to firebase\r\n                // separate the ones that already existed \r\n                // we will use both while creating/ editing the card\r\n\r\n                // tags\r\n                let existingTagsArr = getExistingTags(formValues , optionsValues);\r\n                // create the tags that do not already exist, set them to Firebase and get those newly created tags.\r\n                let newlyCreatedTagsArr = await addTagsToFirebase( formValues , optionsValues , userUid);\r\n                let includedTags = [ ...existingTagsArr , ...newlyCreatedTagsArr]; // contains objects of all the tags that the user included in the card\r\n\r\n                // authors -- uncomment this\r\n                let existingAuthorsArr = getExistingAuthors(formValues , optionsValues);\r\n                // create the authors  that do not already exists, set them to Firebase and put created authors in an array .\r\n                let newlyCreatedAuthorsArr = await addAuthorsToFirebase(formValues , optionsValues , userUid );\r\n                let includedAuthors = [ ...existingAuthorsArr , ...newlyCreatedAuthorsArr ];    // contains objects of all the authors that the user included in the card\r\n                console.log(\"includedAuthors\");\r\n                console.log(includedAuthors);\r\n\r\n                // if empty, create a new card\r\n                if(cardQuerySnapshot.empty === true){\r\n                    //objective --> \r\n                    // if empty, ie card does not exist\r\n                    // at this point in the code, includedTags and includedAuthors arrays contain the objects of the tags and authors respectively ( previous code has created, set them in firebase as needed)\r\n                    // use includedTags and includedAuthors while creating a card \r\n                    // create a new card ( make sure all authors and tags selected by the user are added in the card )\r\n                \r\n                    let newCard = Card({ url , title , authorsArr : includedAuthors, tagsArr : includedTags, inQueue : shouldBeInQueue(formValues) , notes , timestamp : serverTimestamp() , uid : uuidv4() }); // card created locally. \r\n                    console.log(\"new card object created locally. view the card object below\");\r\n                    console.log(newCard);\r\n\r\n                    // the newly created tags, authors have already been set to Firebase by the addTagsToFirebase , addAuthorsToFirebase\r\n                    // no need to set them again.  \r\n                    try{\r\n                        // setting card\r\n                        let cardRef = await addDoc (collection(db , \"users\" , userUid , \"cards\" )  , newCard  );\r\n                        console.log(\"newly created card set to cards, querying to check if the card has been set properly\");\r\n                        console.log( (await getDoc(cardRef)).data() ); \r\n                    }catch(error){\r\n                        // dont do shit. \r\n                    }\r\n                }\r\n                // if not empty, edit the card.\r\n                else{\r\n                    \r\n                    // we are executing this query because we want the firestore ref to the card that is being updated.  -- we arent really interested in the data ie. just for logs.\r\n                    let editCardDocumentSnapshot = (await getDocs ( query( collection(db , \"users\" , userUid , \"cards\") , where(\"uid\" , \"==\" , editCardUid) ) )).docs[0];\r\n                    let editCardRef = editCardDocumentSnapshot.ref;\r\n                    let editCardData = editCardDocumentSnapshot.data();\r\n                    console.log(\"Card with uid ${editCardUid} is to be edited, displaying its firestore ref and data below\");   // only to \r\n                    console.log(editCardRef);\r\n                    console.log(editCardData);\r\n\r\n                    // creates an updated card locally. \r\n                    let updatedCard = { \r\n                        url , \r\n                        title , \r\n                        authorsArr : includedAuthors, \r\n                        tagsArr : includedTags , \r\n                        inQueue : shouldBeInQueue(formValues) , \r\n                        notes , \r\n                    }; // updated card created locally. \r\n\r\n                    console.log(\"updated card created locally, check if out below\");\r\n                    console.log({ ...formValues , ...updatedCard } );\r\n                    \r\n                    // setting the changes to Firebase\r\n                    // kuch to locha hai. logic galat hai . soch le. flawed logic. \r\n                    await updateDoc( editCardRef , { ...formValues , ...updatedCard } ); // will pretty much override the whole card. thus updating it.\r\n                    console.log(`card ${editCardUid} Updated successfully`)\r\n                }\r\n            })().then( () => {\r\n                renderAcknowlegement();\r\n                // submit the data that we have collected in the loacal state to firebase.\r\n            }).catch((error) => {\r\n                console.log(error);\r\n                console.log(\"error while updating the card\")\r\n            })\r\n \r\n        }\r\n    };\r\n\r\n    let handleInputChange = (key , e) => {\r\n            // handleInputChange will run for every field in the cardForm including url.\r\n            setFormValues({ ...formValues , [key] : e.target.value });\r\n    }\r\n\r\n    // this needs to be called from a server. ie. use a firebase cloud functions \r\n    async function checkIfWebpageExists( url){\r\n        try{\r\n             let response = await axios.get(url);\r\n             // if the url passed is invalid, axios will throw a tantrum. ie. an error / exception , which will be caught by our catch block\r\n             // the next line will not run at all\r\n             // thats how we will know that the url is invalid\r\n\r\n             // url provided by user seems valid \r\n             console.log(`url provided by user is valid.`)\r\n             // dont do anything. default errorObj state values will handle it.\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);     // check the error\r\n        }\r\n    }\r\n\r\n    // testing checkIfWebpageExists yo !!!\r\n    // checkIfWebpageExists(\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\").then( ( bool) => console.log(bool) )\r\n\r\n    return (\r\n        <formDataContext.Provider value={{  }}>\r\n        <Paper sx={{ p : 1 , width : \"400px\" , height : \"500px\" , overflow : \"hidden\" }}>\r\n            <Box>\r\n                <ClearIcon sx={{  display : \"block\", marginLeft : \"auto\" ,  }} onClick={ () => { closeForm() } } />\r\n            </Box>\r\n\r\n                {/* at any point in time, only one of these three components will be rendered ie. conditional rendering by short circuiting conditionals           */}\r\n                { ( \r\n                    (currentPart === \"first\") \r\n                    && \r\n                    <FirstStep \r\n                        handleInputChange = { handleInputChange } \r\n                        handleClick = { handleClick} \r\n                        changeActiveTab = { changeActiveTab }\r\n                        colorState = { colorState } \r\n                        activeTab = { activeTab } \r\n                        formValues = {formValues}\r\n                        setFormValues = { setFormValues}\r\n                        optionsValues = { optionsValues}\r\n                        setOptionsValues = { setOptionsValues}\r\n                        errorObj = { errorObj }\r\n                        /> \r\n                        \r\n                ) }\r\n                { ( \r\n                        ( currentPart === \"second\" ) \r\n                        && \r\n                        (optionsValues != undefined)\r\n                        && \r\n                        <SecondStep \r\n                            handleInputChange = { handleInputChange } \r\n                            handleClick = { handleClick} \r\n                            editMode = \"false\" \r\n                            editMode ={ (mode === \"editCard\") ? \"true\" : \"false\" } \r\n                            formValues = {formValues}\r\n                            setFormValues = { setFormValues}\r\n                            optionsValues = { optionsValues}\r\n                            setOptionsValues = { setOptionsValues} \r\n                            errorObj = { errorObj }\r\n                            /> \r\n                ) }\r\n                { ( currentPart === \"acknowlegement\" && <Acknowlegement/> ) }\r\n\r\n        </Paper>\r\n        </formDataContext.Provider>\r\n    )\r\n        \r\n}\r\n\r\nlet FirstStep = ({ changeActiveTab , colorState , activeTab , handleInputChange , handleClick , formValues , setFormValues , optionsValues , setOptionsValues , errorObj  }) => {\r\n\r\n    return(\r\n        <> \r\n            <Typography variant=\"h5\" sx ={{ ml : 1}}>  Add Cards   </Typography>\r\n            <Box sx={{ display : \"flex\"}}>\r\n                {/* styling buttons does not seem to work for some reason */}\r\n                <Button onClick={ changeActiveTab } sx={{ color : colorState.singleLineColor } } >  Add single link </Button> \r\n                <Button onClick={ changeActiveTab } sx={{ color :  colorState.multiLineColor  }} > Add multiple link</Button> \r\n            </Box> \r\n\r\n            <Box component=\"form\" sx={{ display : \"flex\" , flexDirection : \"column\"}} >\r\n                \r\n                { \r\n                    (activeTab === \"single\") ? \r\n                    (<TextField     \r\n                        id=\"outlined-basic\" \r\n                        type=\"text\" \r\n                        label=\"Paste Link Here \" \r\n                        variant=\"outlined\" \r\n                        size=\"small\" \r\n                        value={ formValues.url }\r\n                        sx={{ display:\"block\" , }} \r\n                        onChange = { (e) => { handleInputChange(\"url\" , e) }  }\r\n                        error ={ errorObj.error }\r\n                        helperText = { errorObj.helperText }\r\n                        /> )  :\r\n                    ( <TextField \r\n                        id=\"outlined-basic\" \r\n                        multiline \r\n                        rows={6} \r\n                        label=\"Paste multiple links here, separated by spaces \" \r\n                        variant=\"outlined\" \r\n                        size=\"small\" \r\n                        value={ formValues.urlsString }\r\n                        sx={{ display:\"block\" }}\r\n                        onChange = { (e) => { handleInputChange(\"urlsString\" , e) ; console.log(formValues.urls) } } \r\n                        error ={ errorObj.error }\r\n                        helperText = { errorObj.helperText }\r\n                        /> )\r\n                } \r\n                \r\n                <Button variant=\"contained\" color=\"primary\"  type=\"submit\" data-formpart=\"first\" onClick={ handleClick } sx={{ marginTop : \"1em\"}}>  Submit </Button>\r\n            </Box>\r\n        </> \r\n     )\r\n}\r\n\r\nlet SecondStep = ({ handleClick , handleInputChange , editMode , formValues , setFormValues , optionsValues , setOptionsValues , inputValue , setInputValue }) => {\r\n    return( \r\n    <>\r\n        <Box sx={{ width : \"100%\" , display : \"flex\" , flexDirection : \"column\", gap:\"1rem\"}}>\r\n        { editMode === \"true\" ? <Typography variant=\"h6\"> Edit your card details </Typography> : <Typography variant=\"h6\"> Add details to your card </Typography>  }\r\n        {/* <TitleAutocomplete \r\n        formValues = {formValues}\r\n        setFormValues = { setFormValues}\r\n        optionsValues = { optionsValues}\r\n        setOptionsValues = { setOptionsValues} \r\n         /> */}\r\n\r\n        {/* title field will not have autocomplete. it will be a nornal text field */}\r\n        <TextField label=\"Title\" value={ formValues.title} onChange ={ (e) => { setFormValues({ ...formValues , title : e.currentTarget.value })} } />\r\n        <TopicAutocomplete \r\n        formValues = { formValues }\r\n        setFormValues = { setFormValues}\r\n        optionsValues = { optionsValues}\r\n        setOptionsValues = { setOptionsValues} \r\n        inputValue = { inputValue }\r\n        setInputValue = { setInputValue }\r\n        />\r\n        <AuthorAutocomplete \r\n        formValues = {formValues}\r\n        setFormValues = { setFormValues}\r\n        optionsValues = { optionsValues}\r\n        setOptionsValues = { setOptionsValues} \r\n        inputValue = { inputValue }\r\n        setInputValue = { setInputValue }\r\n        />\r\n        <TextField id=\"outlined-multiline-flexible\" multiline  rows=\"5\" label=\"Notes\" variant=\"outlined\" placeholder=\"\" value={formValues.notes} onChange={ (e) => {handleInputChange(\"notes\" , e ) } } /> \r\n        {\r\n            (editMode === \"false\") ?\r\n            (<Button variant=\"contained\" color=\"primary\"  type=\"submit\" data-formpart=\"second\" onClick={  handleClick  } >  Submit </Button>) \r\n            :\r\n            (<Box sx={{ display : \"flex\" , justifyContent : \"space-around\" }}>\r\n                <Button variant=\"contained\" onClick = { handleClick }> \r\n                    Save \r\n                </Button>\r\n                <Button variant=\"contained\" startIcon={<DeleteOutlineOutlinedIcon/>}>\r\n                    Cancel\r\n                </Button>\r\n            </Box> )\r\n        }\r\n        </Box>\r\n    </>)\r\n}\r\n\r\nlet Acknowlegement = ( ) => {\r\n    return ( \r\n            <Box sx={{ width : \"100%\" , height : \"100%\" , backgroundColor : \"#ddddf348\" ,  display : \"flex\" , justifyContent : \"center\" , alignItems : \"center\" ,  }}> \r\n                <Box \r\n                sx={{ \r\n                    display : \"flex\" , \r\n                    justifyContent : \"center\" , \r\n                    alignItems : \"center\" , \r\n                    borderRadius : \"5px\",\r\n                    backgroundImage: \"linear-gradient(to right, #904e95, #e96443)\",\r\n                    backgroundClip : \"text\",\r\n                    textFillColor : \"transparent\",\r\n                    backgroundColor : \"black\",\r\n                    // background: rgb(131,58,180),\r\n                    // background: linear-gradient(90deg, rgba(131,58,180,1) 0%, rgba(253,29,29,1) 33%, rgba(252,176,69,1) 100%),\r\n                    \r\n                    width : \"80%\"\r\n                    }}> \r\n\r\n                    <Typography sx={{ fontSize : \"2rem\" , fontWeight : \"600\" , color : \"#e0b3e6\" , minWidth : \"min-content\"}}> \r\n                        Saved ! \r\n                    </Typography>\r\n                \r\n                </Box>\r\n            </Box>\r\n    )\r\n}\r\n \r\nexport default CardForm;","import React from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport { IconButton } from '@mui/material/';\r\nimport { useState , useRef , useEffect , useContext } from \"react\";\r\nimport { ConstructionOutlined } from '@mui/icons-material';\r\nimport { formsContext } from \"../../contexts/formsContext\";\r\nimport { getStorage, ref , uploadBytes , getBlob  , getDownloadURL} from \"firebase/storage\";\r\nimport { doc , collection , updateDoc , where , getDocs , query, getDoc , setDoc } from \"firebase/firestore\";\r\nimport { db } from \"../../firebase/firebase\"\r\nimport { storage } from \"../../firebase/firebase\";  // storage object created from \r\nimport { authContext } from \"../../contexts/authContext\";\r\nimport { User } from \"../../firebase/firestoreProductionFunctions\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Typography} from '@mui/material';\r\n// userBioForm does not have different normal and editModes. the same \"Save\" submit button works.\r\n\r\nconst UserBioForm = ({handleDrawerClose}) => {\r\n\r\n    let { closeForm } = useContext(formsContext);\r\n    let { uid : userUid , displayName } = useContext(authContext);\r\n\r\n    const uploadAvatarRef = useRef(null);\r\n    const uploadbackgroundRef = useRef(null);\r\n    let [ formValues , setFormValues] = useState({ userName : \"\" , bio :\"\" , avatar:\"\" , background :\"\"});\r\n    // we get the userUid from authContext instead. \r\n\r\n    // formValues.avatar or formValues.background will at any point of time contain one of the two things . \r\n    // 1. a File object ( handleChange sets this)\r\n    // 2. a downloadURL string to the avatar or background ( set inside the handleSubmit function after uploading the image to firebase storage)\r\n    // this can and have caused a few bugs\r\n\r\n\r\n    useEffect( () => {\r\n        // get the initial values from firebase after first main page load\r\n        (async() => {\r\n            let userDoc =  ( await getDoc( doc(db , \"users\" , userUid) ) ).data()\r\n            console.log(userDoc);\r\n            let { userName , bio , avatar , background } = userDoc; \r\n            // we do not add displayName to state , we get it directly from authContext instead\r\n            let userDocSubset = { userName , bio , avatar , background };\r\n            setFormValues({ ...formValues , ...userDocSubset });\r\n        })();\r\n    }, [])\r\n\r\n    // checking if the correct values have been set in formValues\r\n    useEffect( () => {\r\n        console.log(\"user input detected in userBioForm, check its form state below\")\r\n        console.log(formValues)\r\n    } , [ formValues])\r\n\r\n    // handling the change in the form inputs\r\n    let handleChange = (e) => {\r\n        if(e.currentTarget.name === \"background\"){\r\n            console.log(e.currentTarget.name)\r\n            // console.log(uploadbackgroundRef)\r\n            setFormValues( { ...formValues , [ e.currentTarget.name] : uploadbackgroundRef.current.files[0]})\r\n        }else if(e.currentTarget.name === \"avatar\"){\r\n            console.log(e.currentTarget.name)\r\n            setFormValues( { ...formValues , [ e.currentTarget.name] : uploadAvatarRef.current.files[0]})\r\n        }else{\r\n            setFormValues( { ...formValues , [ e.currentTarget.name] : e.currentTarget.value } )\r\n        }\r\n    }\r\n\r\n    // when the submit button is pressed.\r\n    // remember that the author object / document will always exist ( card creates it). everytime the submit button is clicked, you will be updating this object / document\r\n    let handleSubmit = (e) => {\r\n        // two parts .....\r\n        // upload the assets ( avatar and background) to firebase storage (if the user has provided them) and get their refs\r\n        // create the Author object and upload it to firestore\r\n        e.preventDefault();\r\n\r\n        ( async () => { \r\n\r\n            let assetRefs = { avatar : \"\" , background : \"\" }    // init a local object // poplated by the two uploadBytes below // at the end, it will contain the ref string of the image file in the Firebase storage. we need these strings to include them while modifyign the author\r\n            \r\n            // figuring out how to upload a file object to Firebase storage. \r\n            \r\n            // Firebase storage routes\r\n                // storage routes will look this --> `${{userUid}/${assetFolderName}/${assetName}/${imageName.jpg}\" etc\r\n                // assetFolder names can be userBioAssets or cardAssets or authorAssets\r\n                // assetName can be avatar / background .... \r\n\r\n            if(formValues.avatar != undefined && formValues.avatar != \"\" && typeof formValues.avatar != \"string\" ){\r\n                try{\r\n                    // no need to delete the file currently in storage ( there can only be one avatar at a time) cause we use a generic name \"avatarPic\" at the end of the path. \r\n                    // the next time we write a file to this path , it will just be overridden. Thus, there will never be more than one file in the folder. \r\n                    \r\n                    let fileRef = ref( storage , `${userUid}/userBioAssets/avatar` );  \r\n                    let avatarSorageRef = ( await uploadBytes( fileRef , formValues.avatar)).ref; // is a Custom object \r\n                    console.log(\"avatar set to Firebase storage successfully\")\r\n                    let avatarDownloadURL = await getDownloadURL(avatarSorageRef); \r\n                    console.log(\"path received from getDownloadURL\");\r\n                    console.log(avatarDownloadURL);\r\n                    // will eventually add this to the state , subsequent logic will add it to firebase.\r\n                    assetRefs.avatar = avatarDownloadURL;   // storing it temporarily in an object -- we dont want to store it in a state cause that will cause an unnecessary Rerender.\r\n                    console.log(\"avatar has been updated\");\r\n                }\r\n                catch(error){\r\n                    console.log(error)\r\n                    console.log(\"Unsuccessfully tried to upload avatar photo to storage\")\r\n                }\r\n            }\r\n            if(formValues.background != undefined && formValues.background != \"\" && typeof formValues.background != \"string\"){\r\n                try{                    \r\n                    // look at the end of the path that we have passed to ref() notice that it is a generic backgroundPic instead of the actual name of the pic. This is for convenience ie. the next time we write a file to this path , it will overwrite the file. thus ridding us the need to first delete the file before uploading the next\r\n                    let fileRef = ref( storage , `${userUid}/userBioAssets/background` );  // second param is a sting\r\n                    let backgroundStorageRef = ( await uploadBytes( fileRef , formValues.background)).ref; // is a Custom object \r\n                    console.log(backgroundStorageRef)\r\n                    console.log(\"background set to Firebase storage successfully\")\r\n                    let backgroundDownloadURL = await getDownloadURL(backgroundStorageRef)\r\n                    console.log(\"path received from getDownloadURL\");\r\n                    console.log(backgroundDownloadURL);\r\n                    // add the backgroundDownloadURL to firebase\r\n                    // will eventually add this to the state , subsequent logic will add it to firebase.\r\n                    assetRefs.background = backgroundDownloadURL;   // storing it temporarily in an object -- we dont want to store it in a state cause that will cause an unnecessary Rerender.\r\n                    console.log(\"background has been updated\");\r\n\r\n                }\r\n                catch(error){\r\n                    console.log(error);\r\n                    console.log(\"Unsuccessfully tried to upload background photo to storage\")\r\n                }\r\n            }\r\n\r\n            const { userName , bio , website , twitter  } = formValues;       // pulling out the non media values form formValues yo !!\r\n            // we arent currently using bio , twitter or website fields\r\n            \r\n            // an authors uid will never change ( it is a unique and constant identifier). \r\n            let updatedUserObj = User({ \r\n                userName , \r\n                bio , \r\n                website , \r\n                twitter , \r\n                avatar :  ( assetRefs.avatar === \"\" ? formValues.avatar : assetRefs.avatar ) , \r\n                background :  ( assetRefs.background === \"\" ? formValues.background : assetRefs.background )  ,\r\n            })\r\n\r\n            \r\n\r\n            try{\r\n                let userDoc = await setDoc( doc(db , \"users\" , userUid ) , updatedUserObj);\r\n                console.log(\"Updated the user object, view the updated object below\")\r\n                console.log(updatedUserObj);\r\n            }\r\n            catch(error){\r\n                console.log(\"Error in updating the userBio information in firestore\");\r\n                console.log(error);\r\n            }\r\n\r\n        })()\r\n\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ padding : \"0 1rem 0 1rem\"}}>\r\n            <Box sx={{ height : \"2rem\"}}> <CloseIcon onClick={ closeForm } sx={{ display : \"block\" , marginLeft : \"auto\"}} /> </Box>\r\n            <Typography variant=\"h5\" sx ={{ ml : 1 , mb : 1}}> Edit your profile </Typography>\r\n            <Box className=\"formBox\" component=\"form\" sx={{ display : \"grid\" , gap : \"1rem\" , gridTemplateColumns : \"1fr\" , \r\n            // width : \"450px\"\r\n              }}>\r\n                <TextField \r\n                id=\"outlined-controlled\" \r\n                label=\"userName\" \r\n                variant=\"outlined\" \r\n                placeholder=\"\" \r\n                name=\"userName\" \r\n                value={formValues.userName}\r\n                autocomplete=\"off\"\r\n                onChange={(e) => { handleChange(e) }} \r\n                 />\r\n                {/* <TextField id=\"outlined-basic\" label=\"Last name\" variant=\"outlined\" placeholder=\"\" name=\"lastName\" onChange={handleChange} /> */}\r\n                {/* <TextField id=\"outlined-basic\" label=\"Email\" variant=\"outlined\" placeholder=\"\" name=\"email\" onChange={handleChange} /> */}\r\n                {/* <TextField id=\"outlined-basic\" label=\"User name\" variant=\"outlined\" placeholder=\"\" name=\"userName\" onChange={handleChange} /> */}\r\n                <TextField \r\n                id=\"outlined-textarea\" \r\n                label=\"Bio\" \r\n                variant=\"outlined\" \r\n                placeholder=\"\" \r\n                name=\"bio\" \r\n                value={ formValues.bio }\r\n                autoComplete=\"off\" \r\n                onChange={(e) => { handleChange(e) }}/>\r\n\r\n                {/* upload avatar btn */}\r\n                <Box sx={{ width : \"100%\" , height : \"100%\" , gridColumnStart : \"1\" , gridRowStart : \"4\"}}>\r\n                    <input\r\n                    ref={uploadAvatarRef}\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    style={{ display: \"none\" }}\r\n                    onChange={(e) => { handleChange(e) }}\r\n                    name =\"avatar\"\r\n                    />\r\n                    <Button\r\n                    onClick={() => uploadAvatarRef.current && uploadAvatarRef.current.click()}\r\n                    variant=\"contained\"\r\n                    name=\"avatar\"\r\n                   \r\n                    >\r\n                    Upload Avatar\r\n                    </Button>\r\n                </Box>\r\n                \r\n                {/* upload background image button */}\r\n                <Box sx={{ width : \"100%\" , height : \"100%\" , gridColumnStart : \"2\" , gridRowStart : \"4\" }}>\r\n                    <input\r\n                    ref={uploadbackgroundRef}\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    style={{ display: \"none\" }}\r\n                    onChange={(e) => { handleChange(e) }}\r\n                    name = \"background\"\r\n                    />\r\n                    <Button\r\n                    onClick={() => uploadbackgroundRef.current && uploadbackgroundRef.current.click()}\r\n                    variant=\"contained\"\r\n                    name = \"background\"\r\n                    >\r\n                        Upload background Image\r\n                    </Button>\r\n                </Box>\r\n\r\n\r\n\r\n                <Button \r\n                variant=\"contained\" \r\n                type=\"submit\" \r\n                sx={{ gridRowStart : \"5\"}} \r\n                onClick={ (e) => {  handleSubmit(e) } } >   \r\n                    Save  \r\n                </Button>  \r\n\r\n\r\n            </Box> \r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default UserBioForm;\r\n","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { formsContext } from '../../contexts/formsContext';\r\nimport { useContext } from \"react\"\r\nimport { deleteCard } from \"../../firebase/firestoreProductionFunctions\"\r\nimport { authContext }  from \"../../contexts/authContext\";\r\n\r\nexport default function ConfirmDelete() {\r\n  // ConfirmDelete is a slightly different case cause it does not live within the drawer. it itself is a modal. \r\n  let { closeForm , formProps } = useContext(formsContext);\r\n  let { uid : userUid } = useContext(authContext);\r\n  let cardUid = formProps.cardUid;\r\n  console.log(`inside confirmDelete component. userUid is ${userUid} and cardUid is ${cardUid}`);\r\n\r\n  const [open, setOpen] = React.useState(true); // internal state \r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false); // only closes the drawer. it does not unmount the ConfirmDelete component. ( Super important subtlety -- )\r\n    // resetFormProps(); // this line will change the state ( defined in Author ) in such a way that it will prevent ConfirmDelete from being rendered ( falsy conditional rendering ) (ie. the ConfirmDelete will unmount)\r\n    closeForm();\r\n  };\r\n\r\n// useEffect( ()=>{\r\n//   return( setOpen(true))\r\n// })\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n                Are you sure\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button       \r\n            onClick={ () => { handleClose() }} >\r\n              Disagree\r\n          </Button>\r\n          <Button\r\n          onClick= { () => {\r\n            ( async() => {\r\n              await deleteCard(userUid  , cardUid )   // deletes card in Firebase\r\n              handleClose()\r\n            })()\r\n          }}\r\n          autoFocus>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport { IconButton } from '@mui/material/';\r\nimport { useRef , useState , useContext , useEffect } from \"react\";\r\nimport { ConstructionOutlined } from '@mui/icons-material';\r\nimport { formsContext } from \"../../contexts/formsContext\";\r\nimport { authContext } from \"../../contexts/authContext\";\r\nimport { uploadBytes , ref , getDownloadURL  } from 'firebase/storage';\r\nimport { Author } from \"../../firebase/firestoreProductionFunctions\";\r\nimport { doc , collection , updateDoc , where , getDocs , query , setDoc  } from \"firebase/firestore\";\r\nimport { db } from \"../../firebase/firebase\"\r\nimport { storage } from \"../../firebase/firebase\";  // storage object created from \r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// userBioForm does not have different normal and editModes. the same \"Save\" submit button works.\r\n\r\nconst AuthorBioForm = ({handleDrawerClose}) => {\r\n    console.log(\" author Bio form is being displayed\")\r\n    let {closeForm , formProps : { authorUid  } } = useContext(formsContext);\r\n    let { uid : userUid }  = useContext(authContext);  // renamind the uid as userId to avoid confusion between uid of the user and uid of an author\r\n    console.log(`the userUid is ${userUid} and the current authorUid is ${authorUid}`)    // the renaming worked.\r\n    const uploadAvatarRef = useRef(null);\r\n    const uploadCoverRef = useRef(null);\r\n    let [ formValues , setFormValues] = useState({ name : \"\" , bio : \"\" , avatar : \"\" , background : \"\" , twitter : \"\" , website : \"\"}); // local store of form inputs. \r\n    let [ acknowlegementVisibility , changeAcknowlegementVisibility] = useState(false); // determines if the form acknowlegement ie. the second formPart of the authorBioForm is visible or not.\r\n    \r\n    let displayAcknowlegement = () => {\r\n        changeAcknowlegementVisibility(true);\r\n    }\r\n    //  formValues schema .... picked up from the Contructor in firestoreProductionFunction.\r\n    //  all are strings. no nested arrays / objects etc. \r\n    // {\r\n    //     name : name string,\r\n    //     bio : bio string,\r\n    //     avatar : avatarImage File API string ( user input) / blank when used to store data pulled from Firebase\r\n    //     website : website string,\r\n    //     twitter : twitter string,\r\n    //     background : backgroundImage File API string / blank when used to store data pulled from Firebase\r\n    //     uid : uid string,\r\n    // }\r\n\r\n    // think about this while naming the schema wrt avatar and background. the next time the user views an authorBioForm, he should be able to see a small verison of an image ie. this means that we will have to store the Firebase storage ref of the assets in the Author object\r\n    // this is how it can go. when the user is entering stuff in the fields, the avatar and background will have the strings pulled form the File api. ie. the Windows path to the assets\r\n    // once the user clicks submit, we will upload the assets into Firebase storage, get the refs to the storage and write this firebase ref to the Author object that we will set to Firestore \r\n    // think about this once again. -- think about the user flow. \r\n    // should we just name it avatar and background ?? cause they will be windows path and firstore ref at different points of time. get rid of the confusion.   \r\n    \r\n    // get the initial values of an author ( author details ) from Firebase after the first render.\r\n    useEffect( () => {\r\n\r\n        ( async () => {\r\n            let authorData = (await getDocs( query(collection( db , \"users\" , userUid , \"authorPool\" ) , where( \"uid\" , \"==\" , authorUid )) )).docs[0].data();     // // change this. // the second uid in the where from a string to a variable \r\n            let { name , bio , avatar , website , twitter , background , uid } = authorData;\r\n            console.log(\"initial author data pulled from Firebase \");\r\n            console.log(authorData);\r\n            setFormValues({ name , bio , avatar , website , twitter , background , uid  });\r\n\r\n            // todo -- get the name of the assets from firebase storage. ( only once you create that component) \r\n        })();\r\n        \r\n    } , [])\r\n\r\n    useEffect( () => {\r\n        console.log(\"user input detected in authorBioForm, check its form state below\")\r\n        console.log(formValues)\r\n    } , [ formValues])\r\n\r\n    \r\n    \r\n\r\n    let handleChange = (e) => {\r\n        if(e.currentTarget.name === \"background\"){\r\n            console.log(e.currentTarget.name)\r\n            setFormValues( { ...formValues , [ e.currentTarget.name] : uploadCoverRef.current.files[0]})\r\n        }else if(e.currentTarget.name === \"avatar\"){\r\n            console.log(e.currentTarget.name)\r\n            setFormValues( { ...formValues , [ e.currentTarget.name] : uploadAvatarRef.current.files[0]})\r\n        }else{\r\n            console.log(e.currentTarget.name)\r\n            setFormValues( { ...formValues , [ e.currentTarget.name] : e.currentTarget.value } )\r\n        }\r\n    }\r\n\r\n    // when the submit button is pressed.\r\n    // remember that the author object / document will always exist ( card creates it). everytime the submit button is clicked, you will be updating this object / document\r\n    let handleSubmit = (e) => {\r\n        // two parts .....\r\n        // upload the assets ( avatar and background) to firebase storage (if the user has provided them) and get their refs\r\n        // create the Author object and upload it to firestore\r\n        e.preventDefault();\r\n\r\n        ( async () => {\r\n            let assetRefs = { avatar : \"\" , background : \"\" }    // init a local object // poplated by the two uploadBytes below // at the end, it will contain the ref string of the image file in the Firebase storage. we need these strings to include them while modifyign the author\r\n            \r\n            if( formValues.avatar != undefined && formValues.avatar != \"\" && typeof formValues.avatar != \"string\"){\r\n                try{\r\n                    // if user has provided an avatar , upload the avatar to Firestore\r\n                    // get the users uid situation set yo !! , then continue writing these functions \r\n                    let fileRef = ref( storage , `${userUid}/authorBioAssets/${authorUid}/avatar`)\r\n                    let avatarStorageRef = (await uploadBytes( fileRef , formValues.avatar)).ref;\r\n                    console.log(avatarStorageRef)\r\n                    console.log(\"avatar set to Firebase storage successfully\")\r\n                    let avatarDownloadURL = await getDownloadURL(avatarStorageRef)\r\n                    assetRefs.avatar = avatarDownloadURL; // storing in object instead of state.\r\n                }\r\n                catch(error){\r\n                    console.log(error);\r\n                    console.log(\"Error while trying to upload the avatar to Firebase\")\r\n                }\r\n\r\n            }\r\n            if(formValues.background != undefined && formValues.background != \"\" && typeof formValues.background != \"string\"){\r\n                try{\r\n                    // if user has provided an background , upload the background to Firestore\r\n                    let fileRef = ref( storage , `${userUid}/authorBioAssets/${authorUid}/background`)\r\n                    let backgroundStorageRef = ( await uploadBytes( fileRef , formValues.background)).ref;\r\n                    console.log(backgroundStorageRef);\r\n                    console.log(\"background set to Firebase storage successfully\")\r\n                    console.log(\"pulling path returned object. this path is enough to pull files from Firebase storage \")\r\n                    let backgroundDownloadURL = await getDownloadURL( backgroundStorageRef)\r\n                    assetRefs.background = backgroundDownloadURL; // look out for variable clash.\r\n                }\r\n                catch(error){\r\n                    console.log(error);\r\n                    console.log(\"Error while trying to upload the background to Firebase\")\r\n                }\r\n\r\n            }\r\n            const { name , bio , website , twitter , uid  } = formValues;       // pulling out values form formValues yo !!\r\n            // an authors uid will never change ( it is a unique and constant identifier). \r\n\r\n            let updatedAuthorObj = Author({ \r\n                uid, \r\n                name , \r\n                bio , \r\n                background : ( assetRefs.background === \"\" ? formValues.background : assetRefs.background ) , \r\n                avatar : ( assetRefs.avatar === \"\" ? formValues.avatar : assetRefs.avatar ) , \r\n                twitter  , \r\n                website  })\r\n            console.log(\"updated author fields created locally\");\r\n            console.log(updatedAuthorObj);\r\n            \r\n            try{\r\n                // find the author that needs to be updated from the authorPool ( use uid). and then update it.\r\n                let authorQuery = query(collection( db , \"users\" , userUid , \"authorPool\") , where( \"uid\" , \"==\" , authorUid ) );  \r\n                let authorDocRef = (await getDocs(authorQuery)).docs[0].ref;    // check if the ref found is correct.\r\n                await updateDoc(authorDocRef , updatedAuthorObj );\r\n                console.log(\"successfully updated the Author document in firestore\");\r\n                displayAcknowlegement();   \r\n                \r\n            }\r\n            catch(error){\r\n                console.log(error);\r\n                console.log(\"Error while trying to update the Author document in the author pool\")\r\n            }\r\n     \r\n            // update name in authorsArr of all the cards that have this author included.\r\n        })()\r\n\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ padding : \"0 1rem 0 1rem\"}}>\r\n            <Box sx={{ height : \"2rem\"}}> <CloseIcon onClick={ closeForm } sx={{ display : \"block\" , marginLeft : \"auto\"}} /> </Box>\r\n            \r\n            {\r\n                acknowlegementVisibility === false \r\n                ? \r\n                <>\r\n                    <Box className=\"formBox\" component=\"form\" sx={{ display : \"grid\" , gap : \"1rem\" , gridTemplateColumns : \"1fr 1fr\" , width : \"450px\"  }}>\r\n                        \r\n                        <TextField id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" placeholder=\"name\" name=\"name\" onChange={handleChange} value = { formValues.name} />\r\n                        <TextField id=\"outlined-basic\" label=\"Bio\" variant=\"outlined\" placeholder=\"\" name=\"bio\" onChange={handleChange} value = { formValues.bio} />\r\n                        <TextField id=\"outlined-textarea\" label=\"Website\" variant=\"outlined\" placeholder=\"\" name=\"website\" onChange={handleChange} value = { formValues.website}/>\r\n                        <TextField id=\"outlined-textarea\" label=\"Twitter\" variant=\"outlined\" placeholder=\"\" name=\"twitter\" onChange={handleChange} value = { formValues.twitter}/>\r\n        \r\n                        <Box sx={{ width : \"100%\" , height : \"100%\" , gridColumnStart : \"1\" , gridRowStart : \"4\"}}>\r\n                            <input\r\n                            ref={uploadAvatarRef}\r\n                            type=\"file\"\r\n                            accept=\"image/*\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={handleChange}\r\n                            name=\"avatar\"\r\n                            />\r\n                            <Button\r\n                            onClick={() => uploadAvatarRef.current && uploadAvatarRef.current.click()}\r\n                            variant=\"contained\"\r\n                            name=\"avatar\"\r\n                            >\r\n                            Upload Avatar\r\n                            </Button>\r\n                        </Box>\r\n                        \r\n                        <Box sx={{ width : \"100%\" , height : \"100%\" , gridColumnStart : \"2\" , gridRowStart : \"4\" }}>\r\n                            <input\r\n                            ref={uploadCoverRef}\r\n                            type=\"file\"\r\n                            accept=\"image/*\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={handleChange}\r\n                            name=\"background\"\r\n                            />\r\n                            <Button\r\n                            onClick={() => uploadCoverRef.current && uploadCoverRef.current.click()}\r\n                            variant=\"contained\"\r\n                            name = \"background\"\r\n                            >\r\n                            Upload Background Image\r\n                            </Button>\r\n                        </Box>\r\n        \r\n        \r\n                        <Button variant=\"contained\" type=\"submit\" sx={{ gridRowStart : \"5\"}} onClick={ (e) => { handleSubmit(e) } } > Save </Button>  \r\n        \r\n        \r\n                    </Box> \r\n                </>\r\n                : \r\n                <AuthorAcknowlegement/>\r\n            }\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default AuthorBioForm;\r\n\r\n\r\nlet AuthorAcknowlegement = () => {\r\n        return ( \r\n            <Box sx={{ width : \"100%\" , height : \"100%\" , backgroundColor : \"#ddddf348\" ,  display : \"flex\" , justifyContent : \"center\" , alignItems : \"center\" ,  }}> \r\n                <Box \r\n                sx={{ \r\n                    display : \"flex\" , \r\n                    justifyContent : \"center\" , \r\n                    alignItems : \"center\" , \r\n                    borderRadius : \"5px\",\r\n                    backgroundImage: \"linear-gradient(to right, #904e95, #e96443)\",\r\n                    backgroundClip : \"text\",\r\n                    textFillColor : \"transparent\",\r\n                    backgroundColor : \"black\",\r\n                    // background: rgb(131,58,180),\r\n                    // background: linear-gradient(90deg, rgba(131,58,180,1) 0%, rgba(253,29,29,1) 33%, rgba(252,176,69,1) 100%),\r\n                    \r\n                    // width : \"80%\"\r\n                    width : \"450px\",\r\n                    height : \"300px\",\r\n                    }}> \r\n\r\n                    <Typography sx={{ fontSize : \"2rem\" , fontWeight : \"600\" , color : \"#e0b3e6\" , minWidth : \"min-content\"}}> \r\n                        Author Saved ! \r\n                    </Typography>\r\n                \r\n                </Box>\r\n            </Box>\r\n    )\r\n}","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { useState , useContext } from \"react\";\r\n\r\nconst CardDeleteAcknowlegement = () => {\r\n  // // state decides if the card delete acknowlegement snackbar is visible or not.\r\n  // const [ cardDelAcknowlegementVisibility, setCardDelAcknowlegementVisibility] = useState(false);\r\n\r\n  let [ open , setOpen] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    // setCardDelAcknowlegementVisibility(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    // setCardDelAcknowlegementVisibility(false);\r\n  };\r\n\r\n  const action = (\r\n    <React.Fragment>\r\n      <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\r\n        UNDO\r\n      </Button>\r\n      <IconButton\r\n        size=\"small\"\r\n        aria-label=\"close\"\r\n        color=\"inherit\"\r\n        onClick={handleClose}\r\n      >\r\n        <CloseIcon fontSize=\"small\" />\r\n      </IconButton>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Button onClick={handleClick}>Open simple snackbar</Button>\r\n      <Snackbar\r\n        open= { open }\r\n        // {open}\r\n        autoHideDuration={2000}\r\n        onClose={handleClose}\r\n        message=\"Card Deleted\"\r\n        action={action}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardDeleteAcknowlegement;\r\n\r\n\r\n// const Yomama = () => {\r\n//   return (\r\n//   <> \r\n//     <p> This is yomama</p> \r\n//   </>   );\r\n// }\r\n \r\n// export default Yomama;","import React from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport { IconButton } from '@mui/material/';\r\nimport { useRef , useState , useContext , useEffect } from \"react\";\r\nimport { ConstructionOutlined } from '@mui/icons-material';\r\nimport { formsContext } from \"../../contexts/formsContext\";\r\nimport { authContext } from \"../../contexts/authContext\";\r\nimport { uploadBytes , ref , getDownloadURL  } from 'firebase/storage';\r\nimport { Author } from \"../../firebase/firestoreProductionFunctions\";\r\nimport { doc , collection , updateDoc , where , getDocs , query , setDoc  } from \"firebase/firestore\";\r\nimport { db } from \"../../firebase/firebase\"\r\nimport { storage } from \"../../firebase/firebase\";  // storage object created from \r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Tag } from \"../../firebase/firestoreProductionFunctions\";\r\nimport { Typography , Stack } from '@mui/material';\r\n// topicForm does not have different normal and editModes. the same \"Save\" submit button works.\r\n\r\nconst TopicForm = ({handleDrawerClose}) => {\r\n    console.log(\"topicForm is being displayed\");\r\n    let {closeForm , formProps : {topicUid  } } = useContext(formsContext);\r\n    let { uid : userUid }  = useContext(authContext);  // renamind the uid as userId to avoid confusion between uid of the user and uid of topic\r\n    console.log(`the userUid is ${userUid} and the current topicUid is ${topicUid}`);    // the renaming worked.\r\n    const uploadCoverRef = useRef(null);\r\n    let [ formValues , setFormValues] = useState({ name : \"\" , bio : \"\" , background : \"\" }); // local store of form inputs. \r\n    let [ acknowlegementVisibility , changeAcknowlegementVisibility] = useState(false); // determines if the form acknowlegement ie. the second formPart of the authorBioForm is visible or not.\r\n    \r\n    let displayAcknowlegement = () => {\r\n        changeAcknowlegementVisibility(true);\r\n    }\r\n    //  formValues schema .... picked up from the Contructor in firestoreProductionFunction.\r\n    //  all are strings. no nested arrays / objects etc. \r\n    // {\r\n    //     name : name string,\r\n    //     bio : bio string,\r\n    //     background : backgroundImage File API string / blank when used to store data pulled from Firebase\r\n    //     uid : uid string,\r\n    // }\r\n\r\n    // think about this while naming the schema wrt avatar and background. the next time the user views an authorBioForm, he should be able to see a small verison of an image ie. this means that we will have to store the Firebase storage ref of the assets in the Author object\r\n    // this is how it can go. when the user is entering stuff in the fields, the avatar and background will have the strings pulled form the File api. ie. the Windows path to the assets\r\n    // once the user clicks submit, we will upload the assets into Firebase storage, get the refs to the storage and write this firebase ref to the Author object that we will set to Firestore \r\n    // think about this once again. -- think about the user flow. \r\n    // should we just name it avatar and background ?? cause they will be windows path and firstore ref at different points of time. get rid of the confusion.   \r\n    \r\n    // get the initial values of an topic ( topic details ) from Firebase after the first render.\r\n    useEffect( () => {\r\n\r\n        ( async () => {\r\n            let topicData = (await getDocs( query(collection( db , \"users\" , userUid , \"tagPool\" ) , where( \"uid\" , \"==\" , topicUid )) )).docs[0].data();     // // change this. // the second uid in the where from a string to a variable \r\n            let { name , bio , background , uid } = topicData;\r\n            console.log(\"initial topic data pulled from Firebase \");\r\n            console.log(topicData);\r\n            setFormValues({ name , bio , background , uid });\r\n\r\n            // todo -- get the name of the assets from firebase storage. ( only once you create that component) \r\n        })();\r\n        \r\n    } , [])\r\n\r\n    useEffect( () => {\r\n        console.log(\"user input detected in authorBioForm, check its form state below\")\r\n        console.log(formValues)\r\n    } , [ formValues])\r\n\r\n    let handleChange = (e) => {\r\n        if(e.currentTarget.name === \"background\"){\r\n            console.log(e.currentTarget.name)\r\n            setFormValues( { ...formValues , [ e.currentTarget.name] : uploadCoverRef.current.files[0]})\r\n        }else{\r\n            console.log(e.currentTarget.name)\r\n            setFormValues( { ...formValues , [ e.currentTarget.name] : e.currentTarget.value } )\r\n        }\r\n    }\r\n\r\n    // when the submit button is pressed.\r\n    // remember that the topic object / document will always exist ( card creates it). everytime the submit button is clicked, you will be updating this object / document\r\n    let handleSubmit = (e) => {\r\n        // two parts .....\r\n        // upload the asset (  background) to firebase storage (if the user has provided them) and get their refs\r\n        // get the downloadURL to the asset ( using getDownlodURL ) and upload that to firestore.\r\n        e.preventDefault();\r\n\r\n        ( async () => {\r\n            let assetRefs = { background : \"\" }    // init a local object // poplated by the two uploadBytes below // at the end, it will contain the ref string of the image file in the Firebase storage. we need these strings to include them while modifyign the author\r\n            \r\n            if(formValues.background != undefined && formValues.background != \"\" &&  typeof formValues.background != \"string\"){\r\n                try{\r\n                    // if user has provided an background , upload the background to Firestore\r\n                    // TODO -- change this path think about it\r\n                    let fileRef = ref( storage , `${userUid}/authorBioAssets/${topicUid}/background/`)\r\n                    let backgroundStorageRef = ( await uploadBytes( fileRef , formValues.background)).ref;\r\n                    console.log(backgroundStorageRef);\r\n                    console.log(\"background set to Firebase storage successfully\")\r\n                    console.log(\"pulling path returned object. this path is enough to pull files from Firebase storage \")\r\n                    let backgroundDownloadURL = await getDownloadURL( backgroundStorageRef)\r\n                    assetRefs.background = backgroundDownloadURL; // look out for variable clash.\r\n                }\r\n                catch(error){\r\n                    console.log(error);\r\n                    console.log(\"Error while trying to upload the background to Firebase\")\r\n                }\r\n\r\n            }\r\n            const { name , bio , uid , background  } = formValues;       // pulling out values form formValues yo !!\r\n            // an authors uid will never change ( it is a unique and constant identifier). \r\n\r\n            let updatedTopicObj = Tag({ \r\n                uid, \r\n                name , \r\n                bio , \r\n                background : ( assetRefs.background ?  assetRefs.background : formValues.background ) \r\n            })\r\n            console.log(\"updated topic fields created locally\");\r\n            console.log(updatedTopicObj);\r\n            \r\n            try{\r\n                // find the topic that needs to be updated from the topicPool ( use uid). and then update it.\r\n                let topicQuery = query(collection( db , \"users\" , userUid , \"tagPool\") , where( \"uid\" , \"==\" , topicUid ) );  \r\n                let topicDocRef = (await getDocs(topicQuery)).docs[0].ref;    // check if the ref found is correct.\r\n                await updateDoc(topicDocRef , updatedTopicObj );\r\n                console.log(\"successfully updated the Author document in firestore\");\r\n                displayAcknowlegement();\r\n            }\r\n            catch(error){\r\n                console.log(error);\r\n                console.log(\"Error while trying to update the Author document in the author pool\")\r\n            }\r\n     \r\n            // update name in authorsArr of all the cards that have this author included.\r\n        })()\r\n\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ padding : \"0 1rem 0 1rem\"}}>\r\n            <Box sx={{ height : \"2rem\"}}> <CloseIcon onClick={ closeForm } sx={{ display : \"block\" , marginLeft : \"auto\"}} /> </Box>\r\n            \r\n            {\r\n                acknowlegementVisibility === false \r\n                ? \r\n                <>\r\n                    <Typography variant=\"h5\" sx ={{ ml : 1 , pb : 1 , fontWeight : \"500\"}} > Topic Details </Typography> \r\n                    <Box className=\"formBox\" component=\"form\" sx={{ \r\n                        // display : \"grid\" , gap : \"1rem\" , gridTemplateColumns : \"1fr 1fr\" , width : \"450px\"  \r\n                        minWidth : \"300px\"\r\n                        }}>\r\n                        \r\n                        <Stack spacing={1.3}> \r\n\r\n                            <TextField id=\"outlined-basic\" label=\"Topic name\" variant=\"outlined\" placeholder=\"name\" name=\"name\" onChange={handleChange} value = { formValues.name} />\r\n                            <TextField id=\"outlined-basic\" label=\"Description\" variant=\"outlined\" placeholder=\"\" name=\"bio\" onChange={handleChange} value = { formValues.bio} />\r\n\r\n                            <Box sx={{ width : \"100%\" , height : \"100%\" , gridColumnStart : \"2\" , gridRowStart : \"4\" }}>\r\n                                <input\r\n                                ref={uploadCoverRef}\r\n                                type=\"file\"\r\n                                accept=\"image/*\"\r\n                                style={{ display: \"none\" }}\r\n                                onChange={handleChange}\r\n                                name=\"background\"\r\n                                />\r\n                                <Button\r\n                                onClick={() => uploadCoverRef.current && uploadCoverRef.current.click()}\r\n                                variant=\"contained\"\r\n                                name = \"background\"\r\n                                >\r\n                                Upload Background Image\r\n                                </Button>\r\n                            </Box>\r\n\r\n\r\n                            <Button variant=\"contained\" type=\"submit\"    onClick={ (e) => { handleSubmit(e) } } > Save </Button>  \r\n                        </Stack>\r\n                    </Box> \r\n                </>\r\n                :\r\n                <TopicAcknowlegement/>\r\n\r\n            }\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default TopicForm;\r\n\r\n\r\nlet TopicAcknowlegement = () => {\r\n    return ( \r\n        <Box sx={{ width : \"100%\" , height : \"100%\" , backgroundColor : \"#ddddf348\" ,  display : \"flex\" , justifyContent : \"center\" , alignItems : \"center\" ,  }}> \r\n            <Box \r\n            sx={{ \r\n                display : \"flex\" , \r\n                justifyContent : \"center\" , \r\n                alignItems : \"center\" , \r\n                borderRadius : \"5px\",\r\n                backgroundImage: \"linear-gradient(to right, #904e95, #e96443)\",\r\n                backgroundClip : \"text\",\r\n                textFillColor : \"transparent\",\r\n                backgroundColor : \"black\",\r\n                // background: rgb(131,58,180),\r\n                // background: linear-gradient(90deg, rgba(131,58,180,1) 0%, rgba(253,29,29,1) 33%, rgba(252,176,69,1) 100%),\r\n                \r\n                // width : \"80%\"\r\n                width : \"350px\",\r\n                height : \"300px\",\r\n                }}> \r\n\r\n                <Typography sx={{ fontSize : \"2rem\" , fontWeight : \"600\" , color : \"#e0b3e6\" , minWidth : \"min-content\"}}> \r\n                    Topic Saved ! \r\n                </Typography>\r\n            \r\n            </Box>\r\n        </Box>\r\n)\r\n}\r\n\r\n\r\n","import Control from \"./experimentalForm/control\"\r\nimport {useState} from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport Box from '@mui/material/Box';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport Paper from '@mui/material/Paper';\r\nimport CardForm from \"./cardForm.jsx\";\r\nimport Button from '@mui/material/Button';\r\nimport UserBioForm from \"./userBioForm\";\r\nimport ConfirmDelete from \"./confirmDelete\";\r\nimport AuthorBioForm from \"./authorBioForm\";\r\nimport { useContext } from \"react\";\r\nimport { formsContext } from \"../../contexts/formsContext\";\r\nimport  CardDeleteAcknowlegement  from \"../forms/cardDeleteAcknowlegement\";\r\nimport TopicForm from \"../forms/topicForm\";\r\n\r\n// think of this component as a wrapper component. ie. it has multiple forms in it. when we want to use a form inside another page, \r\n// we embed this Form component in it. We use props to tell Form to display the forms that we want ( Form component has multiple forms in it )\r\n// Forms has \r\n\r\n// open or close the drawer by calling handleDrawerOpen and handleDrawerClose methods respectively. ie. something needs to trigger these.\r\n// chose the form that you want to be displayed inside the drawer by setting the \"currentForm\" state. \r\n\r\n// only one exception. the confirmDelete modal lives outside the drawer. ie. if triggered, it will be  displayed regardless of whether the drawer is open or closed \r\n// open it by changing currentForm state to \"confirmDelete\"\r\n\r\n// options - cardForm , cardFormEdit , userBioForm  , authorBioForm , authorBioFormEdit , confirmDelete \r\n\r\nconst Forms = () => {\r\n  \r\n  let { formProps , closeForm , editCardUid } = useContext(formsContext);\r\n  const [isOpen, setOpen] = useState(true);  // change this to false // handles the drawer. ie internal to the form component. \r\n\r\n// this useOpen only opens and closes the drawer. you can handle the drawer in any way. understand the fundamentals. \r\n  useEffect( () => {\r\n    if(formProps.formType === undefined){\r\n      setOpen(false);\r\n    }\r\n    else{\r\n      setOpen(true)\r\n    }\r\n  } , [ formProps ])\r\n\r\n  return( \r\n  <>\r\n    <Box sx ={{ width : \"100vw\" , height : \"100vh\" , display : \"flex\" , flexDirection : \"column\" }}> \r\n\r\n        <Drawer\r\n          anchor=\"right\"\r\n          open={ isOpen }\r\n          sx={{ width : \"300px\", height : \"400px\" , \r\n        }}\r\n        >\r\n          <Paper sx={{ height : \"100vh\" }}> \r\n\r\n          {/* Drawer will be closed by default. When the user selects a form by clicking on \r\n          either button, the drawer will open and the correct form will be displayed ------ conditional rendering ofc*/}\r\n\r\n            { formProps.formType === \"cardForm\" && <CardForm  />  }\r\n            { formProps.formType  === \"cardFormEdit\" && <CardForm  \r\n            // mode={{ mode : \"edit\"}} editCardUid = { editCardUid } // is this overriding the props that we get from context ??\r\n            />  }\r\n            { formProps.formType  === \"userBioForm\" && <UserBioForm />  }\r\n            { formProps.formType  === \"authorBioForm\" && <AuthorBioForm  />  }\r\n            { formProps.formType  === \"topicForm\" && <TopicForm/>  }\r\n        \r\n          </Paper>\r\n        </Drawer>\r\n        \r\n\r\n        { formProps.formType === \"confirmDelete\" && <ConfirmDelete /> }\r\n\r\n        <CardDeleteAcknowlegement/>\r\n\r\n\r\n    </Box> \r\n  </> )\r\n}\r\n\r\nexport default Forms;\r\n","import { Typography } from \"@mui/material\";\r\nimport Card from \"@mui/material/Card\"\r\nimport Stack from \"@mui/material/Stack\"\r\nimport Chip from \"@mui/material/Chip\"\r\nimport Box from \"@mui/material/Box\"\r\nimport LibraryBooksIcon from '@mui/icons-material/LibraryBooks';\r\nimport Icon from '@mui/material/Icon';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\"\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\r\nimport Button from \"@mui/material/Button\"\r\nimport ModeEditOutlinedIcon from '@mui/icons-material/ModeEditOutlined';\r\nimport DeleteForeverOutlinedIcon from '@mui/icons-material/DeleteForeverOutlined';\r\nimport Forms from \"../forms/Forms.jsx\"\r\nimport { useState } from \"react\";\r\nimport { formsContext } from \"../../contexts/formsContext\";\r\nimport { authContext } from \"../../contexts/authContext\";\r\nimport { useContext } from \"react\"\r\nimport { useHistory } from \"react-router-dom\";\r\n \r\n// The generic card has 2 modes. \"details\" card and \"queue\" card . they can be toggled by changing the cardType prop. by default, the card will be configured as a queue card ie. this variant has a \"Process\" button. no need to pass any prop to use this card \r\n// If however, you want a details card. ie. small variation. ie. Process btn is replaced with 2 buttons. 1. edit 2. delete. if you want this, pass in the cardType prop with value \"details\". while using the card. \r\n\r\nconst GenericCard = ({ cardType = \"details\" , cardData }) => {\r\n    console.log(\"Inside generic card\")\r\n    console.log(cardData);\r\n    let { formProps , addCard , showConfirmDelete , editCard , closeForm  } = useContext(formsContext)\r\n    let { uid : userUid } = useContext(authContext);\r\n    let history = useHistory();\r\n    let cardUid = cardData.uid;\r\n    \r\n\r\n    const styles = {\r\n        // first way of writing styles ie. create a set of k-v pairs in an object , then use them in \r\n        // the sx of the element in which you intend to use them. eg. sx={{ styles.contentCard}}\r\n        \"contentCard\" : { \r\n            width: \"100%\", \r\n            height :\"auto\" , \r\n            px : 2 , \r\n            py : 1 , \r\n            mb : 1.5 \r\n        },\r\n        \"cardTitleContainer\" : {\r\n            justifyContent : \"space-between\" ,\r\n            wrap : \"nowrap\" \r\n        },\r\n        \"cardTitle\" : { \r\n            fontSize : \" 1.07rem\" , \r\n            overflow : \"hidden\" , \r\n            position : \"relative\" , \r\n            top : \"2px\" },\r\n        \"expandArrow\" : {\r\n            position : \"relative\" ,\r\n            bottom : \"6px\"\r\n        },\r\n        \"previewContent\" : { \r\n            fontSize : \"0.9rem\" ,\r\n            height : \"auto\" , \r\n            width : \"100%\" , \r\n            borderRadius : \"4px\" , \r\n            my: 1 , p : 0.5 , \r\n            pb : \"2rem\" , \r\n            boxShadow : 1 , \r\n            backgroundColor : \"white\" \r\n        },\r\n        \"metaCotainer\" : {  \r\n            gap:\"1\" ,\r\n            display:\"flex\", \r\n            flexDirection:\"row\",  \r\n            width:\"100%\", \r\n            justifyContent:\"space-between\" , \r\n            mt : 1 \r\n        },\r\n        \"leftHalf\" : { \r\n            display:\"flex\" , \r\n            flexDirection:\"row\",\r\n            gap : 1,\r\n         },\r\n         \"savedToContainer\" : {\r\n             minWidth : \"max-content\"\r\n        },\r\n        \"accountCircleIcon\" : { \r\n            position : \"relative\" , \r\n            top : \"4px\" , \r\n            fontSize : \"1rem\"\r\n        },\r\n        \"savedToLabel\" : { \r\n            display : \"inline\" , \r\n            pl : 0.5 , \r\n            fontSize : \"0.8rem\" , \r\n            wrap:\"nowrap\"\r\n        },\r\n    }\r\n\r\n\r\n    return(\r\n        <>             \r\n            <Card variant=\"outlined\" className = \"contentCard\" sx={ styles.contentCard }>\r\n    \r\n                <Grid container className=\"cardTitleContainer\" direction=\"row\"  sx={ styles.cardTitleContainer }> \r\n                    <Grid item container className=\"postChipAndTitle\"  xs={11}  direction=\"row\" wrap=\"nowrap\" columnSpacing={1} > \r\n                        <Grid item><Chip size=\"small\"  icon={<LibraryBooksIcon />} label=\"Post\" /> </Grid>\r\n                        <Grid item> <Typography className=\"cardTitle\" wrap=\"nowrap\" sx={ styles.cardTitle }> { cardData.name } </Typography></Grid>\r\n                    </Grid>\r\n                    <Grid item className=\"expandArrow\"  xs={1} sx={styles.expandArrow} >\r\n                         <IconButton \r\n                         className=\"expandArrowIconButton\" \r\n                         sx={{  \"&:hover\" : { color : \"blue\"}}}\r\n                        //  onClick = {}\r\n                         > \r\n                            <KeyboardArrowDownIcon/> \r\n                         </IconButton> \r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Box className = \"previewContainer\" > \r\n                    <Typography className=\"previewContent\"  sx={styles.previewContent}  >\r\n                        { cardData.title}\r\n                    </Typography> \r\n                </Box>\r\n\r\n                <Box className=\"metaContainer\" sx ={styles.metaCotainer} >\r\n                    <Box classname=\"leftHalf\"  gap={1} sx={ styles.leftHalf } >\r\n                        <Box className=\"savedToContainer\" sx={styles.savedToContainer}>\r\n                            < AccountCircleOutlinedIcon className=\"accountCircleIcon\" sx={styles.accountCircleIcon}  />\r\n                            < Typography className=\"savedToLabel\" sx ={styles.savedToLabel}> Saved to  </Typography>\r\n                        </Box>\r\n                        {/* <Box > */}\r\n                        <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\" gap={1}>\r\n                            { \r\n                                cardData.tagsArr.map( (tagObj) => {\r\n                                    let topicUid = tagObj.uid;\r\n                                    return ( <Chip size=\"small\" label={tagObj.name} className=\"tagChip\" sx={{boxShadow : 1 , \"&:hover\" : {textDecoration : \"underline\" , cursor : \"pointer\"}  }} onClick={ () => { history.push(`/topic/${topicUid}`)}}> </Chip> )\r\n                                })\r\n                            }\r\n                        </Box>\r\n                        {/* </Box> */}\r\n                    </Box>\r\n                    <Box classname=\"ProcessBtnContainer\" display=\"flex\" gap={1} flex=\"0 0 max-content\">\r\n                        \r\n                        {/* commenting this out till I get a handle on date and time */}\r\n                        {/* <Typography display=\"inline\" sx={{ fontSize:\"0.8rem\" , paddingRight : \"1rem\"}} >  2 months ago </Typography>  */}\r\n                        \r\n                        { cardType === \"details\" ?\r\n                            (<Box display=\"flex\" gap={1} flex=\"0 0 max-content\"> \r\n                                <ModeEditOutlinedIcon \r\n                                sx={{ fontSize:\"1rem\", position : \"relative\" , top : \"3px\" , \"&:hover\": {  cursor : \"pointer\" , color : \"blue\" } }}\r\n                                onClick = { () => { editCard(cardData.uid) }  }\r\n                                 /> \r\n                                <DeleteForeverOutlinedIcon \r\n                                sx={{ fontSize:\"1rem\" , position : \"relative\" , top : \"3px\",  \"&:hover\": {  cursor : \"pointer\" , color : \"blue\"}} }\r\n                                onClick = { () => { \r\n                                    console.log(\"delete icon was clicked in the generic card\")\r\n                                    showConfirmDelete(cardUid) }  }\r\n                                 />\r\n                            </Box>) \r\n                                : \r\n                            <Box display=\"flex\" gap={1} flex=\"0 0 max-content\"> \r\n                                <Button \r\n                                variant=\"outlined\"  sx ={{ ml : 1 , padding : 2 , color : \"black\" , maxWidth : \"300px\" , height : \"20px\" }} \r\n                                onClick = { () => { editCard(cardData.uid)  } }\r\n                                > \r\n                                    Process \r\n                                </Button>\r\n\r\n                                <DeleteForeverOutlinedIcon \r\n                                sx={{ fontSize:\"1rem\" , position : \"relative\" , top : \"3px\",  \"&:hover\": {  cursor : \"pointer\" , color : \"blue\"}} }\r\n                                onClick = { () => { showConfirmDelete(cardUid) }  }\r\n                                 />\r\n                            </Box>\r\n                        }\r\n\r\n                    </Box>\r\n                </Box>\r\n                \r\n            </Card>  \r\n\r\n        </> \r\n    );\r\n}\r\n \r\nexport default GenericCard;","import { Typography } from \"@mui/material\";\r\nimport Card from \"@mui/material/Card\"\r\nimport Stack from \"@mui/material/Stack\"\r\nimport Chip from \"@mui/material/Chip\"\r\nimport Box from \"@mui/material/Box\"\r\nimport LibraryBooksIcon from '@mui/icons-material/LibraryBooks';\r\nimport Icon from '@mui/material/Icon';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\"\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\r\nimport Button from \"@mui/material/Button\"\r\nimport ModeEditOutlinedIcon from '@mui/icons-material/ModeEditOutlined';\r\nimport DeleteForeverOutlinedIcon from '@mui/icons-material/DeleteForeverOutlined';\r\nimport GenericCard from \"./GenericCard\"\r\nimport { useEffect , useState , useContext } from \"react\";\r\nimport { query , collection , onSnapshot , orderBy } from  \"firebase/firestore\"\r\nimport { db } from \"../../firebase/firebase\";\r\nimport { authContext } from \"../../contexts/authContext\"\r\n\r\n\r\n// cardType refers to the modes of the genericCard ( different modes have different UI) check the GenericCard component for details on the different available modes for Generic Card.\r\n \r\nconst Right = ({ cardType , formProps , setFormProps , cardDataArr , parentPage }) => {\r\n    // \"parentPage\" can be main / explore / queue / author / topic. having this info is useful to customize the behavior of The Right.jsx component based on which page it is being used by. \r\n    \r\n    console.log(\"right component\");\r\n\r\n    useEffect( () => {\r\n        console.log(cardDataArr);\r\n    } , [cardDataArr] )\r\n\r\n    return ( \r\n    <>\r\n    <Paper variant=\"outlined\" sx={{ boxShadow : 1 , minHeight : \"90vh\" , width : \"100%\", p : 1 }} >                      \r\n        <Stack direction=\"row\" spacing={1} sx={{pb : 1.5 }}>\r\n            <Typography >\r\n                Cards ({ cardDataArr.length})\r\n            </Typography> \r\n        </Stack>\r\n\r\n        <Box> \r\n        \r\n        {\r\n            // rendering all the cards\r\n            cardDataArr.map( (card) => {\r\n                return <GenericCard variant=\"outlined\" sx={{ width: \"100%\", height :\"150px\" }} cardData={ card } cardType={ cardType}  />\r\n            })\r\n        }\r\n\r\n        {/* if card count 0  , display a suitable message according to which page the 0 cards are in */}\r\n        \r\n        {\r\n        // 0 cards in Main.jsx page   \r\n            (cardDataArr.length === 0) \r\n            &&             \r\n            (<>\r\n            <Box sx={{ width : \"100%\" , minHeight : \"130px\" , backgroundColor : \"#ddddf348\" ,  display : \"flex\" , justifyContent : \"center\" , alignItems : \"center\" ,  }}> \r\n                <Box \r\n                sx={{ \r\n                    display : \"flex\" , \r\n                    justifyContent : \"center\" , \r\n                    alignItems : \"center\" , \r\n                    borderRadius : \"5px\",\r\n                    backgroundImage: \"linear-gradient(to right, #904e95, #e96443)\",\r\n                    backgroundClip : \"text\",\r\n                    textFillColor : \"transparent\",\r\n                    backgroundColor : \"black\",\r\n                    // background: rgb(131,58,180),\r\n                    // background: linear-gradient(90deg, rgba(131,58,180,1) 0%, rgba(253,29,29,1) 33%, rgba(252,176,69,1) 100%),\r\n                    \r\n                    width : \"80%\"\r\n                    }}> \r\n\r\n                    <Typography sx={{ fontSize : \"3.2rem\" , fontWeight : \"600\" , color : \"#e0b3e6\" , minWidth : \"min-content\"}}> \r\n                        { parentPage === \"main\" && \"No cards to see here !!\" }  \r\n                        { parentPage === \"queue\" && \"The Queue is empty\" }  \r\n                        { parentPage === \"author\" && \"No cards to see here\" } \r\n                        { parentPage === \"topic\" && \"No cards to see here\" } \r\n                    </Typography>\r\n                \r\n                </Box>\r\n            </Box>\r\n                     \r\n            </>)   \r\n        }\r\n\r\n        </Box>\r\n    </Paper>\r\n    </> \r\n    );\r\n}\r\n \r\nexport default Right;\r\n","import List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport Box from \"@mui/material/Box\";\r\nimport Link from \"@mui/material/Link\"\r\nimport Typography  from \"@mui/material/Typography\";\r\nimport KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';\r\nimport Divider from \"@mui/material/Divider\"\r\nimport Stack from \"@mui/material/Stack\"\r\nimport Icon from \"@mui/material/Icon\"\r\nimport { useState , useEffect , useContext  } from \"react\";\r\nimport { query , collection , getDocs } from \"firebase/firestore\"\r\nimport { db } from \"../../firebase/firebase\"; \r\nimport { authContext } from \"../../contexts/authContext\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst   LeftEx = (props) => {\r\n\r\n        let [ topics , setTopics ] = useState([])\r\n        let {uid : userUid } = useContext(authContext);\r\n        let history = useHistory();\r\n\r\n        useEffect(() => {\r\n            (async() => {\r\n                let topics = ( await getDocs( query(collection( db , \"users\" , userUid , \"tagPool\")) )  ).docs;\r\n                let tempArr = topics.map( (topicsDocSnapshot) => {\r\n                    return topicsDocSnapshot.data();\r\n                })\r\n                topics = tempArr;\r\n                console.log(\"the topics pulled for the main page left section ( topics list )\")\r\n                console.log(topics);\r\n                setTopics(topics);\r\n            })();\r\n           \r\n        } , [])\r\n\r\n        \r\n        return(\r\n            <Box sx={{ width: '100%' , px : 1  }}>\r\n\r\n                <Typography sx={{ py : 1 , pl : 1 , fontWeight : 4 , fontSize : \"1rem\"}}>\r\n                    Topics  \r\n                </Typography> \r\n\r\n                <Divider />\r\n\r\n                <Box sx={{ display : \"flex\" , flexDirection : \"row\" , py : 0.8}}> \r\n                    <KeyboardArrowRightIcon sx={{ position : \"relative\" , top : \"2px\"}}/> \r\n                    <Link href=\"#\" underline=\"none\" sx={{ mr : \"auto\" }}>All</Link> \r\n                </Box> \r\n\r\n                <Divider />\r\n\r\n                <Stack sx={{overflowY : \"scroll\" , pl : 0.5 , pt : 1 , py : 2 }}>\r\n\r\n                    { topics.map( (topic) => { return ( \r\n                        <Box sx={{ display : \"flex\" , flexDirection : \"row\"}} onClick={ () => {history.push(`/topic/${topic.uid}`)} }> \r\n                            <KeyboardArrowRightIcon sx={{ position : \"relative\" , top : \"2px\"}}/> \r\n                            <Typography href=\"#\" underline=\"none\" sx={{ mr : \"auto\" , color : \"gray\" , \"&:hover\": {  cursor : \"pointer\" , color : \"blue\"} }}> {topic.name} </Typography> \r\n                        </Box>\r\n                    )}) }\r\n \r\n                </Stack>\r\n\r\n            </Box> \r\n        )\r\n    };\r\n\r\n \r\nexport default LeftEx;","export default __webpack_public_path__ + \"static/media/displayPicPlaceholder.82fa6c75.png\";","export default __webpack_public_path__ + \"static/media/author-background.49f478dc.jpg\";","import * as React from 'react';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from \"@mui/material/Grid\"\r\nimport Paper from \"@mui/material/Paper\"\r\nimport Right from \"../components/main/right.jsx\"\r\nimport LeftEx from '../components/main/leftEx.jsx';\r\nimport createTheme from \"@mui/material/styles/createTheme\"\r\nimport Stack from \"@mui/material/Stack\";\r\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Button from \"@mui/material/Button\";\r\nimport ModeEditOutlineTwoToneIcon from '@mui/icons-material/ModeEditOutlineTwoTone';\r\nimport ModeEditOutlineOutlinedIcon from '@mui/icons-material/ModeEditOutlineOutlined';\r\nimport Image from \"../assets/author-background.jpg\"\r\nimport Forms from \"../components/forms/Forms.jsx\"\r\nimport { useState , useEffect , useContext } from \"react\";\r\n// import { formTriggers} from \"../components/forms/Forms\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport { formsContext } from \"../contexts/formsContext\"\r\nimport { editAuthorProfile } from \"../components/forms/Forms\";\r\nimport { getDocs , doc , collection , query , where , setDoc , onSnapshot , orderBy , deleteDoc , updateDoc } from \"firebase/firestore\"\r\nimport { db } from \"../firebase/firebase\"; \r\n// import { createUser } from \"./firestoreProductionFunctions\";\r\nimport { authContext } from \"../contexts/authContext\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport displayPicPlaceholder from \"../assets/displayPicPlaceholder.png\"\r\n\r\n\r\nlet  Author = (props) => {\r\n\r\n// formType options -- cardForm , cardFormEdit , userBioForm , userBioFormEdit , authorBioForm , confirmDelete ,  (choses the form to be displayed within the drawer)\r\n\r\nlet { authorProfile , deleteCard, addCard, editCard , closeForm , userBioForm , formProps , setFormProps  } = useContext(formsContext)\r\nlet resetFormProps = () => {        // essentially unmounts the form + resets its form state.\r\n    setFormProps( );\r\n  }\r\n\r\nlet [ cards , setCards] = useState([]);\r\nlet [ authorBioDetails , setAuthorBioDetails ] = useState({ name : \"\" , bio : \"\" , avatar : \"\" , website : \"\" , twitter : \"\" , background : \"\" })\r\nlet { uid : userUid } = useContext(authContext);\r\nlet { authorUid } = useParams();   // to catch the url param.\r\nconsole.log(`viewing cards of author with uid ${authorUid}`);\r\n\r\n// getting only the bio details of the author ( not the cards of this order) ( for the page header)\r\nuseEffect( async () => {\r\n// do we need to change where this data is being stored ??? ie. another state.\r\n    let authorData = (await getDocs( query(collection( db , \"users\" , userUid , \"authorPool\" ) , where( \"uid\" , \"==\" , authorUid )) )).docs[0].data();     // // change this. // the second uid in the where from a string to a variable \r\n    let { name , bio , avatar , website , twitter , background , uid } = authorData;\r\n    setAuthorBioDetails({ name , bio , avatar , website , twitter , background, uid  });\r\n} , [])\r\n\r\n  useEffect( () => {\r\n    console.log(\"inside the useEffect, check the cards array out\");\r\n    console.log(cards);\r\n    console.log(\"still inside the useEffect, check the uid out\");\r\n    console.log(userUid);\r\n    console.log(\"Author uid\")\r\n    console.log(authorUid); \r\n\r\n    // change this query --> this is a single author page. it displays all the cards of a PARTICULAR author\r\n    // this query is slightly more complex cause we need to check if a author is included in the tagsArr of a card.\r\n    // although firestore does support querying a collection on the basis of the contents of an array that is set to a document field, the contents should be simple types NOT objects \r\n    // thus, I was forced to get all cards and filter the needed cards myself locally.\r\n    let unsubscribe = onSnapshot( query( collection(db , \"users\" , userUid , \"cards\" ))  , ( querySnapshot ) => {\r\n                // unpack the snapshot returned by onSnapshot and set it to the state\r\n                let cards = querySnapshot.docs.map( ( documentSnapshot) => {\r\n                    // Currently I havent destructured each Card doc. set the whole Card object\r\n                    return documentSnapshot.data();\r\n                })\r\n                // cards now contains an arr of Card objects ( directly from Firebase)\r\n                console.log(\"in the Author component, pulled the cards from Firebase (all cards) , we will filter then locally\")\r\n                console.log(\"unfiltered cards below\")\r\n                console.log(cards);\r\n                // declaring and using it here immediately\r\n                function getCardsOfAuthor( cardsArr , authorUid ){\r\n                    // returns an array of cardObjects. ie. ones that have the author listed in its authorArr\r\n                    console.log(\" cardsArr and authorUid passed to getCardsOfAuthor method\")\r\n                    console.log(cardsArr);\r\n                    let filtered = cardsArr.filter( ( cardObj ) => {\r\n                        // cardsArr expects a boolean\r\n                        let includeCard = false;    // assuming that the card does not include the current author\r\n                        \r\n                        for( let authorObj of cardObj.authorsArr ){\r\n                            if(authorObj.uid === authorUid){\r\n                                includeCard = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                \r\n                        return includeCard; // this will be true or false // when true, the current object will be included in the returned array by filter method. When false, it will be filtered out\r\n                    })\r\n\r\n                    return filtered;\r\n                }\r\n\r\n                cards = getCardsOfAuthor(cards , authorUid)    // TODO -- turn \r\n                console.log(\"cards that belong to this author\")\r\n                console.log(cards);\r\n\r\n                // set the card arr to state. \r\n                setCards(cards);\r\n    })\r\n\r\n    return ( () => {\r\n        console.log(\"unsubscribing from realtime card updates before unmouting\");\r\n        unsubscribe();\r\n    })\r\n} , [authorUid])\r\n\r\n// checking the correct cards arr has been found.\r\nuseEffect( () => {\r\n    console.log(cards);\r\n} , [ cards ] )\r\n\r\n// should delete the current author that is in firebase. + remove the author from all the cards that contained the author.\r\nfunction deleteAuthor(){\r\n    (async () => {\r\n        try{\r\n            // 1. remove the tag from the tagPool\r\n            let xquery = query( collection( db , \"users\" , userUid , \"authorPool\") , where(\"uid\" , \"==\" , authorUid) ) \r\n            let targetDocRef = (await getDocs( xquery )).docs[0].ref;\r\n            await deleteDoc(targetDocRef);\r\n            console.log(`${authorUid} author deleted successfully from authorPool`);\r\n\r\n            // 2. remove the topic ( tag ) from every card that had the tag in it -- ( all the cards in the cards State )\r\n            \r\n            //2.1 process the cards -- sync part\r\n            // processedCards is the arr of cards after the current Tag is removed from their tagsArr.\r\n            let processedCards = cards.map((cardObj) => {\r\n                // removes the curr page card obj from the list of card objects of a particular ar\r\n                    let filteredAuthors = cardObj.authorsArr.filter((authorObj) => {\r\n                        return authorObj.uid != authorBioDetails.uid;\r\n                    })\r\n                // replacing the old tagsArr with the filteredTagsArr ie. the deleted tags are excluded in this new arr\r\n                cardObj.authorsArr = filteredAuthors;   \r\n                if(cardObj.authorsArr.length === 0){ cardObj.inQueue = true }  // checking if the card , once modified , should be in the queue\r\n\r\n                return cardObj;\r\n            })\r\n\r\n            console.log(processedCards)\r\n\r\n            \r\n            // 2.2 set ( update ) all the updated cards to Firebase \r\n            // involves a ton of async operations which we will make work with Promise.all()\r\n            Promise.all(\r\n                processedCards.map( (processedCard) => {\r\n                    console.log(`trying to update ${processedCard.uid }`)\r\n                    console.log(processedCard); \r\n                    return getDocs (query ( collection( db , `users/${userUid}/cards` ) , where( \"uid\" , \"==\" , processedCard.uid) ) )\r\n                    .then( (querySnapshot) => {\r\n                        // current card query doc snapshot ( contians ref in addition to data)\r\n                        let currentCardRef = querySnapshot.docs[0].ref;\r\n                        // passing a subset of obj to the updateDoc for efficiency sake. \r\n                        // If the partial object does not update the object in firestore properly, give it the full object\r\n                        updateDoc( currentCardRef , { authorsArr : processedCard.authorsArr , inQueue : processedCard.inQueue  }  )\r\n                    })\r\n                })\r\n             ).then(() => {\r\n                console.log(\"tags removed from cards successfuly\");\r\n             }).catch( (error) => {\r\n                 console.log(error);\r\n             })\r\n\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            console.log(`Error while trying to delete author with uid ${authorUid}`)\r\n        }\r\n    })();\r\n}\r\n\r\n    return (\r\n        <> \r\n            <Navbar/>\r\n            <CssBaseline />\r\n            <Box sx={{  background: \"#e96443\" , \r\n                        background: \"-webkit-linear-gradient(to bottom, #904e95, #e96443)\",\r\n                        background: \"linear-gradient(to bottom, #904e95, #e96443)\",}}>\r\n            <Container maxWidth=\"lg\" sx={{ border : \"1px solid lightgrey\" , backgroundColor : \"#f7fafc\"}}  >\r\n                <Box> \r\n                    <Box >\r\n                        {/* This is the upper half -- contians banner image , author details */}\r\n                        <Box sx={{ pb : \"1rem\"}}>\r\n                                <Box className=\"bannerImageContainer\" sx={{ height: \"200px\",  width : \"100%\" , backgroundColor : \"white\", overflow : \"hidden\" }}>\r\n                                        {/* img is not a MUI component. it is a HTML element. We use inline style prop on it instead of the sx prop  */}\r\n                                        <img \r\n                                            src ={ authorBioDetails.background }\r\n                                            style={{ \r\n                                                minHeight : \"auto\" , \r\n                                                width: \"100%\",\r\n                                                objectFit : \"cover\",\r\n                                                objectPosition : \"center\"\r\n                                            }}\r\n                                            height=\"200px\"\r\n                                        /> \r\n\r\n                                </Box > \r\n                                <Box   sx={{ display:\"flex\", flexDirection:\"row\"  , height:\"100px\"}} >\r\n                                        <Box className=\"displayPicContainer\" sx={{height : \"100%\", flex : \"0 0 200px\", maxWidth : \"200px\" }}> \r\n                                            <Box \r\n                                                sx={{ \r\n                                                height : \"145px\" , \r\n                                                width : \"145px\" , \r\n                                                backgroundColor : \"#ddddf34\" , \r\n                                                borderRadius : \"50%\" , \r\n                                                position : \"relative\" , \r\n                                                left : \"10%\" , \r\n                                                bottom : \"50%\" , \r\n                                                boxShadow : \"1\" ,\r\n                                                border : \"2px solid white\",\r\n                                                // borderColor : \"white\" , \r\n                                                overflow : \"hidden\" }}\r\n                                            >\r\n                                                <img \r\n                                                    // src={ displayPicPlaceholder }\r\n                                                    src={ authorBioDetails.avatar ? authorBioDetails.avatar : displayPicPlaceholder }\r\n                                                    // src={ authorBioDetails.avatar  && authorBioDetails.avatar} \r\n                                                    style={{ height : \"100%\" , width: \"100%\", objectFit : \"cover\" }} \r\n                                                /> \r\n\r\n                                                {/* try using MUI avatar component instead of the stock html img component  */}\r\n                                            </Box> \r\n                                        </Box>  \r\n                                        <Box className=\"middleContainer\" sx={{height : \"100%\" , flexGrow : \"2\" , display : \"flex\"}}> \r\n                                            <Box sx={{ alignSelf : \"end\" , mb: \"1rem\"  }}>\r\n                                                <Box sx={{ fontWeight : \"600\"}} >\r\n                                                    <Stack direction=\"row\" size=\"0.2rem\">\r\n                                                        <Typography sx={{ fontSize : \"1.3rem\" , fontWeight : \"600\"}}> { authorBioDetails.name }  </Typography>\r\n                                                        <ModeEditOutlineOutlinedIcon\r\n                                                        sx = {{fontSize : \"1.2rem\" , ml : \" 0.5rem\" , position : \"relative\" , top : \"6px\" , \"&:hover\" : { cursor : \"pointer\" , color : \"blue\"} }}\r\n                                                        onClick = { () => { authorProfile(authorUid) } } \r\n                                                        />\r\n                                                    </Stack>\r\n                                                    \r\n                                                </Box> \r\n                                                {/* <Box > { should contain the userBio ( stored in firestore) deactivated for now }  </Box>  */}\r\n                                                <Stack direction=\"row\">\r\n                                                    <BookmarkBorderIcon/>\r\n                                                    <Typography> { cards.length } cards </Typography>\r\n                                                </Stack> \r\n                                            </Box> \r\n                                        </Box>\r\n                                        <Box className=\"rightContainer\" sx={{height : \"100%\" , flexGrow : \"1\" , display : \"flex\"}}>\r\n                                            <Stack direction=\"row\" spacing={1} sx={{ alignSelf : \"end\" , mb : \"1rem\"   }}>\r\n                                                \r\n                                                <Button \r\n                                                variant=\"contained\" \r\n                                                startIcon={<AddIcon/>} \r\n                                                onClick = { addCard } \r\n                                                > \r\n                                                    New Card \r\n                                                </Button>\r\n\r\n                                                <Button \r\n                                                variant=\"outlined\"\r\n                                                color=\"error\"\r\n                                                startIcon={<DeleteIcon />}\r\n                                                onClick={ deleteAuthor }>\r\n                                                    Delete Author\r\n                                                </Button>\r\n\r\n                                            </Stack>\r\n                                        </Box>   \r\n                                </Box> \r\n\r\n                        </Box>  \r\n\r\n                        <Grid item container xs={12} columnSpacing=\"2\" className=\"secondGrid\" sx={{position : \"sticky\", top : 0}} >\r\n                                <Right formProps={formProps} setFormProps={setFormProps} cardType={\"details\"} cardDataArr ={ cards } parentPage=\"author\" />\r\n                        </Grid> \r\n\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n\r\n            {/* notice when Forms will render. ie. only when formProps is not undefined ie. its initial state (check formsContext.jsx ) */}\r\n           { formProps &&  <Forms /> }\r\n            \r\n            </Box>\r\n            \r\n        </>\r\n\r\n    );\r\n}\r\n \r\nexport default Author;\r\n\r\n\r\n","import { signInWithFirebase , signout , auth } from \"../firebase/firebase\";\r\nimport { getAuth, onAuthStateChanged , signOut }  from \"firebase/auth\";\r\nimport { authContext} from \"../contexts/authContext\";\r\nimport { useContext , useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { Typography , Button , Box } from '@mui/material';\r\nimport { db } from \"../firebase/firebase\";\r\nimport SvgIcon from '@mui/material/SvgIcon';\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\n// you only see landing page when you are logged out. ie. you can only Log In from Landing\r\n// conversely, you only see the other pages when you are logged in.\r\n// you can only log in from the Navbar. \r\n\r\nconst Landing = () => {\r\n\r\n  let data = useContext(authContext); \r\n  \r\n    const history = useHistory();\r\n    function routeChange(){\r\n        history.push(\"/author\");\r\n      }\r\n\r\n  let devStyle = { \r\n    border : \"2px solid black\",\r\n  }\r\n\r\n  let topBannerStyle = {\r\n      fontSize : \"2.5rem\",\r\n      textAlign : \"center\"\r\n  }\r\n\r\n  let bsslt = { \r\n    fontSize : \"2em\" , \r\n    color : \"#d6d0d0\" \r\n  }\r\n\r\n\r\n  // black section subsection small text\r\n  let bssst = { \r\n    color : \"#d6d0d0\"\r\n  }\r\n\r\n  // black section subsection image container\r\n  let bssic = { \r\n    display : \"Flex\" , \r\n    justifyContent : \"center\"\r\n  }\r\n  \r\n\r\n    return (\r\n      <>\r\n      <Box sx={{  backgroundColor : \"#F0F3F9\" }}>\r\n      <Container maxWidth=\"lg\" > \r\n\r\n          {/* navbar */}\r\n          <Box sx={{ display : \"flex\" , flexDirection : \"row\" , alignItems : \"center\" }}>\r\n              \r\n              <SvgIcon sx={{ display : \"span\" }}> \r\n                <svg width=\"90\" height=\"24\" viewBox=\"0 0 90 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M0.638885 11.4586C0.876443 10.5935 1.04667 9.70312 1.36301 8.86754C3.07798 4.3388 7.9796 2.14229 12.503 3.84576C12.7256 3.92949 12.9382 4.03942 13.1437 4.1883C11.2385 4.04811 9.47922 4.41535 7.87261 5.44025C4.83397 7.3785 3.48508 11.1945 4.64466 14.5878C5.78379 17.9213 9.12868 20.2192 12.4834 19.9728C16.3459 19.689 19.3674 17.0603 19.9822 13.4484C20.8115 8.57576 17.2611 3.36751 12.3292 2.22426C9.94357 1.67137 7.64609 1.88552 5.45396 3.01262C5.35569 3.06324 5.2483 3.0969 5.14335 3.13327C5.12959 3.13802 5.10519 3.11237 5.04563 3.07708C6.55957 1.871 8.26418 1.14847 10.1453 0.805249C17.216 -0.484837 23.8701 5.33073 23.494 12.4751C23.1833 18.3794 18.6445 22.9636 12.7254 23.3511C7.04109 23.7233 1.94688 19.7118 0.856953 14.0066C0.789489 13.6539 0.711802 13.303 0.638885 12.9514C0.638885 12.4538 0.638885 11.9562 0.638885 11.4586Z\" fill=\"#1D1D1F\"/>\r\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M60.1587 4.33376C60.1606 3.38917 60.1625 2.44459 60.1641 1.5H57.2442C57.2364 1.56384 57.2265 1.62766 57.2167 1.69149C57.1955 1.82859 57.1743 1.96568 57.1742 2.10282C57.1709 7.4752 57.1709 12.8476 57.171 18.22C57.171 19.0252 57.171 19.8305 57.171 20.6358V21.223H60.148V20.5891C60.148 19.58 60.1478 18.5709 60.1476 17.5618C60.1471 15.2773 60.1467 12.9929 60.1485 10.7085C60.1503 8.5836 60.1545 6.45868 60.1587 4.33376ZM51.0673 21.4971C50.859 21.4183 50.6432 21.3505 50.4274 21.2826C49.9479 21.1319 49.4685 20.9812 49.0722 20.7101C48.0571 20.0152 47.7553 18.8773 47.7283 17.7146C47.6941 16.2434 47.6965 14.7714 47.699 13.2994C47.7 12.6872 47.701 12.075 47.6994 11.4628C47.699 11.3152 47.6991 11.1676 47.6992 11.0013L47.6993 10.7484H46.1449V8.23368H47.6738V3.8791L50.6392 3.55613V8.20474H54.4902V10.7277H50.6767C50.6719 10.8062 50.6665 10.8786 50.6613 10.947C50.6512 11.0821 50.6422 11.2013 50.6421 11.3206C50.6398 13.0883 50.6405 14.8561 50.6414 16.6238C50.6415 16.7539 50.6442 16.8844 50.6535 17.0142C50.7643 18.5609 51.4197 19.005 52.9206 18.5409C53.1239 18.478 53.3225 18.3994 53.5393 18.3136L53.5395 18.3135C53.6449 18.2718 53.7548 18.2283 53.8716 18.1841L54.635 20.6435C54.0485 21.0805 53.3657 21.222 52.6843 21.3632C52.4812 21.4052 52.2783 21.4473 52.078 21.4971H51.0673ZM66.2135 14.1574C66.3568 12.1314 68.1521 10.5695 70.1619 10.7223C72.2207 10.7633 73.8074 12.6438 73.7139 14.9911C73.6173 17.4198 71.7564 18.8908 69.7965 18.7625C67.3166 18.6003 66.0189 16.908 66.2135 14.1574ZM68.5285 21.414C68.6605 21.441 68.7926 21.468 68.924 21.4971H70.0471C70.0742 21.4862 70.101 21.4732 70.1278 21.4602L70.1279 21.4601L70.1279 21.4601L70.128 21.4601L70.1281 21.4601C70.1858 21.432 70.2435 21.404 70.3036 21.3972C71.5908 21.2524 72.6491 20.6872 73.488 19.7065C73.5182 19.6712 73.5656 19.6504 73.6351 19.62C73.6755 19.6023 73.7234 19.5813 73.7797 19.5524V21.2208H76.5207V8.26402H73.5797V9.76313C73.5299 9.73025 73.491 9.70678 73.4602 9.68812C73.4104 9.65803 73.3813 9.64046 73.36 9.61612C71.2565 7.21813 66.5769 7.49653 64.4735 10.5351C62.8602 12.8657 62.7328 15.396 63.8334 17.9696C64.5588 19.6659 65.9045 20.7121 67.6753 21.217C67.9556 21.2969 68.2419 21.3555 68.5283 21.414L68.5283 21.414L68.5284 21.414L68.5284 21.414L68.5285 21.414ZM35.451 18.2682C34.1229 17.5167 33.6179 16.2763 33.6067 14.4863C33.6065 12.846 34.6241 11.3534 36.289 10.8689C38.539 10.2143 40.7957 11.6921 41.086 14.0141C41.3025 15.7461 40.9022 17.257 39.3356 18.2261C38.08 19.0029 36.73 18.9919 35.451 18.2682ZM35.9601 21.4142L35.9602 21.4142C36.092 21.4412 36.2239 21.4681 36.3551 21.4971H37.4781C37.5052 21.4862 37.5319 21.4732 37.5587 21.4602C37.6165 21.4321 37.6743 21.404 37.7345 21.3973C39.0218 21.2525 40.08 20.6872 40.9189 19.7066C40.9492 19.6712 40.9967 19.6504 41.0664 19.6199C41.1068 19.6022 41.1546 19.5813 41.2108 19.5524V21.2208H43.9517V8.26405H41.0107V9.76306C40.9606 9.73002 40.9217 9.70649 40.8907 9.68781L40.8907 9.68779C40.8411 9.65785 40.8122 9.64037 40.791 9.61615C38.6874 7.21806 34.0078 7.49668 31.9045 10.5351C30.2913 12.8657 30.1638 15.396 31.2643 17.9696C31.9897 19.6659 33.3355 20.712 35.1063 21.217C35.3868 21.297 35.6734 21.3556 35.9601 21.4142ZM83.0126 21.3631L83.0128 21.3631C83.2209 21.4067 83.4291 21.4503 83.6363 21.4971H84.6471C84.7155 21.4851 84.7839 21.4722 84.8522 21.4593L84.8524 21.4592L84.8525 21.4592C85.0023 21.4309 85.152 21.4026 85.3029 21.3835C86.2054 21.2692 87.039 20.9974 87.7924 20.4623C89.4628 19.2758 89.9716 15.7424 87.39 14.5013C87.0208 14.3238 86.6435 14.1629 86.2662 14.002L86.2661 14.0019C86.0256 13.8994 85.785 13.7968 85.5465 13.6899C85.3699 13.6107 85.1929 13.5321 85.0159 13.4536L85.0155 13.4534L85.0151 13.4532C84.3917 13.1766 83.7682 12.8999 83.1597 12.5938C82.7594 12.3925 82.4971 12.051 82.5681 11.55C82.6426 11.0249 83.0257 10.7953 83.4694 10.668C83.7301 10.5931 84.0222 10.5878 84.2967 10.6054C85.4389 10.6792 86.4102 11.1662 87.3036 11.9506L88.7586 9.68096C86.9947 8.03382 83.727 7.54271 81.6284 8.57776C79.1077 9.82094 78.813 13.1409 81.1105 14.7712C81.6448 15.1503 82.2632 15.4209 82.8726 15.6875C82.947 15.7201 83.0212 15.7525 83.0951 15.7851C83.455 15.9439 83.8238 16.0833 84.1925 16.2227L84.1927 16.2228L84.1927 16.2228C84.6621 16.4002 85.1313 16.5776 85.5815 16.7947C86.3323 17.1568 86.3641 18.0298 85.6717 18.5034C85.4209 18.6749 85.0989 18.7956 84.7964 18.8318C83.1594 19.0278 81.7357 18.547 80.5205 17.3591L79.0322 19.5535C79.8167 20.2582 80.667 20.7546 81.628 21.0353C82.0826 21.1681 82.5476 21.2656 83.0126 21.363L83.0126 21.3631Z\" fill=\"#1D1D1F\"/>\r\n                </svg>\r\n              </SvgIcon>\r\n\r\n              <Typography sx={{ pl : 0.5 , fontSize : \"1.5rem\" }}> atlas </Typography>\r\n\r\n              <Button \r\n              className=\"landingPageNavBtn\" \r\n              onClick = { () => { signInWithFirebase() } }\r\n              sx={{ ml : \"auto\" ,\r\n                    color : \"black\" ,\r\n                    \":hover\" : {\r\n                      backgroundColor : \"white\"\r\n                    }\r\n                    }}> \r\n              Get Started  \r\n              </Button> \r\n\r\n          </Box>  \r\n\r\n          {/* header message -- white section */}\r\n          <Box sx={{ mt : 15 }}> \r\n            <Typography sx={{ fontSize : \"2.7rem\" , textAlign : \"center\" , color : \"#333333\" , fontWeight : \"500\" , py : 0}}> The internet is full of knowlege  </Typography> \r\n            <Typography sx={{ fontSize : \"2.7rem\" , textAlign : \"center\" , color : \"#474EEF\" , pt : \"0\" }}> Stop wasting it </Typography> \r\n            <Typography sx={{ fontSize : \"1.2rem\" , textAlign : \"center\" , color : \"#8C8D93\"}}> Atlas helps you collect, organize and summarize <br/> knowledge rich content from around the web </Typography>\r\n            \r\n            <Box sx={{ display: \"flex\" , justifyContent : \"center\" }}>\r\n              <Button \r\n              variant = \"contained\"\r\n              onClick = { () => { signInWithFirebase() } }\r\n              sx={{ \r\n                  mt : \"1rem\" ,  \r\n                  height : \"3rem\" , \r\n                  width : \"20rem\" , \r\n                  fontSize : \"2rem\",\r\n                  backgroundColor : \"black\" ,\r\n                  \":hover\" : {\r\n                    backgroundColor : \"#4F56EF\"\r\n                  }\r\n              }}>\r\n                Get Started\r\n              </Button> \r\n            </Box>\r\n\r\n          </Box> \r\n        \r\n        {/* black section */}\r\n        <Box sx={{ display : \"flex\" , flexDirection : \"column\" ,  justifyContent : \"center\" , backgroundColor : \"#1D1D1F\" , mt : 10  }}>\r\n          \r\n          {/* black section header (\"How it works\") */}\r\n          <Typography sx={{ textAlign : \"center\" , fontSize : \"2.7rem\" , color : \"#d6d0d0\" , mt : \"1.5rem\" }}> How it works  </Typography>\r\n\r\n          {/* first section within black section */}\r\n          <Box sx={{  display : \"grid\" , gridTemplateColumns : \"1fr 1fr\" , mt : \"1.5rem\" , py : \"2rem\" , justifyContent : \"center\" }}> \r\n            <Box  sx={{ display : \"Flex\" , justifyContent : \"center\"}}>\r\n                <img src=\"\" width=\"400px\" height=\"200px\" style={{ border : \"1px solid white\" , }} />\r\n            </Box> \r\n\r\n            <Box sx={{ maxWidth : \"80%\"}}>\r\n              <Typography sx={{fontSize : \"2em\" , color : \"#d6d0d0\" }}> Save Content Quickly  </Typography> \r\n              <Typography sx={{ color : \"#d6d0d0\" }}> Simply give Atlas a URL and we will stash it away for you !! Its that simple</Typography>\r\n            </Box> \r\n          </Box>\r\n\r\n          {/* second section within the black section */}\r\n          <Box sx={{  display : \"grid\" , gridTemplateColumns : \"1fr 1fr\" , mt : \"1.5rem\" , py : \"2rem\"  , justifyContent : \"center\"  }}> \r\n            <Box sx={{ display: \"flex\" , justifyContent : \"center\"}}>\r\n              <Box sx={{ maxWidth : \"60%\" }}> \r\n                <Typography sx={{fontSize : \"2em\" , color : \"#d6d0d0\" }}>Organize with ease </Typography> \r\n                <Typography sx={{ color : \"#d6d0d0\" }}> Tag people and topics with a single keystroke. Paste in your highlights and add your own notes.</Typography>\r\n              </Box>\r\n            </Box> \r\n\r\n            <Box sx={{ display : \"flex\" , justifyContent : \"center\" }}>\r\n              <img src=\"\" width=\"400px\" height=\"200px\" style={{ border : \"1px solid white\" , }} />\r\n            </Box> \r\n          </Box>\r\n\r\n          {/* third section within the black section */}\r\n          <Box sx={{  display : \"grid\" , gridTemplateColumns : \"1fr 1fr\" , mt : \"1.5rem\" , py : \"2rem\" , justifyContent : \"center\" }}> \r\n            <Box  sx={{ display : \"Flex\" , justifyContent : \"center\"}}>\r\n                <img src=\"\" width=\"400px\" height=\"200px\" style={{ border : \"1px solid white\" , }} />\r\n            </Box> \r\n\r\n            <Box sx={{ maxWidth : \"80%\"}}>\r\n              <Typography sx={{fontSize : \"2em\" , color : \"#d6d0d0\" }}> Never Lose a Link  </Typography> \r\n              <Typography sx={{ color : \"#d6d0d0\" }}> A single click sends an item to your backlog. Read it and tag it when you're ready</Typography>\r\n            </Box> \r\n          </Box>\r\n\r\n        </Box> \r\n         {/* black section end */}\r\n\r\n    \r\n          {/* <Box sx={ { }}> \r\n            <Box>\r\n              <Typography> Build your digital library, effortlessly  </Typography> \r\n              <Typography> Atlas creates a link for every topic you create, capturing the compounding value of knowledge over time. </Typography> \r\n            </Box> \r\n\r\n            <Box>\r\n              <img src=\"\" />\r\n            </Box> \r\n          </Box> */}\r\n\r\n          {/* bottom call to action */}\r\n          <Box sx={{ mt : 10 }}>\r\n            <Typography sx={{ textAlign : \"center\" , fontSize : \"2.7rem\" , color : \"#333333\" , fontWeight : \"500\"}}> Start building your second brain  </Typography>\r\n            <Box sx={{ display : \"flex\" , justifyContent : \"center\" , mt : 3}}> \r\n              <Button \r\n              onClick={ () => { signInWithFirebase() } }\r\n              variant=\"contained\"\r\n              sx={{                   \r\n                height : \"3rem\" , \r\n                width : \"20rem\" , \r\n                fontSize : \"2rem\",\r\n                backgroundColor : \"black\" ,\r\n                \":hover\" : {\r\n                  backgroundColor : \"#4F56EF\"\r\n                }\r\n                \r\n              }}>\r\n                Get Started !! \r\n              </Button> \r\n            </Box>\r\n          </Box> \r\n          \r\n\r\n          {/* Footer */}\r\n          <Box sx={{ backgroundColor : \"#1D1D1F\" , height : \"75px\" , mt : \"2rem\"}}> \r\n              <Typography sx={{ color : \"white\" }}> </Typography> \r\n          </Box>\r\n        \r\n          </Container>\r\n          </Box> \r\n        </>   \r\n        \r\n        );\r\n      \r\n\r\n\r\n      \r\n}\r\n \r\nexport default Landing;\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Stack from \"@mui/material/Stack\"\r\nimport Chip from \"@mui/material/Chip\"\r\nimport { Link} from \"react-router-dom\"\r\nimport Author from \"../Pages/author\"\r\nimport CardForm from \"./forms/cardForm\";\r\nimport AuthorForm from \"./forms/Forms\";\r\nimport Topic from \"../Pages/author\";\r\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\r\nimport LoginIcon from '@mui/icons-material/Login';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { Button , Paper } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport Landing from \"../Pages/landing\";\r\nimport { signout , auth } from \"../firebase/firebase\";\r\nimport { authContext }  from \"../contexts/authContext\";\r\nimport { useContext , useEffect } from \"react\";\r\nimport { onAuthStateChanged } from \"firebase/auth\";\r\nimport { getDocs , doc , collection , query , where , setDoc , onSnapshot , orderBy } from \"firebase/firestore\"\r\nimport { db } from \"../firebase/firebase\"; \r\nimport Fade from '@mui/material/Fade';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\n\r\nlet Navbar = (props) => {\r\n  // my understanding, if this component has rendered, it means that the user is logged in..... thus i've set the default \r\n  // loginState to true. when the user clicks the logout button, I will redirect out to the landing page. ie. logged out. \r\n\r\n  const [ loginState , changeLoginState] = useState(true);\r\n  const [ queueCardCount , setQueueCardCount ] = useState();\r\n  const [ logoutBtnVisibility , changeLogoutBtnVisibility] = useState(false);\r\n\r\n  function toggleLogoutBtnVisibility(){\r\n    logoutBtnVisibility === true ? changeLogoutBtnVisibility(false) : changeLogoutBtnVisibility(true);\r\n  }\r\n\r\n  let { uid : userUid } = useContext(authContext);\r\n\r\n  let handleLoginClick = () => {\r\n    ( loginState === false ) ? changeLoginState(true) :  changeLoginState(false);\r\n    signout(); \r\n    console.log(\"Signed out using navbar\");\r\n  }\r\n\r\n  // get the number of cards that are in the queue.\r\n  useEffect( () => {\r\n    let unsubscribe = onSnapshot( query( collection(db , \"users\" , userUid , \"cards\" ) , where(\"inQueue\" , \"==\" , true )) , (snapshot) => {\r\n        setQueueCardCount(snapshot.docs.length);\r\n    })\r\n\r\n    return ( () => { unsubscribe() } )\r\n  } , [])\r\n\r\n  // let navItems = [ { title : \"Profile\" , link : \"/main\" },\r\n  //                   { title : \"Queue\" , link : \"/queue\" },\r\n  //                   { title : \"Explore\" , link : \"/explore\" },\r\n  //                   { title : \"Author\" , link : \"/author\" },\r\n  //                   { title : \"Landing\" , link : \"/\" }, ]\r\n\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"fixed\" elevation={0}  sx={{ backgroundColor : \"#FFFFFF\" , textColor : \"black\" , padding : \"0px\" ,   }}>\r\n\r\n        <Toolbar sx={{display : \"flex\" , justifyContent : \"center\", height : \"100%\" , disableGutters : 'true' , position: \"relative\" }}>\r\n\r\n          <Stack direction=\"row\" justifyContent=\"center\" spacing={10} sx={{ height : \"100%\"  }} > \r\n            \r\n              <Typography variant=\"h6\" component=\"div\" sx={ { flexGrow : \"1\"  }}  >\r\n                <Link to=\"/main\" style={{ textDecoration : \"none\" , color : \"#b5b3ac\" , \"&:hover\" : { color : \"#5b68d8\"}}}>\r\n                  All Cards\r\n                  </Link>\r\n              </Typography>\r\n            \r\n            <Stack direction=\"row\" sx={{ color : \"#a4b1c3\" }}> \r\n                <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow : \"1\" }}>\r\n                    <Link to=\"/queue\" style={{ textDecoration : \"none\" , color : \"#b5b3ac\" , \"&:hover\" : { color : \"#5b68d8\"} }} > \r\n                      Queue\r\n                    </Link>\r\n                </Typography>\r\n\r\n                {/* render the queue card counter chip only if / once we know how many they are */}\r\n                { queueCardCount > 0 && <Chip label={ queueCardCount } size=\"small\" sx={{ position : \"relative\" , top : \"5px\" , ml : \"0.2rem\" , color : \"red\" , backgroundColor : \"#ffbcb8\"}} />  }\r\n                \r\n            </Stack>\r\n\r\n            <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow : \"1\" }}>\r\n                    <Link to=\"/explore\" style={{ textDecoration : \"none\" , color : \"#b5b3ac\" , \"&:hover\" : { color : \"#5b68d8\"} }} > \r\n                      Explore\r\n                    </Link>\r\n            </Typography>\r\n\r\n            {/* The Author page should not be accessible through the Navbar.It is a param page.\r\n             it can only access when the user presses on an author in the explore section  */}\r\n            {/* <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow : \"1\" }}>\r\n                    <Link to=\"/author\" style={{ textDecoration : \"none\" , color : \"#b5b3ac\" , \"&:hover\" : { color : \"#5b68d8\"} }} > \r\n                      Author\r\n                    </Link>\r\n            </Typography> */}\r\n\r\n            {/* <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow : \"1\" }}>\r\n                    <Link to=\"/demoPage\" style={{ textDecoration : \"none\" , color : \"#b5b3ac\" , \"&:hover\" : { color : \"#5b68d8\"} }} > \r\n                      Demo Page\r\n                    </Link>\r\n            </Typography> */}\r\n\r\n            {/* The Landing page should not be accessible through the Navbar. thus commenting it */}\r\n            {/* <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow : \"1\" }}>\r\n                    <Link to=\"/\" style={{ textDecoration : \"none\" , color : \"#b5b3ac\" , \"&:hover\" : { color : \"#5b68d8\"} }} > \r\n                      Landing\r\n                    </Link>\r\n            </Typography> */}\r\n\r\n            {/* <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow : \"1\" }}>\r\n                    <Link to=\"/topic\" style={{ textDecoration : \"none\" , color : \"#b5b3ac\" , \"&:hover\" : { color : \"#5b68d8\"} }} > \r\n                      Topic\r\n                    </Link>\r\n            </Typography> */}\r\n\r\n            {/* this iconbutton is pushing the topbar links for some reason */}\r\n            <ClickAwayListener onClickAway={ () => { changeLogoutBtnVisibility(false) } }>\r\n            <IconButton onClick ={ toggleLogoutBtnVisibility } sx ={{ position : \"absolute\" , right : \"3rem\" , bottom : \"12px\" }}> \r\n              { \r\n                loginState === true \r\n                ?\r\n                <AccountCircleIcon/> \r\n                : \r\n                null\r\n              }\r\n\r\n              <>\r\n              \r\n                <Fade in={ logoutBtnVisibility }>\r\n                  {/* <ClickAwayListener > */}\r\n                  <Box sx={{ border : \"1px solid #AE5579\" , borderRadius : \"5px\" , position: \"absolute\"  , top : \"75%\" , boxShadow : 2 , height : \"auto\" , width : \"auto\"}}> \r\n                    \r\n                      <Paper sx={{ py : 0.5 , px  : 1 , backgroundColor : \"#EDF2F7\" }}>\r\n                        <Button \r\n                        sx={{ color : \"#AE5579\" , fontWeight : \"600\"}}\r\n                        onClick={ handleLoginClick }\r\n                        > Logout </Button> \r\n                      </Paper> \r\n                    \r\n                  </Box>\r\n                  {/* </ClickAwayListener> */}\r\n                </Fade>\r\n\r\n              </>\r\n\r\n            </IconButton>\r\n            </ClickAwayListener>\r\n\r\n            \r\n\r\n            \r\n          </Stack>\r\n\r\n        </Toolbar>\r\n\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}\r\n\r\n\r\nexport default Navbar;\r\n\r\n","import  axios  from \"axios\";\r\nimport  { Readability , isProbablyReaderable }  from \"@mozilla/readability\";\r\n\r\nexport const a = \"a constant\";\r\n \r\nasync function getMarkup( url){\r\n    try{\r\n        let response =  await axios.get(url);\r\n        console.log(response)\r\n        return response;\r\n    }\r\n    catch(error){\r\n        console.log(\"couldnt get markup of card url\")\r\n        console.log(error);\r\n    }\r\n    \r\n}\r\n\r\nlet url = \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"\r\n// https://dev.to/ramonak/javascript-how-to-access-the-return-value-of-a-promise-object-1bck            // seems to be less secure \r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\r\n\r\n// the page html turned into a document. ( readibility js needs document object as an input)\r\n// calling the async getMarkup function and returning its value\r\n// let pageDocument = getMarkup(url).then((response) => {\r\n//     console.log(\"got the response, started parsing the page to make it readable.\");\r\n//     let htmlSting = response.data;\r\n//     const pageDocument = new DOMParser().parseFromString(htmlSting , 'text/html');\r\n\r\n//     // check if the page is readable\r\n//     if(isProbablyReaderable(pageDocument) == false ){\r\n//         console.log(\"Page is probably not readable\");\r\n//     }else{\r\n//         // getting the readable page (reader mode )HTML\r\n//         var pageDocumentClone = pageDocument;   // this isnt a clone, change this line to actually clone the object\r\n//         var readablePageObject = new Readability(pageDocumentClone).parse();\r\n//         // check github @mozilla/readability to understand the object schema and meaning.\r\n//         console.log(readablePageObject.content);    // html of readable content. \r\n//     }\r\n\r\n// }).catch((error) => {\r\n//     console.log(error);\r\n// })  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from \"@mui/material/Grid\"\r\nimport Paper from \"@mui/material/Paper\"\r\nimport Right from \"../components/main/right.jsx\"\r\nimport LeftEx from '../components/main/leftEx.jsx';\r\nimport createTheme from \"@mui/material/styles/createTheme\"\r\nimport Stack from \"@mui/material/Stack\";\r\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport Button from \"@mui/material/Button\";\r\nimport ModeEditOutlineTwoToneIcon from '@mui/icons-material/ModeEditOutlineTwoTone';\r\nimport ModeEditOutlineOutlinedIcon from '@mui/icons-material/ModeEditOutlineOutlined';\r\nimport Forms from \"../components/forms/Forms.jsx\"\r\n// import { formTriggers} from \"../components/forms/Forms\";\r\nimport Navbar from \"../components/Navbar\"\r\nimport {deleteUser} from \"../firebase/firestoreFunctions\";      // these functions are not used in the app. I created the file just to get he hang of firestore. \r\nimport { db } from \"../firebase/firebase\";\r\nimport { collection, addDoc , deleteDoc , doc , setDoc , getDoc , getDocs , query , where , updateDoc , serverTimestamp , onSnapshot , orderBy } from \"firebase/firestore\"; \r\nimport { formsContext } from \"../contexts/formsContext\"\r\n// import { createUser } from \"./firestoreProductionFunctions\";\r\nimport { authContext } from \"../contexts/authContext\";\r\nimport { useEffect , useState , useContext } from \"react\";\r\n// import CardDeleteAcknowlegement from \"../components/forms/cardDeleteAcknowlegement\";\r\nimport CardDeleteAcknowlegement from \"../components/forms/cardDeleteAcknowlegement\";\r\nimport { a } from \"../readerView/readerView\";   // just for testing. get rid of it once readerView is successfully implemented. \r\nimport { b } from \"../firebase/firestoreProductionFunctions\";   // just to get firestoreProductionFunctions to run and its \r\nimport displayPicPlaceholder from \"../assets/displayPicPlaceholder.png\"\r\n\r\nlet  Main = (props) => {    \r\n\r\n    let {  userBioForm , authorProfile , deleteCard , addCard , editCard , formProps , setFormProps } = useContext(formsContext)\r\n    let [ userData , setUserData ] = useState(\"\");   // if the user explicitly enters a name by clicking on the edit symbol in the main page\r\n    // displayName comes from the authContext ( the name received from firebase while authenticating the user).\r\n      \r\n    let [ cards , setCards ] = useState([]);   // default value -- no cards\r\n    let { uid : userUid , displayName   } = useContext(authContext);\r\n    let resetFormProps = () => {\r\n    setFormProps( );    \r\n    }\r\n      \r\n      useEffect( () => {\r\n\r\n        // getting the userName , avatar and the background of the currently logged in user from Firebase. to be displayed on the top banner of the main page.\r\n          ( async() => {\r\n            // user doc contains all data of the user. ie. name etc, authorPool , cards , tagPool.\r\n            let userDocData  = (await getDoc(doc(db , \"users\" , userUid ))).data();\r\n            let { userName, avatar , background } = userDocData;    \r\n            console.log(\"Extracted and filtered data destined for the main page\");\r\n            console.log({ userName  , avatar , background })\r\n            setUserData({ userName  , avatar , background });\r\n          })();\r\n \r\n          console.log(`current userUid ${userUid}`);\r\n          // getting all the cards that are to be displayed on this page. ( inside the Right component )\r\n          let unsubscribe = onSnapshot( query( collection(db , \"users\" , userUid , \"cards\" ) , orderBy(\"timestamp\"))  , ( querySnapshot ) => {\r\n                      // unpack the snapshot returned by onSnapshot and set it to the state\r\n                      let cards = querySnapshot.docs.map( ( documentSnapshot) => {\r\n                          // Currently I havent destructured each Card doc. set the whole Card object\r\n                          return documentSnapshot.data();\r\n                      })\r\n                      // cards now contains an arr of Card objects ( directly from Firebase)\r\n                      console.log(\"in the Main page. Cards pulled from Firebase. View below\")\r\n                      console.log(cards);\r\n  \r\n                      // set the card arr to state. \r\n                      setCards(cards);\r\n          })\r\n          return ( () => {\r\n              console.log(\"unsubscribing from realtime card updates before unmouting\");\r\n              unsubscribe();\r\n          })\r\n      } , [])\r\n\r\n      useEffect( () => {\r\n        console.log(cards);\r\n      }, [ cards ])\r\n\r\n    return (\r\n        <> \r\n            <Navbar/>\r\n            <CssBaseline />\r\n            <Box sx={{  background: \"#e96443\" , \r\n                        background: \"-webkit-linear-gradient(to bottom, #904e95, #e96443)\",\r\n                        background: \"linear-gradient(to bottom, #904e95, #e96443)\",\r\n                        backgroundAttachment : \"fixed\",\r\n                        minHeight : \"100%\"\r\n                        }}>\r\n            <Container maxWidth=\"lg\" sx={{ border : \"1px solid lightgrey\" , backgroundColor : \"#f7fafc\"}}  >\r\n                <Box> \r\n                    <Box sx={{ minHeight: '100vh', px : 0.1 }} >\r\n                        <Box sx={{ pb : \"1rem\"}}>\r\n                            <Box className=\"bannerImageContainer\" sx={{ height: \"200px\",  width : \"100%\" , backgroundColor : \"white\", overflow : \"hidden\" }}>\r\n                                     {/* img is not a MUI component. it is a HTML element. We use inline style prop on it instead of the sx prop  */}\r\n                                     <img \r\n                                        src ={ userData.background }\r\n                                        style={{ \r\n                                            minHeight : \"auto\" , \r\n                                            width: \"100%\",\r\n                                            objectFit : \"cover\",\r\n                                            objectPosition : \"center\"\r\n                                         }}\r\n                                         height=\"200px\"\r\n                                     /> \r\n\r\n                            </Box > \r\n                            <Box   sx={{ display:\"flex\", flexDirection:\"row\"  , height:\"100px\"}} >\r\n                                    <Box className=\"displayPicContainer\" sx={{height : \"100%\", flex : \"0 0 200px\", maxWidth : \"200px\" }}> \r\n                                        <Box \r\n                                            sx={{ \r\n                                            height : \"145px\" , \r\n                                            width : \"145px\" , \r\n                                            backgroundColor : \"#ddddf34\" , \r\n                                            borderRadius : \"50%\" , \r\n                                            position : \"relative\" , \r\n                                            left : \"10%\" , \r\n                                            bottom : \"50%\" , \r\n                                            boxShadow : \"1\" ,\r\n                                            border : \"2px solid white\",\r\n                                            // borderColor : \"white\" , \r\n                                            overflow : \"hidden\" }}\r\n                                        >\r\n                                            <img \r\n                                                // src={ displayPicPlaceholder }\r\n                                                src={ userData.avatar ? userData.avatar : displayPicPlaceholder }\r\n                                                // src={ userData.avatar  && userData.avatar} \r\n                                                style={{ height : \"100%\" , width: \"100%\", objectFit : \"cover\" }} \r\n                                            /> \r\n\r\n                                            {/* try using MUI avatar component instead of the stock html img component  */}\r\n                                        </Box> \r\n                                    </Box>  \r\n                                    <Box className=\"middleContainer\" sx={{height : \"100%\" , flexGrow : \"2\" , display : \"flex\"}}> \r\n                                        <Box sx={{ alignSelf : \"end\" , mb: \"1rem\"  }}>\r\n                                            <Box sx={{ fontWeight : \"600\"}} >\r\n                                                <Stack direction=\"row\" size=\"0.2rem\">\r\n                                                    <Typography sx={{ fontSize : \"1.3rem\" , fontWeight : \"600\"}}> { userData.userName ? userData.userName : displayName }  </Typography>\r\n                                                    <ModeEditOutlineOutlinedIcon\r\n                                                     sx = {{fontSize : \"1.2rem\" , ml : \" 0.5rem\" , position : \"relative\" , top : \"6px\" , \"&:hover\" : { cursor : \"pointer\" , color : \"blue\"} }}\r\n                                                     onClick = { () => { userBioForm() } } \r\n                                                     />\r\n                                                </Stack>\r\n                                                 \r\n                                            </Box> \r\n                                            {/* <Box > { should contain the userBio ( stored in firestore) deactivated for now }  </Box>  */}\r\n                                            <Stack direction=\"row\">\r\n                                                <BookmarkBorderIcon/>\r\n                                                <Typography> { cards.length } cards </Typography>\r\n                                            </Stack> \r\n                                        </Box> \r\n                                    </Box>\r\n                                    <Box className=\"rightContainer\" sx={{height : \"100%\" , flexGrow : \"1\" , display : \"flex\"}}>\r\n                                        <Stack direction=\"row\" sx={{ alignSelf : \"end\" , mb : \"1rem\"}}>\r\n                                            <Button \r\n                                            variant=\"contained\" \r\n                                            startIcon={<AddIcon/>} \r\n                                            onClick = { addCard } \r\n                                            > \r\n                                                New Card \r\n                                            </Button>\r\n                                        </Stack>\r\n                                    </Box>   \r\n                            </Box> \r\n\r\n                        </Box>  \r\n\r\n                        <Grid item container xs={12} columnSpacing=\"2\" className=\"secondGrid\" sx={{position : \"sticky\", top : 0}} >\r\n                            <Grid item xs={12} md={3} sx={{ mb : 1 }}>\r\n                                <Paper variant=\"outlined\" sx={{ boxShadow : 1 , height : \"100%\" , width : \"100%\"  } }> \r\n                                    <LeftEx/>\r\n                                </Paper>\r\n                            </Grid> \r\n\r\n                            <Grid item xs={12} md={9}>\r\n                                <Right cardDataArr = { cards } parentPage=\"main\" />\r\n                            </Grid>\r\n                        </Grid> \r\n\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n\r\n            { formProps &&  <Forms { ...formProps } setFormProps = {setFormProps} resetFormProps = { resetFormProps} /> }\r\n            \r\n            \r\n\r\n            </Box>\r\n\r\n            \r\n        </>\r\n\r\n    );\r\n}\r\n \r\nexport default Main;","import { Typography } from \"@mui/material\";\r\nimport Card from \"@mui/material/Card\"\r\nimport Stack from \"@mui/material/Stack\"\r\nimport Chip from \"@mui/material/Chip\"\r\nimport Box from \"@mui/material/Box\"\r\nimport LibraryBooksIcon from '@mui/icons-material/LibraryBooks';\r\nimport Icon from '@mui/material/Icon';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\"\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Container from \"@mui/material/Container\"\r\nimport CssBaseline from \"@mui/material/CssBaseline\"\r\nimport AccountCircleOutlinedIcon from '@mui/icons-material/AccountCircleOutlined';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from \"@mui/material/Button\";\r\nimport { createTheme } from \"@mui/material/styles\"\r\nimport ButtonBase from \"@mui/material/ButtonBase\"\r\nimport GenericCard from \"../components/main/GenericCard\";\r\nimport Navbar from \"../components/Navbar\"\r\nimport { authContext } from \"../contexts/authContext\";\r\nimport { formsContext } from \"../contexts/formsContext\";\r\nimport { useEffect , useState , useContext } from \"react\";\r\nimport { collection, addDoc , deleteDoc , doc , setDoc , getDoc , getDocs , query , where , updateDoc , serverTimestamp , onSnapshot , orderBy } from \"firebase/firestore\"; \r\nimport { db} from \"../firebase/firebase\";\r\nimport Right from \"../components/main/right\"\r\nimport Forms from \"../components/forms/Forms.jsx\"\r\n\r\n\r\n\r\nconst Queue = (props) => {\r\n\r\n    let { authorProfile , deleteCard, addCard, editCard , closeForm , userBioForm , formProps , setFormProps  } = useContext(formsContext)\r\n    let resetFormProps = () => {        // essentially unmounts the form + resets its form state.\r\n        setFormProps( );\r\n    }\r\n\r\n    let [ cards , setCards] = useState([]);\r\n    let { uid : userUid } = useContext(authContext);\r\n  \r\n    useEffect( () => {\r\n      console.log(\"inside the useEffect, check the cards array out\")\r\n      console.log(cards);\r\n      console.log(\"still inside the useEffect, check the uid out\");\r\n      console.log(userUid);\r\n      let unsubscribe = onSnapshot( query( collection(db , \"users\" , userUid , \"cards\" ) , where(\"inQueue\" , \"==\" , true))  , ( querySnapshot ) => {\r\n                  // unpack the snapshot returned by onSnapshot and set it to the state\r\n                  let cards = querySnapshot.docs.map( ( documentSnapshot) => {\r\n                      // Currently I havent destructured each Card doc. set the whole Card object\r\n                      return documentSnapshot.data();\r\n                  })\r\n                  // cards now contains an arr of Card objects ( directly from Firebase)\r\n                  console.log(\"On the Queue page, pulled the cards from Firebase ( all Queue cards\")\r\n                  console.log(cards);\r\n  \r\n                  // set the card arr to state. \r\n                  setCards(cards);\r\n      })\r\n  \r\n      return ( () => {\r\n          console.log(\"unsubscribing from realtime card updates before unmouting\");\r\n          unsubscribe();\r\n      })\r\n  } , [])\r\n\r\n  // sorting the cards locally instead of using a composite query. ( currently only in case of Queue page )\r\n  function sortAccToTimestamp(cardsArr){\r\n    cardsArr.sort( (firstCard , secondCard) => {\r\n        if(firstCard.timestamp.seconds > secondCard.timestamp.seconds){\r\n            //  second should be before first in the sorted array\r\n            return 1;\r\n        }\r\n        else if( firstCard.timestamp.seconds < secondCard.timestamp.seconds){\r\n            // first should be before second in the sorted array\r\n            return -1;\r\n        }else if(firstCard.timestamp.seconds === secondCard.timestamp.seconds){\r\n            // both were made at the same time, maintain the original order ( stable sort)\r\n            return 0;\r\n        }\r\n    })\r\n  }\r\n\r\n    let styles = {\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Navbar/>\r\n        <CssBaseline/>\r\n        <Box sx={{      background: \"#e96443\" , \r\n                        background: \"-webkit-linear-gradient(to bottom, #904e95, #e96443)\",\r\n                        background: \"linear-gradient(to bottom, #904e95, #e96443)\",\r\n                        pt : \"2em\",\r\n                        backgroundAttachment : \"fixed\",\r\n                        minHeight : \"100vh\"      \r\n                        }}>\r\n\r\n            <Container maxWidth=\"lg\"> \r\n                <Right formProps={formProps} setFormProps={setFormProps} cardType={\"queue\"} cardDataArr ={ cards } parentPage=\"queue\"/>\r\n            </Container>\r\n\r\n            { formProps &&  <Forms { ...formProps } setFormProps = {setFormProps} resetFormProps = { resetFormProps} /> }\r\n        </Box>\r\n        </> \r\n\r\n      );\r\n}\r\n \r\nexport default Queue;\r\n\r\n","import * as React from 'react';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport  Paper from \"@mui/material/Paper\"\r\nimport Typography from \"@mui/material/Typography\"\r\nimport Icon from \"@mui/material/Icon\"\r\nimport BookmarksIcon from '@mui/icons-material/Bookmarks';\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport BookmarksOutlinedIcon from '@mui/icons-material/BookmarksOutlined';\r\nimport Navbar from \"../components/Navbar\"\r\nimport { authContext } from \"../contexts/authContext\";\r\nimport { formsContext } from \"../contexts/formsContext\"\r\nimport { useEffect , useState , useContext } from \"react\";\r\nimport { collection, addDoc , deleteDoc , doc , setDoc , getDoc , getDocs , query , where , updateDoc , serverTimestamp , onSnapshot , orderBy } from \"firebase/firestore\"; \r\nimport { db } from \"../firebase/firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Explore = () => {\r\n\r\n    let { editAuthorProfile , deleteCard , addCard , editCard , formProps , setFormProps } = useContext(formsContext)\r\n    let resetFormProps = () => {    \r\n        setFormProps( );\r\n      }\r\n\r\n    let [ cards , setCards ] = useState([]);   // default value -- no cards\r\n    let { uid : userUid } = useContext(authContext);\r\n\r\n      useEffect( () => {\r\n          console.log(\"inside the useEffect, check the cards array out\")\r\n          console.log(cards);\r\n          console.log(\"still inside the useEffect, check the uid out\");\r\n          console.log(userUid);\r\n          let unsubscribe = onSnapshot( query( collection(db , \"users\" , userUid , \"authorPool\" ))  , ( querySnapshot ) => {\r\n                      // unpack the snapshot returned by onSnapshot and set it to the state\r\n                      let cards = querySnapshot.docs.map( ( documentSnapshot) => {\r\n                          // Currently I havent destructured each Card doc. set the whole Card object\r\n                          console.log(`card with uid ${documentSnapshot.data().uid}`);\r\n                          return documentSnapshot.data();\r\n                      })\r\n                      // cards now contains an arr of Card objects ( directly from Firebase)\r\n                      console.log(\"in the Right ( main ) component, pulled the cards from Firebase ( all cards\")\r\n                      console.log(cards);\r\n  \r\n                      // set the card arr to state. \r\n                      setCards(cards);\r\n          })\r\n  \r\n          return ( () => {\r\n              console.log(\"unsubscribing from realtime card updates before unmouting\");\r\n              unsubscribe();\r\n          })\r\n      } , [])\r\n\r\n\r\n    return (\r\n        <> \r\n            <Navbar/>\r\n            <CssBaseline/> \r\n            <Box sx={{      background: \"#e96443\" , \r\n                            background: \"-webkit-linear-gradient(to bottom, #904e95, #e96443)\",\r\n                            background: \"linear-gradient(to bottom, #904e95, #e96443)\",\r\n                            pt : \"2rem\",\r\n                            minHeight : \"auto\"}}>\r\n            <Container maxWidth=\"lg\">\r\n\r\n            \r\n            <Paper variant=\"outlined\" sx={{ boxShadow : 1 , minHeight : \"100vh\" , width : \"100%\", px : 1 , backgroundColor : \"#F7FAFC\" }} >  \r\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ py : 2 }}>\r\n                        <Typography variant=\"h4\"> Creators </Typography>\r\n                        {/* <Typography sx={{ textDecoration : \"underline\"}}>  View More </Typography> */}\r\n                </Box> \r\n                \r\n                {\r\n                    \r\n                    cards.length > 0\r\n                    &&\r\n                    <Box display=\"grid\" gridTemplateColumns=\"repeat( 2 , 1fr)\" gridTemplateRows=\"repeat( autoFit , 110px )\" gap={2} sx={{ border : \"1px solid #EDF2F7\" }} > \r\n                        \r\n                        {\r\n                            cards.map( (author) => {\r\n                                return <AuthorCard author ={ author } />\r\n                            })\r\n                        }\r\n\r\n                    </Box>\r\n                }\r\n\r\n                {\r\n                    // in case there are 0 cards, display this message.\r\n                    cards.length === 0 \r\n                    && \r\n                    <> \r\n                        <Box sx={{ width : \"100%\" , minHeight : \"130px\" , backgroundColor : \"#ddddf348\" ,  display : \"flex\" , justifyContent : \"center\" , alignItems : \"center\" ,  }}> \r\n                            <Box \r\n                            sx={{ \r\n                                display : \"flex\" , \r\n                                justifyContent : \"center\" , \r\n                                alignItems : \"center\" , \r\n                                borderRadius : \"5px\",\r\n                                backgroundImage: \"linear-gradient(to right, #904e95, #e96443)\",\r\n                                backgroundClip : \"text\",\r\n                                textFillColor : \"transparent\",\r\n                                backgroundColor : \"black\",\r\n                                // background: rgb(131,58,180),\r\n                                // background: linear-gradient(90deg, rgba(131,58,180,1) 0%, rgba(253,29,29,1) 33%, rgba(252,176,69,1) 100%),\r\n                                \r\n                                width : \"80%\"\r\n                                }}> \r\n\r\n                                <Typography sx={{ fontSize : \"3.2rem\" , fontWeight : \"600\" , color : \"#e0b3e6\" , minWidth : \"min-content\"}}> \r\n                                    Add a card to create an author\r\n                                </Typography>\r\n                            \r\n                            </Box>\r\n                        </Box>\r\n                    </>\r\n                }\r\n\r\n\r\n            </Paper>\r\n\r\n            </Container>\r\n        </Box>\r\n        </>\r\n      );\r\n}\r\n \r\nexport default Explore;\r\n\r\n// to be used in the above page ie Explore component.\r\nconst AuthorCard = ({ author }) => {\r\n\r\n    // I have currently deactivated the card counter for convenience\r\n\r\n    // let [ noOfAuthorCards , setNoOfAuthorCards ] = useState();\r\n    // let { uid : userUid } = useContext(authContext);\r\n\r\n    let history = useHistory();\r\n\r\n    // run only once. To find out how many cards does this author have.\r\n    // useEffect( () => {\r\n    //     onSnapshot( query( collection(db , \"users\" , userUid , \"cards\" ) , where(\"uid\" , \"==\" , author.uid) ) , (onSnapshot) => {\r\n    //         let noOfAuthorCards = onSnapshot.docs.length;    // how many cards does this author have.\r\n    //         console.log(onSnapshot.docs);\r\n    //         setNoOfAuthorCards(noOfAuthorCards);    // settting the state\r\n    //     } )\r\n\r\n    // } , [])\r\n\r\n    // get the photo of the author from firestore \r\n    // useEffect( () => {\r\n    //     onSnapshot( )\r\n    // })\r\n\r\n    return( \r\n        <Box \r\n        className=\"creatorCard\" \r\n        gridColumns={{ xs:\"span 2\", sm:\"span 1\" }}\r\n        onClick={ () => {\r\n            console.log(`user clicked on  author with uid ${author.uid} , redirecting to author page`) \r\n            history.push(`/author/${author.uid}`) } }> \r\n        <Box sx={{  p:\"1.5rem\", width : \"100%\" , borderRadius : \"5px\", boxShadow: \"rgba(0, 0, 0, 0.16) 0px 1px 4px\" }} >\r\n            <Box  sx={{ display : \"flex\" , gap : \"1\" ,  flexDirection : \"row\"}}>\r\n                <Avatar sx={{ height : 65 , width : 65 , alignSelf : \"center\", border :\"3px solid white\"}} src={ author.avatar } /> \r\n                <Box sx={{ pl : \"1rem\"}}>\r\n                    <Typography variant=\"h5\" sx={{ fontSize : \"primary\"}} noWrap = { true }> { author.name } </Typography>\r\n                    \r\n                    {/* Deactivating the card count for convenience */}\r\n                    {/* <Box >\r\n                        {\r\n                            noOfAuthorCards \r\n                            && \r\n                            (\r\n                                <> \r\n                                    <BookmarksOutlinedIcon sx={{ fontSize : \"1rem\"}} /> \r\n                                    <Typography gutterBottom=\"true\" noWrap=\"true\" variant=\"body\" sx ={{ position : \"relative\" , bottom : \"2px\" , fontSize : '1rem'}} >\r\n                                        { noOfAuthorCards } \r\n                                    </Typography> \r\n                                </>\r\n                            )\r\n\r\n                        }\r\n\r\n                    <BookmarksOutlinedIcon sx={{ fontSize : \"1rem\"}} /> \r\n                    <Typography gutterBottom=\"true\" noWrap=\"true\" variant=\"body\" sx ={{ position : \"relative\" , bottom : \"2px\" , fontSize : '1rem'}} >\r\n                        { noOfAuthorCards } \r\n                    </Typography> \r\n\r\n                    </Box> */}\r\n\r\n                </Box> \r\n            </Box> \r\n        </Box> \r\n    </Box>        \r\n    )\r\n} \r\n\r\n\r\n","import * as React from 'react';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from \"@mui/material/Grid\"\r\nimport Paper from \"@mui/material/Paper\"\r\nimport Right from \"../components/main/right.jsx\"\r\nimport LeftEx from '../components/main/leftEx.jsx';\r\nimport createTheme from \"@mui/material/styles/createTheme\"\r\nimport Stack from \"@mui/material/Stack\";\r\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport Button from \"@mui/material/Button\";\r\nimport ModeEditOutlineTwoToneIcon from '@mui/icons-material/ModeEditOutlineTwoTone';\r\nimport ModeEditOutlineOutlinedIcon from '@mui/icons-material/ModeEditOutlineOutlined';\r\nimport Image from \"../assets/author-background.jpg\"\r\nimport Forms from \"../components/forms/Forms.jsx\"\r\nimport { useState , useEffect , useContext } from \"react\";\r\n// import { formTriggers} from \"../components/forms/Forms\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport { formsContext } from \"../contexts/formsContext\"\r\n// import { editAuthorProfile } from \"../components/forms/Forms\";\r\nimport { getDocs , doc , collection , query , where , setDoc , onSnapshot , orderBy , deleteDoc , updateDoc } from \"firebase/firestore\"\r\nimport { db } from \"../firebase/firebase\"; \r\n// import { createUser } from \"./firestoreProductionFunctions\";\r\nimport { authContext } from \"../contexts/authContext\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport TopicForm from \"../components/forms/topicForm\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport displayPicPlaceholder from \"../assets/displayPicPlaceholder.png\"\r\n\r\n\r\n\r\nlet  Topic = (props) => {\r\n\r\n// Topic and Tag refer to the same thing. This is a naming goof up of sorts.\r\n\r\n// formType options -- cardForm , cardFormEdit , userBioForm , userBioFormEdit , authorBioForm , confirmDelete ,  (choses the form to be displayed within the drawer)\r\n\r\nlet { authorProfile , deleteCard, addCard, editCard , closeForm , userBioForm , formProps , setFormProps , displayTopicForm  } = useContext(formsContext)\r\nlet resetFormProps = () => {        // essentially unmounts the form + resets its form state.\r\n    setFormProps( );\r\n  }\r\n\r\nlet [ cards , setCards] = useState([]); \r\nlet [ currentTopic , setCurrentTopic ] = useState({ name : \"\" , bio : \"\" , background : \"\"  });\r\nlet { uid : userUid } = useContext(authContext);\r\nlet { topicUid } = useParams();   // to catch the url param.\r\nconsole.log(`viewing cards of Topic page with uid ${topicUid}`);\r\n\r\n  useEffect( () => {\r\n\r\n    // get the topic details\r\n    (async() => {\r\n        let currentTopic = ( await getDocs( query( collection( db , \"users\" , userUid , \"tagPool\") , where(\"uid\" , \"==\" , topicUid) ) ) ).docs[0].data();\r\n        console.log(currentTopic);\r\n\r\n        setCurrentTopic(currentTopic);\r\n    })();\r\n    \r\n    console.log(\"inside the useEffect, check the cards array out\");\r\n    console.log(cards);\r\n    console.log(\"still inside the useEffect, check the uid out\");\r\n    console.log(userUid);\r\n    console.log(\"Topic / Tag uid\");\r\n    console.log(topicUid);\r\n\r\n    console.log(\"Topic wont work for some time. change the query for it to work ( change the string to a variable ) \")\r\n\r\n    // change this query --> this is a single author page. it displays all the cards of a PARTICULAR author\r\n    // this query is slightly more complex cause we need to check if a author is included in the tagsArr of a card.\r\n    // although firestore does support querying a collection on the basis of the contents of an array that is set to a document field, the contents should be simple types NOT objects \r\n    // thus, I was forced to get all cards and filter the needed cards myself locally.\r\n    let unsubscribe = onSnapshot( query( collection(db , \"users\" , userUid , \"cards\" ))  , ( querySnapshot ) => {\r\n                // unpack the snapshot returned by onSnapshot and set it to the state\r\n                let cards = querySnapshot.docs.map( ( documentSnapshot) => {\r\n                    // Currently I havent destructured each Card doc. set the whole Card object\r\n                    return documentSnapshot.data();\r\n                })\r\n                // cards now contains an arr of Card objects ( directly from Firebase)\r\n                console.log(\"in the Topic component, pulled the cards from Firebase (all cards) , we will filter then locally\")\r\n                console.log(\"unfiltered cards below\")\r\n                console.log(cards);\r\n                // declaring and using it here immediately\r\n                function getCardsOfTopic( cardsArr , topicUid ){\r\n                    // returns an array of cardObjects. ie. ones that have this particluar tag listed in its tagsrArr\r\n                    console.log(\" cardsArr and topicUid passed to getCardsOfTopic method\")\r\n                    console.log(cardsArr);\r\n                    let filtered = cardsArr.filter( ( cardObj ) => {\r\n                        // cardsArr expects a boolean\r\n                        let includeCard = false;    // assuming that the card does not include the current author\r\n                        \r\n                        for( let topicObj of cardObj.tagsArr ){\r\n                            if(topicObj.uid === topicUid){\r\n                                includeCard = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                \r\n                        return includeCard; // this will be true or false // when true, the current object will be included in the returned array by filter method. When false, it will be filtered out\r\n                    })\r\n\r\n                    return filtered;\r\n                }\r\n\r\n                cards = getCardsOfTopic(cards , topicUid)   \r\n                console.log(\"cards that belong to this topic / tag\")\r\n                console.log(cards);\r\n\r\n                // set the card arr to state. \r\n                setCards(cards);\r\n    })\r\n\r\n    return ( () => {\r\n        console.log(\"unsubscribing from realtime card updates before unmouting\");\r\n        unsubscribe();\r\n    })\r\n} , [topicUid])\r\n\r\n\r\n// delete the topic from tagPool and remove it from all the cards that have it.\r\nfunction deleteTopic(){\r\n    (async () => {\r\n        try{\r\n            // 1. remove the tag from the tagPool\r\n            let xquery = query( collection( db , \"users\" , userUid , \"tagPool\") , where(\"uid\" , \"==\" , topicUid) ) \r\n            let targetDocRef = (await getDocs( xquery )).docs[0].ref;\r\n            await deleteDoc(targetDocRef);\r\n            console.log(`${topicUid} topic deleted successfully from tagPool`);\r\n    \r\n\r\n            // 2. remove the topic ( tag ) from every card that had the tag in it -- ( all the cards in the cards State )\r\n            \r\n            //2.1 process the cards -- sync part\r\n            // processedCards is the arr of cards after the current Tag is removed from their tagsArr.\r\n            let processedCards = cards.map((cardObj) => {\r\n                // removes the curr page card obj from the list of card objects of a particular ar\r\n                    let filteredTags = cardObj.tagsArr.filter((tagObj) => {\r\n                        return tagObj.uid != currentTopic.uid;\r\n                    })\r\n                // replacing the old tagsArr with the filteredTagsArr ie. the deleted tags are excluded in this new arr\r\n                cardObj.tagsArr = filteredTags; \r\n                if(cardObj.tagsArr.length === 0){ cardObj.inQueue = true }  // checking if the card , once modified , should be in the queue\r\n                return cardObj;\r\n            })\r\n\r\n            console.log(processedCards)\r\n\r\n            \r\n            // 2.2 set ( update ) all the updated cards to Firebase \r\n            // involves a ton of async operations which we will make work with Promise.all()\r\n            Promise.all(\r\n                processedCards.map( (processedCard) => {\r\n                    console.log(`trying to update ${processedCard.uid }`)\r\n                    console.log(processedCard); \r\n                    return getDocs (query ( collection( db , `users/${userUid}/cards` ) , where( \"uid\" , \"==\" , processedCard.uid) ) )\r\n                    .then( (querySnapshot) => {\r\n                        // current card query doc snapshot ( contians ref in addition to data)\r\n                        let currentCardRef = querySnapshot.docs[0].ref;\r\n                        // passing a subset of obj to the updateDoc for efficiency sake. \r\n                        // If the partial object does not update the object in firestore properly, give it the full object\r\n                        updateDoc( currentCardRef , { tagsArr : processedCard.tagsArr , inQueue : processedCard.inQueue  }  )\r\n                    })\r\n                })\r\n             ).then(() => {\r\n                console.log(\"tags removed from cards successfuly\");\r\n             }).catch( (error) => {\r\n                 console.log(error);\r\n             })\r\n\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            console.log(`Error while trying to delete topic with uid ${topicUid}`)\r\n        }\r\n    })();\r\n}\r\n\r\n// checking the correct cards arr has been found.\r\nuseEffect( () => {\r\n    console.log(cards);\r\n} , [ cards ] )\r\n\r\n    return (\r\n        <> \r\n            <Navbar/>\r\n            <CssBaseline />\r\n            <Box sx={{  background: \"#e96443\" , \r\n                        background: \"-webkit-linear-gradient(to bottom, #904e95, #e96443)\",\r\n                        background: \"linear-gradient(to bottom, #904e95, #e96443)\",}}>\r\n            <Container maxWidth=\"lg\" sx={{ border : \"1px solid lightgrey\" , backgroundColor : \"#f7fafc\"}}  >\r\n                <Box> \r\n                    <Box >\r\n                        {/* This is the upper half -- contians banner image , author details */}\r\n                        <Box sx={{ pb : \"1rem\"}}>\r\n                                <Box className=\"bannerImageContainer\" sx={{ height: \"200px\",  width : \"100%\" , backgroundColor : \"white\", overflow : \"hidden\" }}>\r\n                                        {/* img is not a MUI component. it is a HTML element. We use inline style prop on it instead of the sx prop  */}\r\n                                        <img \r\n                                            src ={ currentTopic.background }\r\n                                            style={{ \r\n                                                minHeight : \"auto\" , \r\n                                                width: \"100%\",\r\n                                                objectFit : \"cover\",\r\n                                                objectPosition : \"center\"\r\n                                            }}\r\n                                            height=\"200px\"\r\n                                        /> \r\n\r\n                                </Box > \r\n                                <Box   sx={{ display:\"flex\", flexDirection:\"row\"  , height:\"100px\"}} >  \r\n\r\n                                        <Box className=\"middleContainer\" sx={{height : \"100%\" , flexGrow : \"2\" , display : \"flex\"}}> \r\n                                            <Box sx={{ alignSelf : \"end\" , mb: \"1rem\"  }}>\r\n                                                <Box sx={{ fontWeight : \"600\"}} >\r\n                                                    <Stack direction=\"row\" size=\"0.2rem\">\r\n                                                        <Typography sx={{ fontSize : \"1.3rem\" , fontWeight : \"600\"}}> { currentTopic.name }  </Typography>\r\n                                                        <ModeEditOutlineOutlinedIcon\r\n                                                        sx = {{fontSize : \"1.2rem\" , ml : \" 0.5rem\" , position : \"relative\" , top : \"6px\" , \"&:hover\" : { cursor : \"pointer\" , color : \"blue\"} }}\r\n                                                        onClick = { () => { displayTopicForm(topicUid) } } \r\n                                                        />\r\n                                                    </Stack>\r\n                                                    \r\n                                                </Box> \r\n                                                {/* <Box > { should contain the userBio ( stored in firestore) deactivated for now }  </Box>  */}\r\n                                                <Stack direction=\"row\">\r\n                                                    <BookmarkBorderIcon/>\r\n                                                    <Typography> { cards.length } cards </Typography>\r\n                                                </Stack> \r\n                                            </Box> \r\n                                        </Box>\r\n                                        <Box className=\"rightContainer\" sx={{height : \"100%\" , flexGrow : \"1\" , display : \"flex\"}}>\r\n                                            <Stack direction=\"row\" spacing={1} sx={{ alignSelf : \"end\" , mb : \"1rem\"   }}>\r\n                                                \r\n                                                <Button \r\n                                                variant=\"contained\" \r\n                                                startIcon={<AddIcon/>} \r\n                                                onClick = { addCard } \r\n                                                > \r\n                                                    New Card \r\n                                                </Button>\r\n\r\n                                                <Button \r\n                                                variant=\"outlined\"\r\n                                                color=\"error\"\r\n                                                startIcon={<DeleteIcon />}\r\n                                                onClick={ deleteTopic }>\r\n\r\n                                                    Delete Topic\r\n                                                </Button>\r\n\r\n                                            </Stack>\r\n                                        </Box>   \r\n                                </Box> \r\n\r\n                        </Box>  \r\n\r\n\r\n                        <Grid item container xs={12} columnSpacing=\"2\" className=\"secondGrid\" sx={{position : \"sticky\", top : 0}} >\r\n                                <Right formProps={formProps} setFormProps={setFormProps} cardType={\"details\"} cardDataArr ={ cards } parentPage=\"topic\" />\r\n                        </Grid> \r\n\r\n\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n\r\n            {/* notice when Forms will render. ie. only when formProps is not undefined ie. its initial state (check formsContext.jsx ) */}\r\n           { formProps &&  <Forms /> }\r\n            \r\n            </Box>\r\n            \r\n        </>\r\n\r\n    );\r\n}\r\n \r\nexport default Topic;\r\n\r\n\r\n","import React from 'react'\r\nimport { Route} from \"react-router-dom\";\r\nimport { useContext } from \"react\";\r\nimport { authContext } from \"../contexts/authContext\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst ProtectedRoute = ({ component : Component ,  ...rest }) => {\r\n\r\n\r\n    let data = useContext(authContext);\r\n    return(\r\n        <>\r\n\r\n        {\r\n            <Route {...rest} render={\r\n                (routeProps) => {\r\n                    if(data){\r\n                         return  <Component {...rest} {...routeProps}/>\r\n                    }\r\n                     else{\r\n                         return <Redirect to=\"/\"/> \r\n                     }\r\n                }\r\n            }/> \r\n        }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProtectedRoute;\r\n","import React from 'react';\r\nimport { useContext } from \"react\";\r\nimport { authContext } from '../contexts/authContext';\r\n\r\nconst Unauthorized = () => {\r\n\r\n    let userData = useContext( authContext);\r\n\r\n    return (\r\n        <div>\r\n            unauthorized , login to access the page you are looking for.\r\n            {userData.uid};\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Unauthorized\r\n","import Navbar from \"./components/Navbar\";\nimport Main from \"./Pages/main\";\nimport Queue from \"./Pages/queue\";\nimport Explore from \"./Pages/explore\"\nimport Author from \"./Pages/author\"\nimport Topic from \"./Pages/topic\"\nimport {BrowserRouter as Router , Switch , Route} from \"react-router-dom\";\nimport CardForm from \"./components/forms/cardForm\";\nimport AuthorForm from \"./components/forms/Forms\";\n// import { auth } from \"./firebase/firebase.js\";\nimport { createContext } from \"react\";\nimport Landing from \"./Pages/landing\";\nimport { formControlUnstyledClasses } from \"@mui/core\";\nimport DemoPage from \"./components/forms/Forms\";\nimport ProtectedRoute from \"./components/protectedRoute\";\nimport AuthContext from \"./contexts/authContext\";\nimport Unauthorized from \"./Pages/unauthorized\";\nimport NotFound from \"./Pages/notFound\";\nimport FormsContext from \"./contexts/formsContext\"\n\n\nlet App = (props) => {\n\n  return (\n      <>  \n      \n        <Router> \n            <AuthContext >\n             <FormsContext> \n                <Switch> \n\n                    <Route exact path=\"/\" component={Landing} />  \n                    <Route exact path=\"/unauthorized\" component={ Unauthorized }/> \n                    <ProtectedRoute exact path=\"/main\" component={Main} />  \n                    <ProtectedRoute exact path=\"/queue\" component={Queue} />  \n                    <ProtectedRoute exact path=\"/explore\" component={Explore} />  \n                    \n                    {/* Non Nav bar pages ( it always has to be visited wrt a particular author or topic uid ie. it always needs an accompanying uid param)  */}\n                    <ProtectedRoute exact path=\"/author/:authorUid\" component={ Author }  />\n                    <ProtectedRoute exact path=\"/topic/:topicUid\" component={ Topic }  /> \n                    {/* <Route exact path=\"*\" component={ NotFound }/>  */}\n                  \n                </Switch>\n                </FormsContext> \n              </AuthContext>\n          </Router> \n\n      </>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App/> ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}